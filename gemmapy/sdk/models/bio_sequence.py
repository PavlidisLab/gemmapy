# coding: utf-8

"""
    Gemma RESTful API

    This website documents the usage of the [Gemma REST API](https://gemma.msl.ubc.ca/rest/v2/). Here you can find example script usage of the API, as well as graphical interface for each endpoint, with description of its parameters and the endpoint URL.  The documentation of the underlying java code can be found [here](https://gemma.msl.ubc.ca/resources/apidocs/ubic/gemma/web/services/rest/package-summary.html). See the [links section](https://gemma.msl.ubc.ca/resources/restapidocs/#footer) in the footer of this page for other relevant links.  Use of this webpage and Gemma web services, including the REST API, is subject to [these terms and conditions](https://pavlidislab.github.io/Gemma/terms.html). Please read these in full before continuing to use this webpage or any other part of the Gemma system.   # noqa: E501

    OpenAPI spec version: 2.4.1
    Contact: pavlab-support@msl.ubc.ca
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BioSequence(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'id': 'int',
        'length': 'int',
        'sequence': 'str',
        'is_approximate_length': 'bool',
        'is_circular': 'bool',
        'polymer_type': 'PolymerType',
        'type': 'SequenceType',
        'fraction_repeats': 'float',
        'sequence_database_entry': 'DatabaseEntry',
        'taxon': 'Taxon',
        'bio_sequence2_gene_product': 'list[BioSequence2GeneProduct]'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'id': 'id',
        'length': 'length',
        'sequence': 'sequence',
        'is_approximate_length': 'isApproximateLength',
        'is_circular': 'isCircular',
        'polymer_type': 'polymerType',
        'type': 'type',
        'fraction_repeats': 'fractionRepeats',
        'sequence_database_entry': 'sequenceDatabaseEntry',
        'taxon': 'taxon',
        'bio_sequence2_gene_product': 'bioSequence2GeneProduct'
    }

    def __init__(self, name=None, description=None, id=None, length=None, sequence=None, is_approximate_length=None, is_circular=None, polymer_type=None, type=None, fraction_repeats=None, sequence_database_entry=None, taxon=None, bio_sequence2_gene_product=None):  # noqa: E501
        """BioSequence - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._description = None
        self._id = None
        self._length = None
        self._sequence = None
        self._is_approximate_length = None
        self._is_circular = None
        self._polymer_type = None
        self._type = None
        self._fraction_repeats = None
        self._sequence_database_entry = None
        self._taxon = None
        self._bio_sequence2_gene_product = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        if length is not None:
            self.length = length
        if sequence is not None:
            self.sequence = sequence
        if is_approximate_length is not None:
            self.is_approximate_length = is_approximate_length
        if is_circular is not None:
            self.is_circular = is_circular
        if polymer_type is not None:
            self.polymer_type = polymer_type
        if type is not None:
            self.type = type
        if fraction_repeats is not None:
            self.fraction_repeats = fraction_repeats
        if sequence_database_entry is not None:
            self.sequence_database_entry = sequence_database_entry
        if taxon is not None:
            self.taxon = taxon
        if bio_sequence2_gene_product is not None:
            self.bio_sequence2_gene_product = bio_sequence2_gene_product

    @property
    def name(self):
        """Gets the name of this BioSequence.  # noqa: E501


        :return: The name of this BioSequence.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BioSequence.


        :param name: The name of this BioSequence.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this BioSequence.  # noqa: E501


        :return: The description of this BioSequence.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BioSequence.


        :param description: The description of this BioSequence.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this BioSequence.  # noqa: E501


        :return: The id of this BioSequence.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BioSequence.


        :param id: The id of this BioSequence.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def length(self):
        """Gets the length of this BioSequence.  # noqa: E501


        :return: The length of this BioSequence.  # noqa: E501
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this BioSequence.


        :param length: The length of this BioSequence.  # noqa: E501
        :type: int
        """

        self._length = length

    @property
    def sequence(self):
        """Gets the sequence of this BioSequence.  # noqa: E501


        :return: The sequence of this BioSequence.  # noqa: E501
        :rtype: str
        """
        return self._sequence

    @sequence.setter
    def sequence(self, sequence):
        """Sets the sequence of this BioSequence.


        :param sequence: The sequence of this BioSequence.  # noqa: E501
        :type: str
        """

        self._sequence = sequence

    @property
    def is_approximate_length(self):
        """Gets the is_approximate_length of this BioSequence.  # noqa: E501


        :return: The is_approximate_length of this BioSequence.  # noqa: E501
        :rtype: bool
        """
        return self._is_approximate_length

    @is_approximate_length.setter
    def is_approximate_length(self, is_approximate_length):
        """Sets the is_approximate_length of this BioSequence.


        :param is_approximate_length: The is_approximate_length of this BioSequence.  # noqa: E501
        :type: bool
        """

        self._is_approximate_length = is_approximate_length

    @property
    def is_circular(self):
        """Gets the is_circular of this BioSequence.  # noqa: E501


        :return: The is_circular of this BioSequence.  # noqa: E501
        :rtype: bool
        """
        return self._is_circular

    @is_circular.setter
    def is_circular(self, is_circular):
        """Sets the is_circular of this BioSequence.


        :param is_circular: The is_circular of this BioSequence.  # noqa: E501
        :type: bool
        """

        self._is_circular = is_circular

    @property
    def polymer_type(self):
        """Gets the polymer_type of this BioSequence.  # noqa: E501


        :return: The polymer_type of this BioSequence.  # noqa: E501
        :rtype: PolymerType
        """
        return self._polymer_type

    @polymer_type.setter
    def polymer_type(self, polymer_type):
        """Sets the polymer_type of this BioSequence.


        :param polymer_type: The polymer_type of this BioSequence.  # noqa: E501
        :type: PolymerType
        """

        self._polymer_type = polymer_type

    @property
    def type(self):
        """Gets the type of this BioSequence.  # noqa: E501


        :return: The type of this BioSequence.  # noqa: E501
        :rtype: SequenceType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BioSequence.


        :param type: The type of this BioSequence.  # noqa: E501
        :type: SequenceType
        """

        self._type = type

    @property
    def fraction_repeats(self):
        """Gets the fraction_repeats of this BioSequence.  # noqa: E501


        :return: The fraction_repeats of this BioSequence.  # noqa: E501
        :rtype: float
        """
        return self._fraction_repeats

    @fraction_repeats.setter
    def fraction_repeats(self, fraction_repeats):
        """Sets the fraction_repeats of this BioSequence.


        :param fraction_repeats: The fraction_repeats of this BioSequence.  # noqa: E501
        :type: float
        """

        self._fraction_repeats = fraction_repeats

    @property
    def sequence_database_entry(self):
        """Gets the sequence_database_entry of this BioSequence.  # noqa: E501


        :return: The sequence_database_entry of this BioSequence.  # noqa: E501
        :rtype: DatabaseEntry
        """
        return self._sequence_database_entry

    @sequence_database_entry.setter
    def sequence_database_entry(self, sequence_database_entry):
        """Sets the sequence_database_entry of this BioSequence.


        :param sequence_database_entry: The sequence_database_entry of this BioSequence.  # noqa: E501
        :type: DatabaseEntry
        """

        self._sequence_database_entry = sequence_database_entry

    @property
    def taxon(self):
        """Gets the taxon of this BioSequence.  # noqa: E501


        :return: The taxon of this BioSequence.  # noqa: E501
        :rtype: Taxon
        """
        return self._taxon

    @taxon.setter
    def taxon(self, taxon):
        """Sets the taxon of this BioSequence.


        :param taxon: The taxon of this BioSequence.  # noqa: E501
        :type: Taxon
        """

        self._taxon = taxon

    @property
    def bio_sequence2_gene_product(self):
        """Gets the bio_sequence2_gene_product of this BioSequence.  # noqa: E501


        :return: The bio_sequence2_gene_product of this BioSequence.  # noqa: E501
        :rtype: list[BioSequence2GeneProduct]
        """
        return self._bio_sequence2_gene_product

    @bio_sequence2_gene_product.setter
    def bio_sequence2_gene_product(self, bio_sequence2_gene_product):
        """Sets the bio_sequence2_gene_product of this BioSequence.


        :param bio_sequence2_gene_product: The bio_sequence2_gene_product of this BioSequence.  # noqa: E501
        :type: list[BioSequence2GeneProduct]
        """

        self._bio_sequence2_gene_product = bio_sequence2_gene_product

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BioSequence, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BioSequence):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Gemma RESTful API

    This website documents the usage of the [Gemma REST API](https://gemma.msl.ubc.ca/rest/v2/). Here you can find example script usage of the API, as well as graphical interface for each endpoint, with description of its parameters and the endpoint URL.  The documentation of the underlying java code can be found [here](https://gemma.msl.ubc.ca/resources/apidocs/ubic/gemma/web/services/rest/package-summary.html). See the [links section](https://gemma.msl.ubc.ca/resources/restapidocs/#footer) in the footer of this page for other relevant links.  Use of this webpage and Gemma web services, including the REST API, is subject to [these terms and conditions](https://pavlidislab.github.io/Gemma/terms.html). Please read these in full before continuing to use this webpage or any other part of the Gemma system.   # noqa: E501

    OpenAPI spec version: 2.4.1
    Contact: pavlab-support@msl.ubc.ca
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BioSequence2GeneProduct(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'source_analysis': 'Analysis',
        'overlap': 'int',
        'score': 'float',
        'three_prime_distance': 'int',
        'three_prime_distance_measurement_method': 'ThreePrimeDistanceMethod',
        'specificity': 'float',
        'bio_sequence': 'BioSequence',
        'gene_product': 'GeneProduct'
    }

    attribute_map = {
        'id': 'id',
        'source_analysis': 'sourceAnalysis',
        'overlap': 'overlap',
        'score': 'score',
        'three_prime_distance': 'threePrimeDistance',
        'three_prime_distance_measurement_method': 'threePrimeDistanceMeasurementMethod',
        'specificity': 'specificity',
        'bio_sequence': 'bioSequence',
        'gene_product': 'geneProduct'
    }

    def __init__(self, id=None, source_analysis=None, overlap=None, score=None, three_prime_distance=None, three_prime_distance_measurement_method=None, specificity=None, bio_sequence=None, gene_product=None):  # noqa: E501
        """BioSequence2GeneProduct - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._source_analysis = None
        self._overlap = None
        self._score = None
        self._three_prime_distance = None
        self._three_prime_distance_measurement_method = None
        self._specificity = None
        self._bio_sequence = None
        self._gene_product = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if source_analysis is not None:
            self.source_analysis = source_analysis
        if overlap is not None:
            self.overlap = overlap
        if score is not None:
            self.score = score
        if three_prime_distance is not None:
            self.three_prime_distance = three_prime_distance
        if three_prime_distance_measurement_method is not None:
            self.three_prime_distance_measurement_method = three_prime_distance_measurement_method
        if specificity is not None:
            self.specificity = specificity
        if bio_sequence is not None:
            self.bio_sequence = bio_sequence
        if gene_product is not None:
            self.gene_product = gene_product

    @property
    def id(self):
        """Gets the id of this BioSequence2GeneProduct.  # noqa: E501


        :return: The id of this BioSequence2GeneProduct.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BioSequence2GeneProduct.


        :param id: The id of this BioSequence2GeneProduct.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def source_analysis(self):
        """Gets the source_analysis of this BioSequence2GeneProduct.  # noqa: E501


        :return: The source_analysis of this BioSequence2GeneProduct.  # noqa: E501
        :rtype: Analysis
        """
        return self._source_analysis

    @source_analysis.setter
    def source_analysis(self, source_analysis):
        """Sets the source_analysis of this BioSequence2GeneProduct.


        :param source_analysis: The source_analysis of this BioSequence2GeneProduct.  # noqa: E501
        :type: Analysis
        """

        self._source_analysis = source_analysis

    @property
    def overlap(self):
        """Gets the overlap of this BioSequence2GeneProduct.  # noqa: E501


        :return: The overlap of this BioSequence2GeneProduct.  # noqa: E501
        :rtype: int
        """
        return self._overlap

    @overlap.setter
    def overlap(self, overlap):
        """Sets the overlap of this BioSequence2GeneProduct.


        :param overlap: The overlap of this BioSequence2GeneProduct.  # noqa: E501
        :type: int
        """

        self._overlap = overlap

    @property
    def score(self):
        """Gets the score of this BioSequence2GeneProduct.  # noqa: E501


        :return: The score of this BioSequence2GeneProduct.  # noqa: E501
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this BioSequence2GeneProduct.


        :param score: The score of this BioSequence2GeneProduct.  # noqa: E501
        :type: float
        """

        self._score = score

    @property
    def three_prime_distance(self):
        """Gets the three_prime_distance of this BioSequence2GeneProduct.  # noqa: E501


        :return: The three_prime_distance of this BioSequence2GeneProduct.  # noqa: E501
        :rtype: int
        """
        return self._three_prime_distance

    @three_prime_distance.setter
    def three_prime_distance(self, three_prime_distance):
        """Sets the three_prime_distance of this BioSequence2GeneProduct.


        :param three_prime_distance: The three_prime_distance of this BioSequence2GeneProduct.  # noqa: E501
        :type: int
        """

        self._three_prime_distance = three_prime_distance

    @property
    def three_prime_distance_measurement_method(self):
        """Gets the three_prime_distance_measurement_method of this BioSequence2GeneProduct.  # noqa: E501


        :return: The three_prime_distance_measurement_method of this BioSequence2GeneProduct.  # noqa: E501
        :rtype: ThreePrimeDistanceMethod
        """
        return self._three_prime_distance_measurement_method

    @three_prime_distance_measurement_method.setter
    def three_prime_distance_measurement_method(self, three_prime_distance_measurement_method):
        """Sets the three_prime_distance_measurement_method of this BioSequence2GeneProduct.


        :param three_prime_distance_measurement_method: The three_prime_distance_measurement_method of this BioSequence2GeneProduct.  # noqa: E501
        :type: ThreePrimeDistanceMethod
        """

        self._three_prime_distance_measurement_method = three_prime_distance_measurement_method

    @property
    def specificity(self):
        """Gets the specificity of this BioSequence2GeneProduct.  # noqa: E501


        :return: The specificity of this BioSequence2GeneProduct.  # noqa: E501
        :rtype: float
        """
        return self._specificity

    @specificity.setter
    def specificity(self, specificity):
        """Sets the specificity of this BioSequence2GeneProduct.


        :param specificity: The specificity of this BioSequence2GeneProduct.  # noqa: E501
        :type: float
        """

        self._specificity = specificity

    @property
    def bio_sequence(self):
        """Gets the bio_sequence of this BioSequence2GeneProduct.  # noqa: E501


        :return: The bio_sequence of this BioSequence2GeneProduct.  # noqa: E501
        :rtype: BioSequence
        """
        return self._bio_sequence

    @bio_sequence.setter
    def bio_sequence(self, bio_sequence):
        """Sets the bio_sequence of this BioSequence2GeneProduct.


        :param bio_sequence: The bio_sequence of this BioSequence2GeneProduct.  # noqa: E501
        :type: BioSequence
        """

        self._bio_sequence = bio_sequence

    @property
    def gene_product(self):
        """Gets the gene_product of this BioSequence2GeneProduct.  # noqa: E501


        :return: The gene_product of this BioSequence2GeneProduct.  # noqa: E501
        :rtype: GeneProduct
        """
        return self._gene_product

    @gene_product.setter
    def gene_product(self, gene_product):
        """Sets the gene_product of this BioSequence2GeneProduct.


        :param gene_product: The gene_product of this BioSequence2GeneProduct.  # noqa: E501
        :type: GeneProduct
        """

        self._gene_product = gene_product

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BioSequence2GeneProduct, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BioSequence2GeneProduct):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

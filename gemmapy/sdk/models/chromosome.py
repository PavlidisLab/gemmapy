# coding: utf-8

"""
    Gemma RESTful API

    This website documents the usage of the [Gemma REST API](https://gemma.msl.ubc.ca/rest/v2/). Here you can find example script usage of the API, as well as graphical interface for each endpoint, with description of its parameters and the endpoint URL.  The documentation of the underlying java code can be found [here](https://gemma.msl.ubc.ca/resources/apidocs/ubic/gemma/web/services/rest/package-summary.html). See the [links section](https://gemma.msl.ubc.ca/resources/restapidocs/#footer) in the footer of this page for other relevant links.  Use of this webpage and Gemma web services, including the REST API, is subject to [these terms and conditions](https://pavlidislab.github.io/Gemma/terms.html). Please read these in full before continuing to use this webpage or any other part of the Gemma system.   # noqa: E501

    OpenAPI spec version: 2.4.1
    Contact: pavlab-support@msl.ubc.ca
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Chromosome(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'assembly_database': 'ExternalDatabase',
        'sequence': 'BioSequence',
        'taxon': 'Taxon',
        'id': 'int'
    }

    attribute_map = {
        'name': 'name',
        'assembly_database': 'assemblyDatabase',
        'sequence': 'sequence',
        'taxon': 'taxon',
        'id': 'id'
    }

    def __init__(self, name=None, assembly_database=None, sequence=None, taxon=None, id=None):  # noqa: E501
        """Chromosome - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._assembly_database = None
        self._sequence = None
        self._taxon = None
        self._id = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if assembly_database is not None:
            self.assembly_database = assembly_database
        if sequence is not None:
            self.sequence = sequence
        if taxon is not None:
            self.taxon = taxon
        if id is not None:
            self.id = id

    @property
    def name(self):
        """Gets the name of this Chromosome.  # noqa: E501


        :return: The name of this Chromosome.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Chromosome.


        :param name: The name of this Chromosome.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def assembly_database(self):
        """Gets the assembly_database of this Chromosome.  # noqa: E501


        :return: The assembly_database of this Chromosome.  # noqa: E501
        :rtype: ExternalDatabase
        """
        return self._assembly_database

    @assembly_database.setter
    def assembly_database(self, assembly_database):
        """Sets the assembly_database of this Chromosome.


        :param assembly_database: The assembly_database of this Chromosome.  # noqa: E501
        :type: ExternalDatabase
        """

        self._assembly_database = assembly_database

    @property
    def sequence(self):
        """Gets the sequence of this Chromosome.  # noqa: E501


        :return: The sequence of this Chromosome.  # noqa: E501
        :rtype: BioSequence
        """
        return self._sequence

    @sequence.setter
    def sequence(self, sequence):
        """Sets the sequence of this Chromosome.


        :param sequence: The sequence of this Chromosome.  # noqa: E501
        :type: BioSequence
        """

        self._sequence = sequence

    @property
    def taxon(self):
        """Gets the taxon of this Chromosome.  # noqa: E501


        :return: The taxon of this Chromosome.  # noqa: E501
        :rtype: Taxon
        """
        return self._taxon

    @taxon.setter
    def taxon(self, taxon):
        """Sets the taxon of this Chromosome.


        :param taxon: The taxon of this Chromosome.  # noqa: E501
        :type: Taxon
        """

        self._taxon = taxon

    @property
    def id(self):
        """Gets the id of this Chromosome.  # noqa: E501


        :return: The id of this Chromosome.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Chromosome.


        :param id: The id of this Chromosome.  # noqa: E501
        :type: int
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Chromosome, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Chromosome):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Gemma RESTful API

    This website documents the usage of the [Gemma RESTful API](https://gemma.msl.ubc.ca/rest/v2/). Here you can find example script usage of the API, as well as graphical interface for each endpoint, with description of its parameters and the endpoint URL.  Use of this webpage and the Gemma Web services, including the REST API, is subject to [these terms and conditions](https://pavlidislab.github.io/Gemma/terms.html). Please read these in full before continuing to use this webpage or any other part of the Gemma system.  You can [consult the CHANGELOG.md file](https://gemma.msl.ubc.ca/resources/restapidocs/CHANGELOG.md) to view  release notes and recent changes to the Gemma RESTful API.   # noqa: E501

    OpenAPI spec version: 2.7.4
    Contact: pavlab-support@msl.ubc.ca
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GeneOntologyTermValueObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'go_id': 'str',
        'label': 'str',
        'uri': 'str',
        'comment': 'str',
        'local_name': 'str',
        'term': 'str',
        'obsolete': 'bool'
    }

    attribute_map = {
        'go_id': 'goId',
        'label': 'label',
        'uri': 'uri',
        'comment': 'comment',
        'local_name': 'localName',
        'term': 'term',
        'obsolete': 'obsolete'
    }

    def __init__(self, go_id=None, label=None, uri=None, comment=None, local_name=None, term=None, obsolete=None):  # noqa: E501
        """GeneOntologyTermValueObject - a model defined in Swagger"""  # noqa: E501
        self._go_id = None
        self._label = None
        self._uri = None
        self._comment = None
        self._local_name = None
        self._term = None
        self._obsolete = None
        self.discriminator = None
        if go_id is not None:
            self.go_id = go_id
        if label is not None:
            self.label = label
        if uri is not None:
            self.uri = uri
        if comment is not None:
            self.comment = comment
        if local_name is not None:
            self.local_name = local_name
        if term is not None:
            self.term = term
        if obsolete is not None:
            self.obsolete = obsolete

    @property
    def go_id(self):
        """Gets the go_id of this GeneOntologyTermValueObject.  # noqa: E501


        :return: The go_id of this GeneOntologyTermValueObject.  # noqa: E501
        :rtype: str
        """
        return self._go_id

    @go_id.setter
    def go_id(self, go_id):
        """Sets the go_id of this GeneOntologyTermValueObject.


        :param go_id: The go_id of this GeneOntologyTermValueObject.  # noqa: E501
        :type: str
        """

        self._go_id = go_id

    @property
    def label(self):
        """Gets the label of this GeneOntologyTermValueObject.  # noqa: E501


        :return: The label of this GeneOntologyTermValueObject.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this GeneOntologyTermValueObject.


        :param label: The label of this GeneOntologyTermValueObject.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def uri(self):
        """Gets the uri of this GeneOntologyTermValueObject.  # noqa: E501


        :return: The uri of this GeneOntologyTermValueObject.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this GeneOntologyTermValueObject.


        :param uri: The uri of this GeneOntologyTermValueObject.  # noqa: E501
        :type: str
        """

        self._uri = uri

    @property
    def comment(self):
        """Gets the comment of this GeneOntologyTermValueObject.  # noqa: E501


        :return: The comment of this GeneOntologyTermValueObject.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this GeneOntologyTermValueObject.


        :param comment: The comment of this GeneOntologyTermValueObject.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def local_name(self):
        """Gets the local_name of this GeneOntologyTermValueObject.  # noqa: E501


        :return: The local_name of this GeneOntologyTermValueObject.  # noqa: E501
        :rtype: str
        """
        return self._local_name

    @local_name.setter
    def local_name(self, local_name):
        """Sets the local_name of this GeneOntologyTermValueObject.


        :param local_name: The local_name of this GeneOntologyTermValueObject.  # noqa: E501
        :type: str
        """

        self._local_name = local_name

    @property
    def term(self):
        """Gets the term of this GeneOntologyTermValueObject.  # noqa: E501


        :return: The term of this GeneOntologyTermValueObject.  # noqa: E501
        :rtype: str
        """
        return self._term

    @term.setter
    def term(self, term):
        """Sets the term of this GeneOntologyTermValueObject.


        :param term: The term of this GeneOntologyTermValueObject.  # noqa: E501
        :type: str
        """

        self._term = term

    @property
    def obsolete(self):
        """Gets the obsolete of this GeneOntologyTermValueObject.  # noqa: E501


        :return: The obsolete of this GeneOntologyTermValueObject.  # noqa: E501
        :rtype: bool
        """
        return self._obsolete

    @obsolete.setter
    def obsolete(self, obsolete):
        """Sets the obsolete of this GeneOntologyTermValueObject.


        :param obsolete: The obsolete of this GeneOntologyTermValueObject.  # noqa: E501
        :type: bool
        """

        self._obsolete = obsolete

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GeneOntologyTermValueObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GeneOntologyTermValueObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

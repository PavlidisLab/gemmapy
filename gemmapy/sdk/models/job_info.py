# coding: utf-8

"""
    Gemma RESTful API

    This website documents the usage of the [Gemma REST API](https://gemma.msl.ubc.ca/rest/v2/). Here you can find example script usage of the API, as well as graphical interface for each endpoint, with description of its parameters and the endpoint URL.  The documentation of the underlying java code can be found [here](https://gemma.msl.ubc.ca/resources/apidocs/ubic/gemma/web/services/rest/package-summary.html). See the [links section](https://gemma.msl.ubc.ca/resources/restapidocs/#footer) in the footer of this page for other relevant links.  Use of this webpage and Gemma web services, including the REST API, is subject to [these terms and conditions](https://pavlidislab.github.io/Gemma/terms.html). Please read these in full before continuing to use this webpage or any other part of the Gemma system.   # noqa: E501

    OpenAPI spec version: 2.4.1
    Contact: pavlab-support@msl.ubc.ca
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class JobInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'running_status': 'bool',
        'failed_message': 'str',
        'start_time': 'datetime',
        'end_time': 'datetime',
        'phases': 'int',
        'description': 'str',
        'messages': 'str',
        'task_id': 'str',
        'id': 'int',
        'user': 'User'
    }

    attribute_map = {
        'running_status': 'runningStatus',
        'failed_message': 'failedMessage',
        'start_time': 'startTime',
        'end_time': 'endTime',
        'phases': 'phases',
        'description': 'description',
        'messages': 'messages',
        'task_id': 'taskId',
        'id': 'id',
        'user': 'user'
    }

    def __init__(self, running_status=None, failed_message=None, start_time=None, end_time=None, phases=None, description=None, messages=None, task_id=None, id=None, user=None):  # noqa: E501
        """JobInfo - a model defined in Swagger"""  # noqa: E501
        self._running_status = None
        self._failed_message = None
        self._start_time = None
        self._end_time = None
        self._phases = None
        self._description = None
        self._messages = None
        self._task_id = None
        self._id = None
        self._user = None
        self.discriminator = None
        if running_status is not None:
            self.running_status = running_status
        if failed_message is not None:
            self.failed_message = failed_message
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if phases is not None:
            self.phases = phases
        if description is not None:
            self.description = description
        if messages is not None:
            self.messages = messages
        if task_id is not None:
            self.task_id = task_id
        if id is not None:
            self.id = id
        if user is not None:
            self.user = user

    @property
    def running_status(self):
        """Gets the running_status of this JobInfo.  # noqa: E501


        :return: The running_status of this JobInfo.  # noqa: E501
        :rtype: bool
        """
        return self._running_status

    @running_status.setter
    def running_status(self, running_status):
        """Sets the running_status of this JobInfo.


        :param running_status: The running_status of this JobInfo.  # noqa: E501
        :type: bool
        """

        self._running_status = running_status

    @property
    def failed_message(self):
        """Gets the failed_message of this JobInfo.  # noqa: E501


        :return: The failed_message of this JobInfo.  # noqa: E501
        :rtype: str
        """
        return self._failed_message

    @failed_message.setter
    def failed_message(self, failed_message):
        """Sets the failed_message of this JobInfo.


        :param failed_message: The failed_message of this JobInfo.  # noqa: E501
        :type: str
        """

        self._failed_message = failed_message

    @property
    def start_time(self):
        """Gets the start_time of this JobInfo.  # noqa: E501


        :return: The start_time of this JobInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this JobInfo.


        :param start_time: The start_time of this JobInfo.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this JobInfo.  # noqa: E501


        :return: The end_time of this JobInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this JobInfo.


        :param end_time: The end_time of this JobInfo.  # noqa: E501
        :type: datetime
        """

        self._end_time = end_time

    @property
    def phases(self):
        """Gets the phases of this JobInfo.  # noqa: E501


        :return: The phases of this JobInfo.  # noqa: E501
        :rtype: int
        """
        return self._phases

    @phases.setter
    def phases(self, phases):
        """Sets the phases of this JobInfo.


        :param phases: The phases of this JobInfo.  # noqa: E501
        :type: int
        """

        self._phases = phases

    @property
    def description(self):
        """Gets the description of this JobInfo.  # noqa: E501


        :return: The description of this JobInfo.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this JobInfo.


        :param description: The description of this JobInfo.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def messages(self):
        """Gets the messages of this JobInfo.  # noqa: E501


        :return: The messages of this JobInfo.  # noqa: E501
        :rtype: str
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this JobInfo.


        :param messages: The messages of this JobInfo.  # noqa: E501
        :type: str
        """

        self._messages = messages

    @property
    def task_id(self):
        """Gets the task_id of this JobInfo.  # noqa: E501


        :return: The task_id of this JobInfo.  # noqa: E501
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this JobInfo.


        :param task_id: The task_id of this JobInfo.  # noqa: E501
        :type: str
        """

        self._task_id = task_id

    @property
    def id(self):
        """Gets the id of this JobInfo.  # noqa: E501


        :return: The id of this JobInfo.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this JobInfo.


        :param id: The id of this JobInfo.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def user(self):
        """Gets the user of this JobInfo.  # noqa: E501


        :return: The user of this JobInfo.  # noqa: E501
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this JobInfo.


        :param user: The user of this JobInfo.  # noqa: E501
        :type: User
        """

        self._user = user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

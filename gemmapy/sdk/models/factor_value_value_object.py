# coding: utf-8

"""
    Gemma RESTful API

    This website documents the usage of the [Gemma REST API](https://gemma.msl.ubc.ca/rest/v2/). Here you can find example script usage of the API, as well as graphical interface for each endpoint, with description of its parameters and the endpoint URL.  The documentation of the underlying java code can be found [here](https://gemma.msl.ubc.ca/resources/apidocs/ubic/gemma/web/services/rest/package-summary.html). See the [links section](https://gemma.msl.ubc.ca/resources/restapidocs/#footer) in the footer of this page for other relevant links.  Use of this webpage and Gemma web services, including the REST API, is subject to [these terms and conditions](https://pavlidislab.github.io/Gemma/terms.html). Please read these in full before continuing to use this webpage or any other part of the Gemma system.   # noqa: E501

    OpenAPI spec version: 2.4.1
    Contact: pavlab-support@msl.ubc.ca
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FactorValueValueObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'category': 'str',
        'category_uri': 'str',
        'description': 'str',
        'value': 'str',
        'value_uri': 'str',
        'char_id': 'int',
        'factor_id': 'int',
        'is_baseline': 'bool',
        'measurement': 'bool',
        'factor_value': 'str'
    }

    attribute_map = {
        'id': 'id',
        'category': 'category',
        'category_uri': 'categoryUri',
        'description': 'description',
        'value': 'value',
        'value_uri': 'valueUri',
        'char_id': 'charId',
        'factor_id': 'factorId',
        'is_baseline': 'isBaseline',
        'measurement': 'measurement',
        'factor_value': 'factorValue'
    }

    def __init__(self, id=None, category=None, category_uri=None, description=None, value=None, value_uri=None, char_id=None, factor_id=None, is_baseline=None, measurement=None, factor_value=None):  # noqa: E501
        """FactorValueValueObject - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._category = None
        self._category_uri = None
        self._description = None
        self._value = None
        self._value_uri = None
        self._char_id = None
        self._factor_id = None
        self._is_baseline = None
        self._measurement = None
        self._factor_value = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if category is not None:
            self.category = category
        if category_uri is not None:
            self.category_uri = category_uri
        if description is not None:
            self.description = description
        if value is not None:
            self.value = value
        if value_uri is not None:
            self.value_uri = value_uri
        if char_id is not None:
            self.char_id = char_id
        if factor_id is not None:
            self.factor_id = factor_id
        if is_baseline is not None:
            self.is_baseline = is_baseline
        if measurement is not None:
            self.measurement = measurement
        if factor_value is not None:
            self.factor_value = factor_value

    @property
    def id(self):
        """Gets the id of this FactorValueValueObject.  # noqa: E501


        :return: The id of this FactorValueValueObject.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FactorValueValueObject.


        :param id: The id of this FactorValueValueObject.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def category(self):
        """Gets the category of this FactorValueValueObject.  # noqa: E501


        :return: The category of this FactorValueValueObject.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this FactorValueValueObject.


        :param category: The category of this FactorValueValueObject.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def category_uri(self):
        """Gets the category_uri of this FactorValueValueObject.  # noqa: E501


        :return: The category_uri of this FactorValueValueObject.  # noqa: E501
        :rtype: str
        """
        return self._category_uri

    @category_uri.setter
    def category_uri(self, category_uri):
        """Sets the category_uri of this FactorValueValueObject.


        :param category_uri: The category_uri of this FactorValueValueObject.  # noqa: E501
        :type: str
        """

        self._category_uri = category_uri

    @property
    def description(self):
        """Gets the description of this FactorValueValueObject.  # noqa: E501


        :return: The description of this FactorValueValueObject.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FactorValueValueObject.


        :param description: The description of this FactorValueValueObject.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def value(self):
        """Gets the value of this FactorValueValueObject.  # noqa: E501


        :return: The value of this FactorValueValueObject.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this FactorValueValueObject.


        :param value: The value of this FactorValueValueObject.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def value_uri(self):
        """Gets the value_uri of this FactorValueValueObject.  # noqa: E501


        :return: The value_uri of this FactorValueValueObject.  # noqa: E501
        :rtype: str
        """
        return self._value_uri

    @value_uri.setter
    def value_uri(self, value_uri):
        """Sets the value_uri of this FactorValueValueObject.


        :param value_uri: The value_uri of this FactorValueValueObject.  # noqa: E501
        :type: str
        """

        self._value_uri = value_uri

    @property
    def char_id(self):
        """Gets the char_id of this FactorValueValueObject.  # noqa: E501


        :return: The char_id of this FactorValueValueObject.  # noqa: E501
        :rtype: int
        """
        return self._char_id

    @char_id.setter
    def char_id(self, char_id):
        """Sets the char_id of this FactorValueValueObject.


        :param char_id: The char_id of this FactorValueValueObject.  # noqa: E501
        :type: int
        """

        self._char_id = char_id

    @property
    def factor_id(self):
        """Gets the factor_id of this FactorValueValueObject.  # noqa: E501


        :return: The factor_id of this FactorValueValueObject.  # noqa: E501
        :rtype: int
        """
        return self._factor_id

    @factor_id.setter
    def factor_id(self, factor_id):
        """Sets the factor_id of this FactorValueValueObject.


        :param factor_id: The factor_id of this FactorValueValueObject.  # noqa: E501
        :type: int
        """

        self._factor_id = factor_id

    @property
    def is_baseline(self):
        """Gets the is_baseline of this FactorValueValueObject.  # noqa: E501


        :return: The is_baseline of this FactorValueValueObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_baseline

    @is_baseline.setter
    def is_baseline(self, is_baseline):
        """Sets the is_baseline of this FactorValueValueObject.


        :param is_baseline: The is_baseline of this FactorValueValueObject.  # noqa: E501
        :type: bool
        """

        self._is_baseline = is_baseline

    @property
    def measurement(self):
        """Gets the measurement of this FactorValueValueObject.  # noqa: E501


        :return: The measurement of this FactorValueValueObject.  # noqa: E501
        :rtype: bool
        """
        return self._measurement

    @measurement.setter
    def measurement(self, measurement):
        """Sets the measurement of this FactorValueValueObject.


        :param measurement: The measurement of this FactorValueValueObject.  # noqa: E501
        :type: bool
        """

        self._measurement = measurement

    @property
    def factor_value(self):
        """Gets the factor_value of this FactorValueValueObject.  # noqa: E501


        :return: The factor_value of this FactorValueValueObject.  # noqa: E501
        :rtype: str
        """
        return self._factor_value

    @factor_value.setter
    def factor_value(self, factor_value):
        """Sets the factor_value of this FactorValueValueObject.


        :param factor_value: The factor_value of this FactorValueValueObject.  # noqa: E501
        :type: str
        """

        self._factor_value = factor_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FactorValueValueObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FactorValueValueObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Gemma RESTful API

    This website documents the usage of the [Gemma REST API](https://gemma.msl.ubc.ca/rest/v2/). Here you can find example script usage of the API, as well as graphical interface for each endpoint, with description of its parameters and the endpoint URL.  The documentation of the underlying java code can be found [here](https://gemma.msl.ubc.ca/resources/apidocs/ubic/gemma/web/services/rest/package-summary.html). See the [links section](https://gemma.msl.ubc.ca/resources/restapidocs/#footer) in the footer of this page for other relevant links.  Use of this webpage and Gemma web services, including the REST API, is subject to [these terms and conditions](https://pavlidislab.github.io/Gemma/terms.html). Please read these in full before continuing to use this webpage or any other part of the Gemma system.   # noqa: E501

    OpenAPI spec version: 2.4.1
    Contact: pavlab-support@msl.ubc.ca
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ExpressionExperimentValueObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'last_updated': 'datetime',
        'troubled': 'bool',
        'last_troubled_event': 'AuditEventValueObject',
        'needs_attention': 'bool',
        'last_needs_attention_event': 'AuditEventValueObject',
        'curation_note': 'str',
        'last_note_update_event': 'AuditEventValueObject',
        'bio_assay_count': 'int',
        'description': 'str',
        'name': 'str',
        'accession': 'str',
        'array_design_count': 'int',
        'batch_confound': 'str',
        'batch_effect': 'str',
        'bio_material_count': 'int',
        'current_user_has_write_permission': 'bool',
        'current_user_is_owner': 'bool',
        'experimental_design': 'int',
        'external_database': 'str',
        'external_uri': 'str',
        'geeq': 'GeeqValueObject',
        'is_public': 'bool',
        'is_shared': 'bool',
        'metadata': 'str',
        'processed_expression_vector_count': 'int',
        'short_name': 'str',
        'source': 'str',
        'suitable_for_dea': 'bool',
        'taxon': 'str',
        'taxon_id': 'int',
        'technology_type': 'str',
        'user_owned': 'bool',
        'user_can_write': 'bool',
        'trouble_details': 'str'
    }

    attribute_map = {
        'id': 'id',
        'last_updated': 'lastUpdated',
        'troubled': 'troubled',
        'last_troubled_event': 'lastTroubledEvent',
        'needs_attention': 'needsAttention',
        'last_needs_attention_event': 'lastNeedsAttentionEvent',
        'curation_note': 'curationNote',
        'last_note_update_event': 'lastNoteUpdateEvent',
        'bio_assay_count': 'bioAssayCount',
        'description': 'description',
        'name': 'name',
        'accession': 'accession',
        'array_design_count': 'arrayDesignCount',
        'batch_confound': 'batchConfound',
        'batch_effect': 'batchEffect',
        'bio_material_count': 'bioMaterialCount',
        'current_user_has_write_permission': 'currentUserHasWritePermission',
        'current_user_is_owner': 'currentUserIsOwner',
        'experimental_design': 'experimentalDesign',
        'external_database': 'externalDatabase',
        'external_uri': 'externalUri',
        'geeq': 'geeq',
        'is_public': 'isPublic',
        'is_shared': 'isShared',
        'metadata': 'metadata',
        'processed_expression_vector_count': 'processedExpressionVectorCount',
        'short_name': 'shortName',
        'source': 'source',
        'suitable_for_dea': 'suitableForDEA',
        'taxon': 'taxon',
        'taxon_id': 'taxonId',
        'technology_type': 'technologyType',
        'user_owned': 'userOwned',
        'user_can_write': 'userCanWrite',
        'trouble_details': 'troubleDetails'
    }

    def __init__(self, id=None, last_updated=None, troubled=None, last_troubled_event=None, needs_attention=None, last_needs_attention_event=None, curation_note=None, last_note_update_event=None, bio_assay_count=None, description=None, name=None, accession=None, array_design_count=None, batch_confound=None, batch_effect=None, bio_material_count=None, current_user_has_write_permission=None, current_user_is_owner=None, experimental_design=None, external_database=None, external_uri=None, geeq=None, is_public=None, is_shared=None, metadata=None, processed_expression_vector_count=None, short_name=None, source=None, suitable_for_dea=None, taxon=None, taxon_id=None, technology_type=None, user_owned=None, user_can_write=None, trouble_details=None):  # noqa: E501
        """ExpressionExperimentValueObject - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._last_updated = None
        self._troubled = None
        self._last_troubled_event = None
        self._needs_attention = None
        self._last_needs_attention_event = None
        self._curation_note = None
        self._last_note_update_event = None
        self._bio_assay_count = None
        self._description = None
        self._name = None
        self._accession = None
        self._array_design_count = None
        self._batch_confound = None
        self._batch_effect = None
        self._bio_material_count = None
        self._current_user_has_write_permission = None
        self._current_user_is_owner = None
        self._experimental_design = None
        self._external_database = None
        self._external_uri = None
        self._geeq = None
        self._is_public = None
        self._is_shared = None
        self._metadata = None
        self._processed_expression_vector_count = None
        self._short_name = None
        self._source = None
        self._suitable_for_dea = None
        self._taxon = None
        self._taxon_id = None
        self._technology_type = None
        self._user_owned = None
        self._user_can_write = None
        self._trouble_details = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if last_updated is not None:
            self.last_updated = last_updated
        if troubled is not None:
            self.troubled = troubled
        if last_troubled_event is not None:
            self.last_troubled_event = last_troubled_event
        if needs_attention is not None:
            self.needs_attention = needs_attention
        if last_needs_attention_event is not None:
            self.last_needs_attention_event = last_needs_attention_event
        if curation_note is not None:
            self.curation_note = curation_note
        if last_note_update_event is not None:
            self.last_note_update_event = last_note_update_event
        if bio_assay_count is not None:
            self.bio_assay_count = bio_assay_count
        if description is not None:
            self.description = description
        if name is not None:
            self.name = name
        if accession is not None:
            self.accession = accession
        if array_design_count is not None:
            self.array_design_count = array_design_count
        if batch_confound is not None:
            self.batch_confound = batch_confound
        if batch_effect is not None:
            self.batch_effect = batch_effect
        if bio_material_count is not None:
            self.bio_material_count = bio_material_count
        if current_user_has_write_permission is not None:
            self.current_user_has_write_permission = current_user_has_write_permission
        if current_user_is_owner is not None:
            self.current_user_is_owner = current_user_is_owner
        if experimental_design is not None:
            self.experimental_design = experimental_design
        if external_database is not None:
            self.external_database = external_database
        if external_uri is not None:
            self.external_uri = external_uri
        if geeq is not None:
            self.geeq = geeq
        if is_public is not None:
            self.is_public = is_public
        if is_shared is not None:
            self.is_shared = is_shared
        if metadata is not None:
            self.metadata = metadata
        if processed_expression_vector_count is not None:
            self.processed_expression_vector_count = processed_expression_vector_count
        if short_name is not None:
            self.short_name = short_name
        if source is not None:
            self.source = source
        if suitable_for_dea is not None:
            self.suitable_for_dea = suitable_for_dea
        if taxon is not None:
            self.taxon = taxon
        if taxon_id is not None:
            self.taxon_id = taxon_id
        if technology_type is not None:
            self.technology_type = technology_type
        if user_owned is not None:
            self.user_owned = user_owned
        if user_can_write is not None:
            self.user_can_write = user_can_write
        if trouble_details is not None:
            self.trouble_details = trouble_details

    @property
    def id(self):
        """Gets the id of this ExpressionExperimentValueObject.  # noqa: E501


        :return: The id of this ExpressionExperimentValueObject.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ExpressionExperimentValueObject.


        :param id: The id of this ExpressionExperimentValueObject.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def last_updated(self):
        """Gets the last_updated of this ExpressionExperimentValueObject.  # noqa: E501


        :return: The last_updated of this ExpressionExperimentValueObject.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this ExpressionExperimentValueObject.


        :param last_updated: The last_updated of this ExpressionExperimentValueObject.  # noqa: E501
        :type: datetime
        """

        self._last_updated = last_updated

    @property
    def troubled(self):
        """Gets the troubled of this ExpressionExperimentValueObject.  # noqa: E501


        :return: The troubled of this ExpressionExperimentValueObject.  # noqa: E501
        :rtype: bool
        """
        return self._troubled

    @troubled.setter
    def troubled(self, troubled):
        """Sets the troubled of this ExpressionExperimentValueObject.


        :param troubled: The troubled of this ExpressionExperimentValueObject.  # noqa: E501
        :type: bool
        """

        self._troubled = troubled

    @property
    def last_troubled_event(self):
        """Gets the last_troubled_event of this ExpressionExperimentValueObject.  # noqa: E501


        :return: The last_troubled_event of this ExpressionExperimentValueObject.  # noqa: E501
        :rtype: AuditEventValueObject
        """
        return self._last_troubled_event

    @last_troubled_event.setter
    def last_troubled_event(self, last_troubled_event):
        """Sets the last_troubled_event of this ExpressionExperimentValueObject.


        :param last_troubled_event: The last_troubled_event of this ExpressionExperimentValueObject.  # noqa: E501
        :type: AuditEventValueObject
        """

        self._last_troubled_event = last_troubled_event

    @property
    def needs_attention(self):
        """Gets the needs_attention of this ExpressionExperimentValueObject.  # noqa: E501


        :return: The needs_attention of this ExpressionExperimentValueObject.  # noqa: E501
        :rtype: bool
        """
        return self._needs_attention

    @needs_attention.setter
    def needs_attention(self, needs_attention):
        """Sets the needs_attention of this ExpressionExperimentValueObject.


        :param needs_attention: The needs_attention of this ExpressionExperimentValueObject.  # noqa: E501
        :type: bool
        """

        self._needs_attention = needs_attention

    @property
    def last_needs_attention_event(self):
        """Gets the last_needs_attention_event of this ExpressionExperimentValueObject.  # noqa: E501


        :return: The last_needs_attention_event of this ExpressionExperimentValueObject.  # noqa: E501
        :rtype: AuditEventValueObject
        """
        return self._last_needs_attention_event

    @last_needs_attention_event.setter
    def last_needs_attention_event(self, last_needs_attention_event):
        """Sets the last_needs_attention_event of this ExpressionExperimentValueObject.


        :param last_needs_attention_event: The last_needs_attention_event of this ExpressionExperimentValueObject.  # noqa: E501
        :type: AuditEventValueObject
        """

        self._last_needs_attention_event = last_needs_attention_event

    @property
    def curation_note(self):
        """Gets the curation_note of this ExpressionExperimentValueObject.  # noqa: E501


        :return: The curation_note of this ExpressionExperimentValueObject.  # noqa: E501
        :rtype: str
        """
        return self._curation_note

    @curation_note.setter
    def curation_note(self, curation_note):
        """Sets the curation_note of this ExpressionExperimentValueObject.


        :param curation_note: The curation_note of this ExpressionExperimentValueObject.  # noqa: E501
        :type: str
        """

        self._curation_note = curation_note

    @property
    def last_note_update_event(self):
        """Gets the last_note_update_event of this ExpressionExperimentValueObject.  # noqa: E501


        :return: The last_note_update_event of this ExpressionExperimentValueObject.  # noqa: E501
        :rtype: AuditEventValueObject
        """
        return self._last_note_update_event

    @last_note_update_event.setter
    def last_note_update_event(self, last_note_update_event):
        """Sets the last_note_update_event of this ExpressionExperimentValueObject.


        :param last_note_update_event: The last_note_update_event of this ExpressionExperimentValueObject.  # noqa: E501
        :type: AuditEventValueObject
        """

        self._last_note_update_event = last_note_update_event

    @property
    def bio_assay_count(self):
        """Gets the bio_assay_count of this ExpressionExperimentValueObject.  # noqa: E501


        :return: The bio_assay_count of this ExpressionExperimentValueObject.  # noqa: E501
        :rtype: int
        """
        return self._bio_assay_count

    @bio_assay_count.setter
    def bio_assay_count(self, bio_assay_count):
        """Sets the bio_assay_count of this ExpressionExperimentValueObject.


        :param bio_assay_count: The bio_assay_count of this ExpressionExperimentValueObject.  # noqa: E501
        :type: int
        """

        self._bio_assay_count = bio_assay_count

    @property
    def description(self):
        """Gets the description of this ExpressionExperimentValueObject.  # noqa: E501


        :return: The description of this ExpressionExperimentValueObject.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ExpressionExperimentValueObject.


        :param description: The description of this ExpressionExperimentValueObject.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this ExpressionExperimentValueObject.  # noqa: E501


        :return: The name of this ExpressionExperimentValueObject.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ExpressionExperimentValueObject.


        :param name: The name of this ExpressionExperimentValueObject.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def accession(self):
        """Gets the accession of this ExpressionExperimentValueObject.  # noqa: E501


        :return: The accession of this ExpressionExperimentValueObject.  # noqa: E501
        :rtype: str
        """
        return self._accession

    @accession.setter
    def accession(self, accession):
        """Sets the accession of this ExpressionExperimentValueObject.


        :param accession: The accession of this ExpressionExperimentValueObject.  # noqa: E501
        :type: str
        """

        self._accession = accession

    @property
    def array_design_count(self):
        """Gets the array_design_count of this ExpressionExperimentValueObject.  # noqa: E501


        :return: The array_design_count of this ExpressionExperimentValueObject.  # noqa: E501
        :rtype: int
        """
        return self._array_design_count

    @array_design_count.setter
    def array_design_count(self, array_design_count):
        """Sets the array_design_count of this ExpressionExperimentValueObject.


        :param array_design_count: The array_design_count of this ExpressionExperimentValueObject.  # noqa: E501
        :type: int
        """

        self._array_design_count = array_design_count

    @property
    def batch_confound(self):
        """Gets the batch_confound of this ExpressionExperimentValueObject.  # noqa: E501


        :return: The batch_confound of this ExpressionExperimentValueObject.  # noqa: E501
        :rtype: str
        """
        return self._batch_confound

    @batch_confound.setter
    def batch_confound(self, batch_confound):
        """Sets the batch_confound of this ExpressionExperimentValueObject.


        :param batch_confound: The batch_confound of this ExpressionExperimentValueObject.  # noqa: E501
        :type: str
        """

        self._batch_confound = batch_confound

    @property
    def batch_effect(self):
        """Gets the batch_effect of this ExpressionExperimentValueObject.  # noqa: E501


        :return: The batch_effect of this ExpressionExperimentValueObject.  # noqa: E501
        :rtype: str
        """
        return self._batch_effect

    @batch_effect.setter
    def batch_effect(self, batch_effect):
        """Sets the batch_effect of this ExpressionExperimentValueObject.


        :param batch_effect: The batch_effect of this ExpressionExperimentValueObject.  # noqa: E501
        :type: str
        """

        self._batch_effect = batch_effect

    @property
    def bio_material_count(self):
        """Gets the bio_material_count of this ExpressionExperimentValueObject.  # noqa: E501


        :return: The bio_material_count of this ExpressionExperimentValueObject.  # noqa: E501
        :rtype: int
        """
        return self._bio_material_count

    @bio_material_count.setter
    def bio_material_count(self, bio_material_count):
        """Sets the bio_material_count of this ExpressionExperimentValueObject.


        :param bio_material_count: The bio_material_count of this ExpressionExperimentValueObject.  # noqa: E501
        :type: int
        """

        self._bio_material_count = bio_material_count

    @property
    def current_user_has_write_permission(self):
        """Gets the current_user_has_write_permission of this ExpressionExperimentValueObject.  # noqa: E501


        :return: The current_user_has_write_permission of this ExpressionExperimentValueObject.  # noqa: E501
        :rtype: bool
        """
        return self._current_user_has_write_permission

    @current_user_has_write_permission.setter
    def current_user_has_write_permission(self, current_user_has_write_permission):
        """Sets the current_user_has_write_permission of this ExpressionExperimentValueObject.


        :param current_user_has_write_permission: The current_user_has_write_permission of this ExpressionExperimentValueObject.  # noqa: E501
        :type: bool
        """

        self._current_user_has_write_permission = current_user_has_write_permission

    @property
    def current_user_is_owner(self):
        """Gets the current_user_is_owner of this ExpressionExperimentValueObject.  # noqa: E501


        :return: The current_user_is_owner of this ExpressionExperimentValueObject.  # noqa: E501
        :rtype: bool
        """
        return self._current_user_is_owner

    @current_user_is_owner.setter
    def current_user_is_owner(self, current_user_is_owner):
        """Sets the current_user_is_owner of this ExpressionExperimentValueObject.


        :param current_user_is_owner: The current_user_is_owner of this ExpressionExperimentValueObject.  # noqa: E501
        :type: bool
        """

        self._current_user_is_owner = current_user_is_owner

    @property
    def experimental_design(self):
        """Gets the experimental_design of this ExpressionExperimentValueObject.  # noqa: E501


        :return: The experimental_design of this ExpressionExperimentValueObject.  # noqa: E501
        :rtype: int
        """
        return self._experimental_design

    @experimental_design.setter
    def experimental_design(self, experimental_design):
        """Sets the experimental_design of this ExpressionExperimentValueObject.


        :param experimental_design: The experimental_design of this ExpressionExperimentValueObject.  # noqa: E501
        :type: int
        """

        self._experimental_design = experimental_design

    @property
    def external_database(self):
        """Gets the external_database of this ExpressionExperimentValueObject.  # noqa: E501


        :return: The external_database of this ExpressionExperimentValueObject.  # noqa: E501
        :rtype: str
        """
        return self._external_database

    @external_database.setter
    def external_database(self, external_database):
        """Sets the external_database of this ExpressionExperimentValueObject.


        :param external_database: The external_database of this ExpressionExperimentValueObject.  # noqa: E501
        :type: str
        """

        self._external_database = external_database

    @property
    def external_uri(self):
        """Gets the external_uri of this ExpressionExperimentValueObject.  # noqa: E501


        :return: The external_uri of this ExpressionExperimentValueObject.  # noqa: E501
        :rtype: str
        """
        return self._external_uri

    @external_uri.setter
    def external_uri(self, external_uri):
        """Sets the external_uri of this ExpressionExperimentValueObject.


        :param external_uri: The external_uri of this ExpressionExperimentValueObject.  # noqa: E501
        :type: str
        """

        self._external_uri = external_uri

    @property
    def geeq(self):
        """Gets the geeq of this ExpressionExperimentValueObject.  # noqa: E501


        :return: The geeq of this ExpressionExperimentValueObject.  # noqa: E501
        :rtype: GeeqValueObject
        """
        return self._geeq

    @geeq.setter
    def geeq(self, geeq):
        """Sets the geeq of this ExpressionExperimentValueObject.


        :param geeq: The geeq of this ExpressionExperimentValueObject.  # noqa: E501
        :type: GeeqValueObject
        """

        self._geeq = geeq

    @property
    def is_public(self):
        """Gets the is_public of this ExpressionExperimentValueObject.  # noqa: E501


        :return: The is_public of this ExpressionExperimentValueObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public):
        """Sets the is_public of this ExpressionExperimentValueObject.


        :param is_public: The is_public of this ExpressionExperimentValueObject.  # noqa: E501
        :type: bool
        """

        self._is_public = is_public

    @property
    def is_shared(self):
        """Gets the is_shared of this ExpressionExperimentValueObject.  # noqa: E501


        :return: The is_shared of this ExpressionExperimentValueObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_shared

    @is_shared.setter
    def is_shared(self, is_shared):
        """Sets the is_shared of this ExpressionExperimentValueObject.


        :param is_shared: The is_shared of this ExpressionExperimentValueObject.  # noqa: E501
        :type: bool
        """

        self._is_shared = is_shared

    @property
    def metadata(self):
        """Gets the metadata of this ExpressionExperimentValueObject.  # noqa: E501


        :return: The metadata of this ExpressionExperimentValueObject.  # noqa: E501
        :rtype: str
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this ExpressionExperimentValueObject.


        :param metadata: The metadata of this ExpressionExperimentValueObject.  # noqa: E501
        :type: str
        """

        self._metadata = metadata

    @property
    def processed_expression_vector_count(self):
        """Gets the processed_expression_vector_count of this ExpressionExperimentValueObject.  # noqa: E501


        :return: The processed_expression_vector_count of this ExpressionExperimentValueObject.  # noqa: E501
        :rtype: int
        """
        return self._processed_expression_vector_count

    @processed_expression_vector_count.setter
    def processed_expression_vector_count(self, processed_expression_vector_count):
        """Sets the processed_expression_vector_count of this ExpressionExperimentValueObject.


        :param processed_expression_vector_count: The processed_expression_vector_count of this ExpressionExperimentValueObject.  # noqa: E501
        :type: int
        """

        self._processed_expression_vector_count = processed_expression_vector_count

    @property
    def short_name(self):
        """Gets the short_name of this ExpressionExperimentValueObject.  # noqa: E501


        :return: The short_name of this ExpressionExperimentValueObject.  # noqa: E501
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """Sets the short_name of this ExpressionExperimentValueObject.


        :param short_name: The short_name of this ExpressionExperimentValueObject.  # noqa: E501
        :type: str
        """

        self._short_name = short_name

    @property
    def source(self):
        """Gets the source of this ExpressionExperimentValueObject.  # noqa: E501


        :return: The source of this ExpressionExperimentValueObject.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ExpressionExperimentValueObject.


        :param source: The source of this ExpressionExperimentValueObject.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def suitable_for_dea(self):
        """Gets the suitable_for_dea of this ExpressionExperimentValueObject.  # noqa: E501


        :return: The suitable_for_dea of this ExpressionExperimentValueObject.  # noqa: E501
        :rtype: bool
        """
        return self._suitable_for_dea

    @suitable_for_dea.setter
    def suitable_for_dea(self, suitable_for_dea):
        """Sets the suitable_for_dea of this ExpressionExperimentValueObject.


        :param suitable_for_dea: The suitable_for_dea of this ExpressionExperimentValueObject.  # noqa: E501
        :type: bool
        """

        self._suitable_for_dea = suitable_for_dea

    @property
    def taxon(self):
        """Gets the taxon of this ExpressionExperimentValueObject.  # noqa: E501


        :return: The taxon of this ExpressionExperimentValueObject.  # noqa: E501
        :rtype: str
        """
        return self._taxon

    @taxon.setter
    def taxon(self, taxon):
        """Sets the taxon of this ExpressionExperimentValueObject.


        :param taxon: The taxon of this ExpressionExperimentValueObject.  # noqa: E501
        :type: str
        """

        self._taxon = taxon

    @property
    def taxon_id(self):
        """Gets the taxon_id of this ExpressionExperimentValueObject.  # noqa: E501


        :return: The taxon_id of this ExpressionExperimentValueObject.  # noqa: E501
        :rtype: int
        """
        return self._taxon_id

    @taxon_id.setter
    def taxon_id(self, taxon_id):
        """Sets the taxon_id of this ExpressionExperimentValueObject.


        :param taxon_id: The taxon_id of this ExpressionExperimentValueObject.  # noqa: E501
        :type: int
        """

        self._taxon_id = taxon_id

    @property
    def technology_type(self):
        """Gets the technology_type of this ExpressionExperimentValueObject.  # noqa: E501


        :return: The technology_type of this ExpressionExperimentValueObject.  # noqa: E501
        :rtype: str
        """
        return self._technology_type

    @technology_type.setter
    def technology_type(self, technology_type):
        """Sets the technology_type of this ExpressionExperimentValueObject.


        :param technology_type: The technology_type of this ExpressionExperimentValueObject.  # noqa: E501
        :type: str
        """

        self._technology_type = technology_type

    @property
    def user_owned(self):
        """Gets the user_owned of this ExpressionExperimentValueObject.  # noqa: E501


        :return: The user_owned of this ExpressionExperimentValueObject.  # noqa: E501
        :rtype: bool
        """
        return self._user_owned

    @user_owned.setter
    def user_owned(self, user_owned):
        """Sets the user_owned of this ExpressionExperimentValueObject.


        :param user_owned: The user_owned of this ExpressionExperimentValueObject.  # noqa: E501
        :type: bool
        """

        self._user_owned = user_owned

    @property
    def user_can_write(self):
        """Gets the user_can_write of this ExpressionExperimentValueObject.  # noqa: E501


        :return: The user_can_write of this ExpressionExperimentValueObject.  # noqa: E501
        :rtype: bool
        """
        return self._user_can_write

    @user_can_write.setter
    def user_can_write(self, user_can_write):
        """Sets the user_can_write of this ExpressionExperimentValueObject.


        :param user_can_write: The user_can_write of this ExpressionExperimentValueObject.  # noqa: E501
        :type: bool
        """

        self._user_can_write = user_can_write

    @property
    def trouble_details(self):
        """Gets the trouble_details of this ExpressionExperimentValueObject.  # noqa: E501


        :return: The trouble_details of this ExpressionExperimentValueObject.  # noqa: E501
        :rtype: str
        """
        return self._trouble_details

    @trouble_details.setter
    def trouble_details(self, trouble_details):
        """Sets the trouble_details of this ExpressionExperimentValueObject.


        :param trouble_details: The trouble_details of this ExpressionExperimentValueObject.  # noqa: E501
        :type: str
        """

        self._trouble_details = trouble_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExpressionExperimentValueObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExpressionExperimentValueObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Gemma RESTful API

    This website documents the usage of the [Gemma REST API](https://gemma.msl.ubc.ca/rest/v2/). Here you can find example script usage of the API, as well as graphical interface for each endpoint, with description of its parameters and the endpoint URL.  The documentation of the underlying java code can be found [here](https://gemma.msl.ubc.ca/resources/apidocs/ubic/gemma/web/services/rest/package-summary.html). See the [links section](https://gemma.msl.ubc.ca/resources/restapidocs/#footer) in the footer of this page for other relevant links.  Use of this webpage and Gemma web services, including the REST API, is subject to [these terms and conditions](https://pavlidislab.github.io/Gemma/terms.html). Please read these in full before continuing to use this webpage or any other part of the Gemma system.   # noqa: E501

    OpenAPI spec version: 2.4.1
    Contact: pavlab-support@msl.ubc.ca
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GeneSetValueObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'description': 'str',
        'gene_ids': 'list[int]',
        'is_public': 'bool',
        'is_shared': 'bool',
        'name': 'str',
        'size': 'int',
        'taxon_id': 'int',
        'taxon_name': 'str',
        'user_owned': 'bool',
        'user_can_write': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'description': 'description',
        'gene_ids': 'geneIds',
        'is_public': 'isPublic',
        'is_shared': 'isShared',
        'name': 'name',
        'size': 'size',
        'taxon_id': 'taxonId',
        'taxon_name': 'taxonName',
        'user_owned': 'userOwned',
        'user_can_write': 'userCanWrite'
    }

    def __init__(self, id=None, description=None, gene_ids=None, is_public=None, is_shared=None, name=None, size=None, taxon_id=None, taxon_name=None, user_owned=None, user_can_write=None):  # noqa: E501
        """GeneSetValueObject - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._description = None
        self._gene_ids = None
        self._is_public = None
        self._is_shared = None
        self._name = None
        self._size = None
        self._taxon_id = None
        self._taxon_name = None
        self._user_owned = None
        self._user_can_write = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if description is not None:
            self.description = description
        if gene_ids is not None:
            self.gene_ids = gene_ids
        if is_public is not None:
            self.is_public = is_public
        if is_shared is not None:
            self.is_shared = is_shared
        if name is not None:
            self.name = name
        if size is not None:
            self.size = size
        if taxon_id is not None:
            self.taxon_id = taxon_id
        if taxon_name is not None:
            self.taxon_name = taxon_name
        if user_owned is not None:
            self.user_owned = user_owned
        if user_can_write is not None:
            self.user_can_write = user_can_write

    @property
    def id(self):
        """Gets the id of this GeneSetValueObject.  # noqa: E501


        :return: The id of this GeneSetValueObject.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GeneSetValueObject.


        :param id: The id of this GeneSetValueObject.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def description(self):
        """Gets the description of this GeneSetValueObject.  # noqa: E501


        :return: The description of this GeneSetValueObject.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GeneSetValueObject.


        :param description: The description of this GeneSetValueObject.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def gene_ids(self):
        """Gets the gene_ids of this GeneSetValueObject.  # noqa: E501


        :return: The gene_ids of this GeneSetValueObject.  # noqa: E501
        :rtype: list[int]
        """
        return self._gene_ids

    @gene_ids.setter
    def gene_ids(self, gene_ids):
        """Sets the gene_ids of this GeneSetValueObject.


        :param gene_ids: The gene_ids of this GeneSetValueObject.  # noqa: E501
        :type: list[int]
        """

        self._gene_ids = gene_ids

    @property
    def is_public(self):
        """Gets the is_public of this GeneSetValueObject.  # noqa: E501


        :return: The is_public of this GeneSetValueObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public):
        """Sets the is_public of this GeneSetValueObject.


        :param is_public: The is_public of this GeneSetValueObject.  # noqa: E501
        :type: bool
        """

        self._is_public = is_public

    @property
    def is_shared(self):
        """Gets the is_shared of this GeneSetValueObject.  # noqa: E501


        :return: The is_shared of this GeneSetValueObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_shared

    @is_shared.setter
    def is_shared(self, is_shared):
        """Sets the is_shared of this GeneSetValueObject.


        :param is_shared: The is_shared of this GeneSetValueObject.  # noqa: E501
        :type: bool
        """

        self._is_shared = is_shared

    @property
    def name(self):
        """Gets the name of this GeneSetValueObject.  # noqa: E501


        :return: The name of this GeneSetValueObject.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GeneSetValueObject.


        :param name: The name of this GeneSetValueObject.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def size(self):
        """Gets the size of this GeneSetValueObject.  # noqa: E501


        :return: The size of this GeneSetValueObject.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this GeneSetValueObject.


        :param size: The size of this GeneSetValueObject.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def taxon_id(self):
        """Gets the taxon_id of this GeneSetValueObject.  # noqa: E501


        :return: The taxon_id of this GeneSetValueObject.  # noqa: E501
        :rtype: int
        """
        return self._taxon_id

    @taxon_id.setter
    def taxon_id(self, taxon_id):
        """Sets the taxon_id of this GeneSetValueObject.


        :param taxon_id: The taxon_id of this GeneSetValueObject.  # noqa: E501
        :type: int
        """

        self._taxon_id = taxon_id

    @property
    def taxon_name(self):
        """Gets the taxon_name of this GeneSetValueObject.  # noqa: E501


        :return: The taxon_name of this GeneSetValueObject.  # noqa: E501
        :rtype: str
        """
        return self._taxon_name

    @taxon_name.setter
    def taxon_name(self, taxon_name):
        """Sets the taxon_name of this GeneSetValueObject.


        :param taxon_name: The taxon_name of this GeneSetValueObject.  # noqa: E501
        :type: str
        """

        self._taxon_name = taxon_name

    @property
    def user_owned(self):
        """Gets the user_owned of this GeneSetValueObject.  # noqa: E501


        :return: The user_owned of this GeneSetValueObject.  # noqa: E501
        :rtype: bool
        """
        return self._user_owned

    @user_owned.setter
    def user_owned(self, user_owned):
        """Sets the user_owned of this GeneSetValueObject.


        :param user_owned: The user_owned of this GeneSetValueObject.  # noqa: E501
        :type: bool
        """

        self._user_owned = user_owned

    @property
    def user_can_write(self):
        """Gets the user_can_write of this GeneSetValueObject.  # noqa: E501


        :return: The user_can_write of this GeneSetValueObject.  # noqa: E501
        :rtype: bool
        """
        return self._user_can_write

    @user_can_write.setter
    def user_can_write(self, user_can_write):
        """Sets the user_can_write of this GeneSetValueObject.


        :param user_can_write: The user_can_write of this GeneSetValueObject.  # noqa: E501
        :type: bool
        """

        self._user_can_write = user_can_write

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GeneSetValueObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GeneSetValueObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

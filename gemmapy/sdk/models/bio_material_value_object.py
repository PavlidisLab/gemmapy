# coding: utf-8

"""
    Gemma RESTful API

    This website documents the usage of the [Gemma REST API](https://gemma.msl.ubc.ca/rest/v2/). Here you can find example script usage of the API, as well as graphical interface for each endpoint, with description of its parameters and the endpoint URL.  The documentation of the underlying java code can be found [here](https://gemma.msl.ubc.ca/resources/apidocs/ubic/gemma/web/services/rest/package-summary.html). See the [links section](https://gemma.msl.ubc.ca/resources/restapidocs/#footer) in the footer of this page for other relevant links.  Use of this webpage and Gemma web services, including the REST API, is subject to [these terms and conditions](https://pavlidislab.github.io/Gemma/terms.html). Please read these in full before continuing to use this webpage or any other part of the Gemma system.   # noqa: E501

    OpenAPI spec version: 2.4.1
    Contact: pavlab-support@msl.ubc.ca
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BioMaterialValueObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'assay_description': 'str',
        'assay_name': 'str',
        'bio_assays': 'list[int]',
        'characteristics': 'list[CharacteristicValueObject]',
        'description': 'str',
        'factor_id_to_factor_value_id': 'dict(str, str)',
        'factors': 'dict(str, str)',
        'factor_value_objects': 'list[IdentifiableValueObject]',
        'factor_values': 'dict(str, str)',
        'name': 'str',
        'assay_processing_date': 'datetime',
        'characteristic_values': 'dict(str, str)'
    }

    attribute_map = {
        'id': 'id',
        'assay_description': 'assayDescription',
        'assay_name': 'assayName',
        'bio_assays': 'bioAssays',
        'characteristics': 'characteristics',
        'description': 'description',
        'factor_id_to_factor_value_id': 'factorIdToFactorValueId',
        'factors': 'factors',
        'factor_value_objects': 'factorValueObjects',
        'factor_values': 'factorValues',
        'name': 'name',
        'assay_processing_date': 'assayProcessingDate',
        'characteristic_values': 'characteristicValues'
    }

    def __init__(self, id=None, assay_description=None, assay_name=None, bio_assays=None, characteristics=None, description=None, factor_id_to_factor_value_id=None, factors=None, factor_value_objects=None, factor_values=None, name=None, assay_processing_date=None, characteristic_values=None):  # noqa: E501
        """BioMaterialValueObject - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._assay_description = None
        self._assay_name = None
        self._bio_assays = None
        self._characteristics = None
        self._description = None
        self._factor_id_to_factor_value_id = None
        self._factors = None
        self._factor_value_objects = None
        self._factor_values = None
        self._name = None
        self._assay_processing_date = None
        self._characteristic_values = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if assay_description is not None:
            self.assay_description = assay_description
        if assay_name is not None:
            self.assay_name = assay_name
        if bio_assays is not None:
            self.bio_assays = bio_assays
        if characteristics is not None:
            self.characteristics = characteristics
        if description is not None:
            self.description = description
        if factor_id_to_factor_value_id is not None:
            self.factor_id_to_factor_value_id = factor_id_to_factor_value_id
        if factors is not None:
            self.factors = factors
        if factor_value_objects is not None:
            self.factor_value_objects = factor_value_objects
        if factor_values is not None:
            self.factor_values = factor_values
        if name is not None:
            self.name = name
        if assay_processing_date is not None:
            self.assay_processing_date = assay_processing_date
        if characteristic_values is not None:
            self.characteristic_values = characteristic_values

    @property
    def id(self):
        """Gets the id of this BioMaterialValueObject.  # noqa: E501


        :return: The id of this BioMaterialValueObject.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BioMaterialValueObject.


        :param id: The id of this BioMaterialValueObject.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def assay_description(self):
        """Gets the assay_description of this BioMaterialValueObject.  # noqa: E501


        :return: The assay_description of this BioMaterialValueObject.  # noqa: E501
        :rtype: str
        """
        return self._assay_description

    @assay_description.setter
    def assay_description(self, assay_description):
        """Sets the assay_description of this BioMaterialValueObject.


        :param assay_description: The assay_description of this BioMaterialValueObject.  # noqa: E501
        :type: str
        """

        self._assay_description = assay_description

    @property
    def assay_name(self):
        """Gets the assay_name of this BioMaterialValueObject.  # noqa: E501


        :return: The assay_name of this BioMaterialValueObject.  # noqa: E501
        :rtype: str
        """
        return self._assay_name

    @assay_name.setter
    def assay_name(self, assay_name):
        """Sets the assay_name of this BioMaterialValueObject.


        :param assay_name: The assay_name of this BioMaterialValueObject.  # noqa: E501
        :type: str
        """

        self._assay_name = assay_name

    @property
    def bio_assays(self):
        """Gets the bio_assays of this BioMaterialValueObject.  # noqa: E501


        :return: The bio_assays of this BioMaterialValueObject.  # noqa: E501
        :rtype: list[int]
        """
        return self._bio_assays

    @bio_assays.setter
    def bio_assays(self, bio_assays):
        """Sets the bio_assays of this BioMaterialValueObject.


        :param bio_assays: The bio_assays of this BioMaterialValueObject.  # noqa: E501
        :type: list[int]
        """

        self._bio_assays = bio_assays

    @property
    def characteristics(self):
        """Gets the characteristics of this BioMaterialValueObject.  # noqa: E501


        :return: The characteristics of this BioMaterialValueObject.  # noqa: E501
        :rtype: list[CharacteristicValueObject]
        """
        return self._characteristics

    @characteristics.setter
    def characteristics(self, characteristics):
        """Sets the characteristics of this BioMaterialValueObject.


        :param characteristics: The characteristics of this BioMaterialValueObject.  # noqa: E501
        :type: list[CharacteristicValueObject]
        """

        self._characteristics = characteristics

    @property
    def description(self):
        """Gets the description of this BioMaterialValueObject.  # noqa: E501


        :return: The description of this BioMaterialValueObject.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BioMaterialValueObject.


        :param description: The description of this BioMaterialValueObject.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def factor_id_to_factor_value_id(self):
        """Gets the factor_id_to_factor_value_id of this BioMaterialValueObject.  # noqa: E501


        :return: The factor_id_to_factor_value_id of this BioMaterialValueObject.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._factor_id_to_factor_value_id

    @factor_id_to_factor_value_id.setter
    def factor_id_to_factor_value_id(self, factor_id_to_factor_value_id):
        """Sets the factor_id_to_factor_value_id of this BioMaterialValueObject.


        :param factor_id_to_factor_value_id: The factor_id_to_factor_value_id of this BioMaterialValueObject.  # noqa: E501
        :type: dict(str, str)
        """

        self._factor_id_to_factor_value_id = factor_id_to_factor_value_id

    @property
    def factors(self):
        """Gets the factors of this BioMaterialValueObject.  # noqa: E501


        :return: The factors of this BioMaterialValueObject.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._factors

    @factors.setter
    def factors(self, factors):
        """Sets the factors of this BioMaterialValueObject.


        :param factors: The factors of this BioMaterialValueObject.  # noqa: E501
        :type: dict(str, str)
        """

        self._factors = factors

    @property
    def factor_value_objects(self):
        """Gets the factor_value_objects of this BioMaterialValueObject.  # noqa: E501


        :return: The factor_value_objects of this BioMaterialValueObject.  # noqa: E501
        :rtype: list[IdentifiableValueObject]
        """
        return self._factor_value_objects

    @factor_value_objects.setter
    def factor_value_objects(self, factor_value_objects):
        """Sets the factor_value_objects of this BioMaterialValueObject.


        :param factor_value_objects: The factor_value_objects of this BioMaterialValueObject.  # noqa: E501
        :type: list[IdentifiableValueObject]
        """

        self._factor_value_objects = factor_value_objects

    @property
    def factor_values(self):
        """Gets the factor_values of this BioMaterialValueObject.  # noqa: E501


        :return: The factor_values of this BioMaterialValueObject.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._factor_values

    @factor_values.setter
    def factor_values(self, factor_values):
        """Sets the factor_values of this BioMaterialValueObject.


        :param factor_values: The factor_values of this BioMaterialValueObject.  # noqa: E501
        :type: dict(str, str)
        """

        self._factor_values = factor_values

    @property
    def name(self):
        """Gets the name of this BioMaterialValueObject.  # noqa: E501


        :return: The name of this BioMaterialValueObject.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BioMaterialValueObject.


        :param name: The name of this BioMaterialValueObject.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def assay_processing_date(self):
        """Gets the assay_processing_date of this BioMaterialValueObject.  # noqa: E501


        :return: The assay_processing_date of this BioMaterialValueObject.  # noqa: E501
        :rtype: datetime
        """
        return self._assay_processing_date

    @assay_processing_date.setter
    def assay_processing_date(self, assay_processing_date):
        """Sets the assay_processing_date of this BioMaterialValueObject.


        :param assay_processing_date: The assay_processing_date of this BioMaterialValueObject.  # noqa: E501
        :type: datetime
        """

        self._assay_processing_date = assay_processing_date

    @property
    def characteristic_values(self):
        """Gets the characteristic_values of this BioMaterialValueObject.  # noqa: E501


        :return: The characteristic_values of this BioMaterialValueObject.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._characteristic_values

    @characteristic_values.setter
    def characteristic_values(self, characteristic_values):
        """Sets the characteristic_values of this BioMaterialValueObject.


        :param characteristic_values: The characteristic_values of this BioMaterialValueObject.  # noqa: E501
        :type: dict(str, str)
        """

        self._characteristic_values = characteristic_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BioMaterialValueObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BioMaterialValueObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

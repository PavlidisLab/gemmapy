# coding: utf-8

"""
    Gemma RESTful API

    This website documents the usage of the [Gemma RESTful API](https://gemma.msl.ubc.ca/rest/v2/). Here you can find example script usage of the API, as well as graphical interface for each endpoint, with description of its parameters and the endpoint URL.  Use of this webpage and the Gemma Web services, including the REST API, is subject to [these terms and conditions](https://pavlidislab.github.io/Gemma/terms.html). Please read these in full before continuing to use this webpage or any other part of the Gemma system.  You can [consult the CHANGELOG.md file](https://gemma.msl.ubc.ca/resources/restapidocs/CHANGELOG.md) to view  release notes and recent changes to the Gemma RESTful API.   # noqa: E501

    OpenAPI spec version: 2.7.4
    Contact: pavlab-support@msl.ubc.ca
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BioMaterialValueObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'description': 'str',
        'bio_assay_ids': 'list[int]',
        'characteristics': 'list[CharacteristicValueObject]',
        'factors': 'dict(str, str)',
        'factor_value_objects': 'list[FactorValueBasicValueObject]',
        'factor_values': 'list[FactorValueBasicValueObject]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'bio_assay_ids': 'bioAssayIds',
        'characteristics': 'characteristics',
        'factors': 'factors',
        'factor_value_objects': 'factorValueObjects',
        'factor_values': 'factorValues'
    }

    def __init__(self, id=None, name=None, description=None, bio_assay_ids=None, characteristics=None, factors=None, factor_value_objects=None, factor_values=None):  # noqa: E501
        """BioMaterialValueObject - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._description = None
        self._bio_assay_ids = None
        self._characteristics = None
        self._factors = None
        self._factor_value_objects = None
        self._factor_values = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if bio_assay_ids is not None:
            self.bio_assay_ids = bio_assay_ids
        if characteristics is not None:
            self.characteristics = characteristics
        if factors is not None:
            self.factors = factors
        if factor_value_objects is not None:
            self.factor_value_objects = factor_value_objects
        if factor_values is not None:
            self.factor_values = factor_values

    @property
    def id(self):
        """Gets the id of this BioMaterialValueObject.  # noqa: E501


        :return: The id of this BioMaterialValueObject.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BioMaterialValueObject.


        :param id: The id of this BioMaterialValueObject.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this BioMaterialValueObject.  # noqa: E501


        :return: The name of this BioMaterialValueObject.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BioMaterialValueObject.


        :param name: The name of this BioMaterialValueObject.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this BioMaterialValueObject.  # noqa: E501


        :return: The description of this BioMaterialValueObject.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BioMaterialValueObject.


        :param description: The description of this BioMaterialValueObject.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def bio_assay_ids(self):
        """Gets the bio_assay_ids of this BioMaterialValueObject.  # noqa: E501


        :return: The bio_assay_ids of this BioMaterialValueObject.  # noqa: E501
        :rtype: list[int]
        """
        return self._bio_assay_ids

    @bio_assay_ids.setter
    def bio_assay_ids(self, bio_assay_ids):
        """Sets the bio_assay_ids of this BioMaterialValueObject.


        :param bio_assay_ids: The bio_assay_ids of this BioMaterialValueObject.  # noqa: E501
        :type: list[int]
        """

        self._bio_assay_ids = bio_assay_ids

    @property
    def characteristics(self):
        """Gets the characteristics of this BioMaterialValueObject.  # noqa: E501


        :return: The characteristics of this BioMaterialValueObject.  # noqa: E501
        :rtype: list[CharacteristicValueObject]
        """
        return self._characteristics

    @characteristics.setter
    def characteristics(self, characteristics):
        """Sets the characteristics of this BioMaterialValueObject.


        :param characteristics: The characteristics of this BioMaterialValueObject.  # noqa: E501
        :type: list[CharacteristicValueObject]
        """

        self._characteristics = characteristics

    @property
    def factors(self):
        """Gets the factors of this BioMaterialValueObject.  # noqa: E501

        This is deprecated, use the `factorValues` collection instead.  # noqa: E501

        :return: The factors of this BioMaterialValueObject.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._factors

    @factors.setter
    def factors(self, factors):
        """Sets the factors of this BioMaterialValueObject.

        This is deprecated, use the `factorValues` collection instead.  # noqa: E501

        :param factors: The factors of this BioMaterialValueObject.  # noqa: E501
        :type: dict(str, str)
        """

        self._factors = factors

    @property
    def factor_value_objects(self):
        """Gets the factor_value_objects of this BioMaterialValueObject.  # noqa: E501

        This property is redundant, use `factorValues` instead.  # noqa: E501

        :return: The factor_value_objects of this BioMaterialValueObject.  # noqa: E501
        :rtype: list[FactorValueBasicValueObject]
        """
        return self._factor_value_objects

    @factor_value_objects.setter
    def factor_value_objects(self, factor_value_objects):
        """Sets the factor_value_objects of this BioMaterialValueObject.

        This property is redundant, use `factorValues` instead.  # noqa: E501

        :param factor_value_objects: The factor_value_objects of this BioMaterialValueObject.  # noqa: E501
        :type: list[FactorValueBasicValueObject]
        """

        self._factor_value_objects = factor_value_objects

    @property
    def factor_values(self):
        """Gets the factor_values of this BioMaterialValueObject.  # noqa: E501


        :return: The factor_values of this BioMaterialValueObject.  # noqa: E501
        :rtype: list[FactorValueBasicValueObject]
        """
        return self._factor_values

    @factor_values.setter
    def factor_values(self, factor_values):
        """Sets the factor_values of this BioMaterialValueObject.


        :param factor_values: The factor_values of this BioMaterialValueObject.  # noqa: E501
        :type: list[FactorValueBasicValueObject]
        """

        self._factor_values = factor_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BioMaterialValueObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BioMaterialValueObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Gemma RESTful API

    This website documents the usage of the [Gemma RESTful API](https://gemma.msl.ubc.ca/rest/v2/). Here you can find example script usage of the API, as well as graphical interface for each endpoint, with description of its parameters and the endpoint URL.  Use of this webpage and the Gemma Web services, including the REST API, is subject to [these terms and conditions](https://pavlidislab.github.io/Gemma/terms.html). Please read these in full before continuing to use this webpage or any other part of the Gemma system.  You can [consult the CHANGELOG.md file](https://gemma.msl.ubc.ca/resources/restapidocs/CHANGELOG.md) to view  release notes and recent changes to the Gemma RESTful API.   # noqa: E501

    OpenAPI spec version: 2.9.0
    Contact: pavlab-support@msl.ubc.ca
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CellTypeAssignmentValueObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'protocol': 'ProtocolValueObject',
        'cell_types': 'list[CharacteristicValueObject]',
        'cell_type_ids': 'list[int]',
        'number_of_assigned_cells': 'int',
        'preferred': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'protocol': 'protocol',
        'cell_types': 'cellTypes',
        'cell_type_ids': 'cellTypeIds',
        'number_of_assigned_cells': 'numberOfAssignedCells',
        'preferred': 'preferred'
    }

    def __init__(self, id=None, name=None, protocol=None, cell_types=None, cell_type_ids=None, number_of_assigned_cells=None, preferred=None):  # noqa: E501
        """CellTypeAssignmentValueObject - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._protocol = None
        self._cell_types = None
        self._cell_type_ids = None
        self._number_of_assigned_cells = None
        self._preferred = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if protocol is not None:
            self.protocol = protocol
        if cell_types is not None:
            self.cell_types = cell_types
        if cell_type_ids is not None:
            self.cell_type_ids = cell_type_ids
        if number_of_assigned_cells is not None:
            self.number_of_assigned_cells = number_of_assigned_cells
        if preferred is not None:
            self.preferred = preferred

    @property
    def id(self):
        """Gets the id of this CellTypeAssignmentValueObject.  # noqa: E501


        :return: The id of this CellTypeAssignmentValueObject.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CellTypeAssignmentValueObject.


        :param id: The id of this CellTypeAssignmentValueObject.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this CellTypeAssignmentValueObject.  # noqa: E501


        :return: The name of this CellTypeAssignmentValueObject.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CellTypeAssignmentValueObject.


        :param name: The name of this CellTypeAssignmentValueObject.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def protocol(self):
        """Gets the protocol of this CellTypeAssignmentValueObject.  # noqa: E501


        :return: The protocol of this CellTypeAssignmentValueObject.  # noqa: E501
        :rtype: ProtocolValueObject
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this CellTypeAssignmentValueObject.


        :param protocol: The protocol of this CellTypeAssignmentValueObject.  # noqa: E501
        :type: ProtocolValueObject
        """

        self._protocol = protocol

    @property
    def cell_types(self):
        """Gets the cell_types of this CellTypeAssignmentValueObject.  # noqa: E501


        :return: The cell_types of this CellTypeAssignmentValueObject.  # noqa: E501
        :rtype: list[CharacteristicValueObject]
        """
        return self._cell_types

    @cell_types.setter
    def cell_types(self, cell_types):
        """Sets the cell_types of this CellTypeAssignmentValueObject.


        :param cell_types: The cell_types of this CellTypeAssignmentValueObject.  # noqa: E501
        :type: list[CharacteristicValueObject]
        """

        self._cell_types = cell_types

    @property
    def cell_type_ids(self):
        """Gets the cell_type_ids of this CellTypeAssignmentValueObject.  # noqa: E501


        :return: The cell_type_ids of this CellTypeAssignmentValueObject.  # noqa: E501
        :rtype: list[int]
        """
        return self._cell_type_ids

    @cell_type_ids.setter
    def cell_type_ids(self, cell_type_ids):
        """Sets the cell_type_ids of this CellTypeAssignmentValueObject.


        :param cell_type_ids: The cell_type_ids of this CellTypeAssignmentValueObject.  # noqa: E501
        :type: list[int]
        """

        self._cell_type_ids = cell_type_ids

    @property
    def number_of_assigned_cells(self):
        """Gets the number_of_assigned_cells of this CellTypeAssignmentValueObject.  # noqa: E501


        :return: The number_of_assigned_cells of this CellTypeAssignmentValueObject.  # noqa: E501
        :rtype: int
        """
        return self._number_of_assigned_cells

    @number_of_assigned_cells.setter
    def number_of_assigned_cells(self, number_of_assigned_cells):
        """Sets the number_of_assigned_cells of this CellTypeAssignmentValueObject.


        :param number_of_assigned_cells: The number_of_assigned_cells of this CellTypeAssignmentValueObject.  # noqa: E501
        :type: int
        """

        self._number_of_assigned_cells = number_of_assigned_cells

    @property
    def preferred(self):
        """Gets the preferred of this CellTypeAssignmentValueObject.  # noqa: E501


        :return: The preferred of this CellTypeAssignmentValueObject.  # noqa: E501
        :rtype: bool
        """
        return self._preferred

    @preferred.setter
    def preferred(self, preferred):
        """Sets the preferred of this CellTypeAssignmentValueObject.


        :param preferred: The preferred of this CellTypeAssignmentValueObject.  # noqa: E501
        :type: bool
        """

        self._preferred = preferred

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CellTypeAssignmentValueObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CellTypeAssignmentValueObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Gemma RESTful API

    This website documents the usage of the [Gemma RESTful API](https://gemma.msl.ubc.ca/rest/v2/). Here you can find example script usage of the API, as well as graphical interface for each endpoint, with description of its parameters and the endpoint URL.  Use of this webpage and the Gemma Web services, including the REST API, is subject to [these terms and conditions](https://pavlidislab.github.io/Gemma/terms.html). Please read these in full before continuing to use this webpage or any other part of the Gemma system.  You can [consult the CHANGELOG.md file](https://gemma.msl.ubc.ca/resources/restapidocs/CHANGELOG.md) to view  release notes and recent changes to the Gemma RESTful API.   # noqa: E501

    OpenAPI spec version: 2.7.4
    Contact: pavlab-support@msl.ubc.ca
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ExpressionExperimentWithSearchResultValueObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'last_updated': 'datetime',
        'troubled': 'bool',
        'last_troubled_event': 'AuditEventValueObject',
        'needs_attention': 'bool',
        'last_needs_attention_event': 'AuditEventValueObject',
        'curation_note': 'str',
        'last_note_update_event': 'AuditEventValueObject',
        'number_of_bio_assays': 'int',
        'description': 'str',
        'name': 'str',
        'accession': 'str',
        'batch_confound': 'str',
        'batch_effect': 'str',
        'batch_effect_statistics': 'str',
        'external_database': 'str',
        'external_database_uri': 'str',
        'external_uri': 'str',
        'geeq': 'GeeqValueObject',
        'metadata': 'str',
        'short_name': 'str',
        'source': 'str',
        'technology_type': 'str',
        'search_result': 'SearchResultValueObjectExpressionExperimentValueObject',
        'taxon_id': 'int',
        'bio_assay_count': 'int',
        'trouble_details': 'str',
        'number_of_array_designs': 'int',
        'number_of_processed_expression_vectors': 'int',
        'taxon': 'TaxonValueObject'
    }

    attribute_map = {
        'id': 'id',
        'last_updated': 'lastUpdated',
        'troubled': 'troubled',
        'last_troubled_event': 'lastTroubledEvent',
        'needs_attention': 'needsAttention',
        'last_needs_attention_event': 'lastNeedsAttentionEvent',
        'curation_note': 'curationNote',
        'last_note_update_event': 'lastNoteUpdateEvent',
        'number_of_bio_assays': 'numberOfBioAssays',
        'description': 'description',
        'name': 'name',
        'accession': 'accession',
        'batch_confound': 'batchConfound',
        'batch_effect': 'batchEffect',
        'batch_effect_statistics': 'batchEffectStatistics',
        'external_database': 'externalDatabase',
        'external_database_uri': 'externalDatabaseUri',
        'external_uri': 'externalUri',
        'geeq': 'geeq',
        'metadata': 'metadata',
        'short_name': 'shortName',
        'source': 'source',
        'technology_type': 'technologyType',
        'search_result': 'searchResult',
        'taxon_id': 'taxonId',
        'bio_assay_count': 'bioAssayCount',
        'trouble_details': 'troubleDetails',
        'number_of_array_designs': 'numberOfArrayDesigns',
        'number_of_processed_expression_vectors': 'numberOfProcessedExpressionVectors',
        'taxon': 'taxon'
    }

    def __init__(self, id=None, last_updated=None, troubled=None, last_troubled_event=None, needs_attention=None, last_needs_attention_event=None, curation_note=None, last_note_update_event=None, number_of_bio_assays=None, description=None, name=None, accession=None, batch_confound=None, batch_effect=None, batch_effect_statistics=None, external_database=None, external_database_uri=None, external_uri=None, geeq=None, metadata=None, short_name=None, source=None, technology_type=None, search_result=None, taxon_id=None, bio_assay_count=None, trouble_details=None, number_of_array_designs=None, number_of_processed_expression_vectors=None, taxon=None):  # noqa: E501
        """ExpressionExperimentWithSearchResultValueObject - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._last_updated = None
        self._troubled = None
        self._last_troubled_event = None
        self._needs_attention = None
        self._last_needs_attention_event = None
        self._curation_note = None
        self._last_note_update_event = None
        self._number_of_bio_assays = None
        self._description = None
        self._name = None
        self._accession = None
        self._batch_confound = None
        self._batch_effect = None
        self._batch_effect_statistics = None
        self._external_database = None
        self._external_database_uri = None
        self._external_uri = None
        self._geeq = None
        self._metadata = None
        self._short_name = None
        self._source = None
        self._technology_type = None
        self._search_result = None
        self._taxon_id = None
        self._bio_assay_count = None
        self._trouble_details = None
        self._number_of_array_designs = None
        self._number_of_processed_expression_vectors = None
        self._taxon = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if last_updated is not None:
            self.last_updated = last_updated
        if troubled is not None:
            self.troubled = troubled
        if last_troubled_event is not None:
            self.last_troubled_event = last_troubled_event
        if needs_attention is not None:
            self.needs_attention = needs_attention
        if last_needs_attention_event is not None:
            self.last_needs_attention_event = last_needs_attention_event
        if curation_note is not None:
            self.curation_note = curation_note
        if last_note_update_event is not None:
            self.last_note_update_event = last_note_update_event
        if number_of_bio_assays is not None:
            self.number_of_bio_assays = number_of_bio_assays
        if description is not None:
            self.description = description
        if name is not None:
            self.name = name
        if accession is not None:
            self.accession = accession
        if batch_confound is not None:
            self.batch_confound = batch_confound
        if batch_effect is not None:
            self.batch_effect = batch_effect
        if batch_effect_statistics is not None:
            self.batch_effect_statistics = batch_effect_statistics
        if external_database is not None:
            self.external_database = external_database
        if external_database_uri is not None:
            self.external_database_uri = external_database_uri
        if external_uri is not None:
            self.external_uri = external_uri
        if geeq is not None:
            self.geeq = geeq
        if metadata is not None:
            self.metadata = metadata
        if short_name is not None:
            self.short_name = short_name
        if source is not None:
            self.source = source
        if technology_type is not None:
            self.technology_type = technology_type
        if search_result is not None:
            self.search_result = search_result
        if taxon_id is not None:
            self.taxon_id = taxon_id
        if bio_assay_count is not None:
            self.bio_assay_count = bio_assay_count
        if trouble_details is not None:
            self.trouble_details = trouble_details
        if number_of_array_designs is not None:
            self.number_of_array_designs = number_of_array_designs
        if number_of_processed_expression_vectors is not None:
            self.number_of_processed_expression_vectors = number_of_processed_expression_vectors
        if taxon is not None:
            self.taxon = taxon

    @property
    def id(self):
        """Gets the id of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501


        :return: The id of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ExpressionExperimentWithSearchResultValueObject.


        :param id: The id of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def last_updated(self):
        """Gets the last_updated of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501


        :return: The last_updated of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this ExpressionExperimentWithSearchResultValueObject.


        :param last_updated: The last_updated of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501
        :type: datetime
        """

        self._last_updated = last_updated

    @property
    def troubled(self):
        """Gets the troubled of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501


        :return: The troubled of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501
        :rtype: bool
        """
        return self._troubled

    @troubled.setter
    def troubled(self, troubled):
        """Sets the troubled of this ExpressionExperimentWithSearchResultValueObject.


        :param troubled: The troubled of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501
        :type: bool
        """

        self._troubled = troubled

    @property
    def last_troubled_event(self):
        """Gets the last_troubled_event of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501


        :return: The last_troubled_event of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501
        :rtype: AuditEventValueObject
        """
        return self._last_troubled_event

    @last_troubled_event.setter
    def last_troubled_event(self, last_troubled_event):
        """Sets the last_troubled_event of this ExpressionExperimentWithSearchResultValueObject.


        :param last_troubled_event: The last_troubled_event of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501
        :type: AuditEventValueObject
        """

        self._last_troubled_event = last_troubled_event

    @property
    def needs_attention(self):
        """Gets the needs_attention of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501


        :return: The needs_attention of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501
        :rtype: bool
        """
        return self._needs_attention

    @needs_attention.setter
    def needs_attention(self, needs_attention):
        """Sets the needs_attention of this ExpressionExperimentWithSearchResultValueObject.


        :param needs_attention: The needs_attention of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501
        :type: bool
        """

        self._needs_attention = needs_attention

    @property
    def last_needs_attention_event(self):
        """Gets the last_needs_attention_event of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501


        :return: The last_needs_attention_event of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501
        :rtype: AuditEventValueObject
        """
        return self._last_needs_attention_event

    @last_needs_attention_event.setter
    def last_needs_attention_event(self, last_needs_attention_event):
        """Sets the last_needs_attention_event of this ExpressionExperimentWithSearchResultValueObject.


        :param last_needs_attention_event: The last_needs_attention_event of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501
        :type: AuditEventValueObject
        """

        self._last_needs_attention_event = last_needs_attention_event

    @property
    def curation_note(self):
        """Gets the curation_note of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501


        :return: The curation_note of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501
        :rtype: str
        """
        return self._curation_note

    @curation_note.setter
    def curation_note(self, curation_note):
        """Sets the curation_note of this ExpressionExperimentWithSearchResultValueObject.


        :param curation_note: The curation_note of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501
        :type: str
        """

        self._curation_note = curation_note

    @property
    def last_note_update_event(self):
        """Gets the last_note_update_event of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501


        :return: The last_note_update_event of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501
        :rtype: AuditEventValueObject
        """
        return self._last_note_update_event

    @last_note_update_event.setter
    def last_note_update_event(self, last_note_update_event):
        """Sets the last_note_update_event of this ExpressionExperimentWithSearchResultValueObject.


        :param last_note_update_event: The last_note_update_event of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501
        :type: AuditEventValueObject
        """

        self._last_note_update_event = last_note_update_event

    @property
    def number_of_bio_assays(self):
        """Gets the number_of_bio_assays of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501


        :return: The number_of_bio_assays of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501
        :rtype: int
        """
        return self._number_of_bio_assays

    @number_of_bio_assays.setter
    def number_of_bio_assays(self, number_of_bio_assays):
        """Sets the number_of_bio_assays of this ExpressionExperimentWithSearchResultValueObject.


        :param number_of_bio_assays: The number_of_bio_assays of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501
        :type: int
        """

        self._number_of_bio_assays = number_of_bio_assays

    @property
    def description(self):
        """Gets the description of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501


        :return: The description of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ExpressionExperimentWithSearchResultValueObject.


        :param description: The description of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501


        :return: The name of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ExpressionExperimentWithSearchResultValueObject.


        :param name: The name of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def accession(self):
        """Gets the accession of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501


        :return: The accession of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501
        :rtype: str
        """
        return self._accession

    @accession.setter
    def accession(self, accession):
        """Sets the accession of this ExpressionExperimentWithSearchResultValueObject.


        :param accession: The accession of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501
        :type: str
        """

        self._accession = accession

    @property
    def batch_confound(self):
        """Gets the batch_confound of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501


        :return: The batch_confound of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501
        :rtype: str
        """
        return self._batch_confound

    @batch_confound.setter
    def batch_confound(self, batch_confound):
        """Sets the batch_confound of this ExpressionExperimentWithSearchResultValueObject.


        :param batch_confound: The batch_confound of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501
        :type: str
        """

        self._batch_confound = batch_confound

    @property
    def batch_effect(self):
        """Gets the batch_effect of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501


        :return: The batch_effect of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501
        :rtype: str
        """
        return self._batch_effect

    @batch_effect.setter
    def batch_effect(self, batch_effect):
        """Sets the batch_effect of this ExpressionExperimentWithSearchResultValueObject.


        :param batch_effect: The batch_effect of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501
        :type: str
        """
        allowed_values = ["NO_BATCH_INFO", "SINGLETON_BATCHES_FAILURE", "UNINFORMATIVE_HEADERS_FAILURE", "PROBLEMATIC_BATCH_INFO_FAILURE", "BATCH_EFFECT_FAILURE", "BATCH_CORRECTED_SUCCESS", "SINGLE_BATCH_SUCCESS", "BATCH_EFFECT_UNDETERMINED_FAILURE", "NO_BATCH_EFFECT_SUCCESS"]  # noqa: E501
        if batch_effect not in allowed_values:
            raise ValueError(
                "Invalid value for `batch_effect` ({0}), must be one of {1}"  # noqa: E501
                .format(batch_effect, allowed_values)
            )

        self._batch_effect = batch_effect

    @property
    def batch_effect_statistics(self):
        """Gets the batch_effect_statistics of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501


        :return: The batch_effect_statistics of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501
        :rtype: str
        """
        return self._batch_effect_statistics

    @batch_effect_statistics.setter
    def batch_effect_statistics(self, batch_effect_statistics):
        """Sets the batch_effect_statistics of this ExpressionExperimentWithSearchResultValueObject.


        :param batch_effect_statistics: The batch_effect_statistics of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501
        :type: str
        """

        self._batch_effect_statistics = batch_effect_statistics

    @property
    def external_database(self):
        """Gets the external_database of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501


        :return: The external_database of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501
        :rtype: str
        """
        return self._external_database

    @external_database.setter
    def external_database(self, external_database):
        """Sets the external_database of this ExpressionExperimentWithSearchResultValueObject.


        :param external_database: The external_database of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501
        :type: str
        """

        self._external_database = external_database

    @property
    def external_database_uri(self):
        """Gets the external_database_uri of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501


        :return: The external_database_uri of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501
        :rtype: str
        """
        return self._external_database_uri

    @external_database_uri.setter
    def external_database_uri(self, external_database_uri):
        """Sets the external_database_uri of this ExpressionExperimentWithSearchResultValueObject.


        :param external_database_uri: The external_database_uri of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501
        :type: str
        """

        self._external_database_uri = external_database_uri

    @property
    def external_uri(self):
        """Gets the external_uri of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501


        :return: The external_uri of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501
        :rtype: str
        """
        return self._external_uri

    @external_uri.setter
    def external_uri(self, external_uri):
        """Sets the external_uri of this ExpressionExperimentWithSearchResultValueObject.


        :param external_uri: The external_uri of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501
        :type: str
        """

        self._external_uri = external_uri

    @property
    def geeq(self):
        """Gets the geeq of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501


        :return: The geeq of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501
        :rtype: GeeqValueObject
        """
        return self._geeq

    @geeq.setter
    def geeq(self, geeq):
        """Sets the geeq of this ExpressionExperimentWithSearchResultValueObject.


        :param geeq: The geeq of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501
        :type: GeeqValueObject
        """

        self._geeq = geeq

    @property
    def metadata(self):
        """Gets the metadata of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501


        :return: The metadata of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501
        :rtype: str
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this ExpressionExperimentWithSearchResultValueObject.


        :param metadata: The metadata of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501
        :type: str
        """

        self._metadata = metadata

    @property
    def short_name(self):
        """Gets the short_name of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501


        :return: The short_name of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """Sets the short_name of this ExpressionExperimentWithSearchResultValueObject.


        :param short_name: The short_name of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501
        :type: str
        """

        self._short_name = short_name

    @property
    def source(self):
        """Gets the source of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501


        :return: The source of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ExpressionExperimentWithSearchResultValueObject.


        :param source: The source of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def technology_type(self):
        """Gets the technology_type of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501


        :return: The technology_type of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501
        :rtype: str
        """
        return self._technology_type

    @technology_type.setter
    def technology_type(self, technology_type):
        """Sets the technology_type of this ExpressionExperimentWithSearchResultValueObject.


        :param technology_type: The technology_type of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501
        :type: str
        """

        self._technology_type = technology_type

    @property
    def search_result(self):
        """Gets the search_result of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501


        :return: The search_result of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501
        :rtype: SearchResultValueObjectExpressionExperimentValueObject
        """
        return self._search_result

    @search_result.setter
    def search_result(self, search_result):
        """Sets the search_result of this ExpressionExperimentWithSearchResultValueObject.


        :param search_result: The search_result of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501
        :type: SearchResultValueObjectExpressionExperimentValueObject
        """

        self._search_result = search_result

    @property
    def taxon_id(self):
        """Gets the taxon_id of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501


        :return: The taxon_id of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501
        :rtype: int
        """
        return self._taxon_id

    @taxon_id.setter
    def taxon_id(self, taxon_id):
        """Sets the taxon_id of this ExpressionExperimentWithSearchResultValueObject.


        :param taxon_id: The taxon_id of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501
        :type: int
        """

        self._taxon_id = taxon_id

    @property
    def bio_assay_count(self):
        """Gets the bio_assay_count of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501


        :return: The bio_assay_count of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501
        :rtype: int
        """
        return self._bio_assay_count

    @bio_assay_count.setter
    def bio_assay_count(self, bio_assay_count):
        """Sets the bio_assay_count of this ExpressionExperimentWithSearchResultValueObject.


        :param bio_assay_count: The bio_assay_count of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501
        :type: int
        """

        self._bio_assay_count = bio_assay_count

    @property
    def trouble_details(self):
        """Gets the trouble_details of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501


        :return: The trouble_details of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501
        :rtype: str
        """
        return self._trouble_details

    @trouble_details.setter
    def trouble_details(self, trouble_details):
        """Sets the trouble_details of this ExpressionExperimentWithSearchResultValueObject.


        :param trouble_details: The trouble_details of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501
        :type: str
        """

        self._trouble_details = trouble_details

    @property
    def number_of_array_designs(self):
        """Gets the number_of_array_designs of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501


        :return: The number_of_array_designs of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501
        :rtype: int
        """
        return self._number_of_array_designs

    @number_of_array_designs.setter
    def number_of_array_designs(self, number_of_array_designs):
        """Sets the number_of_array_designs of this ExpressionExperimentWithSearchResultValueObject.


        :param number_of_array_designs: The number_of_array_designs of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501
        :type: int
        """

        self._number_of_array_designs = number_of_array_designs

    @property
    def number_of_processed_expression_vectors(self):
        """Gets the number_of_processed_expression_vectors of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501


        :return: The number_of_processed_expression_vectors of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501
        :rtype: int
        """
        return self._number_of_processed_expression_vectors

    @number_of_processed_expression_vectors.setter
    def number_of_processed_expression_vectors(self, number_of_processed_expression_vectors):
        """Sets the number_of_processed_expression_vectors of this ExpressionExperimentWithSearchResultValueObject.


        :param number_of_processed_expression_vectors: The number_of_processed_expression_vectors of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501
        :type: int
        """

        self._number_of_processed_expression_vectors = number_of_processed_expression_vectors

    @property
    def taxon(self):
        """Gets the taxon of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501


        :return: The taxon of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501
        :rtype: TaxonValueObject
        """
        return self._taxon

    @taxon.setter
    def taxon(self, taxon):
        """Sets the taxon of this ExpressionExperimentWithSearchResultValueObject.


        :param taxon: The taxon of this ExpressionExperimentWithSearchResultValueObject.  # noqa: E501
        :type: TaxonValueObject
        """

        self._taxon = taxon

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExpressionExperimentWithSearchResultValueObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExpressionExperimentWithSearchResultValueObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Gemma RESTful API

    This website documents the usage of the [Gemma RESTful API](https://gemma.msl.ubc.ca/rest/v2/). Here you can find example script usage of the API, as well as graphical interface for each endpoint, with description of its parameters and the endpoint URL.  Use of this webpage and the Gemma Web services, including the REST API, is subject to [these terms and conditions](https://pavlidislab.github.io/Gemma/terms.html). Please read these in full before continuing to use this webpage or any other part of the Gemma system.  You can [consult the CHANGELOG.md file](https://gemma.msl.ubc.ca/resources/restapidocs/CHANGELOG.md) to view  release notes and recent changes to the Gemma RESTful API.   # noqa: E501

    OpenAPI spec version: 2.7.4
    Contact: pavlab-support@msl.ubc.ca
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ExternalDatabaseValueObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'description': 'str',
        'uri': 'str',
        'release_version': 'str',
        'release_url': 'str',
        'last_updated': 'datetime',
        'external_databases': 'list[ExternalDatabaseValueObject]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'uri': 'uri',
        'release_version': 'releaseVersion',
        'release_url': 'releaseUrl',
        'last_updated': 'lastUpdated',
        'external_databases': 'externalDatabases'
    }

    def __init__(self, id=None, name=None, description=None, uri=None, release_version=None, release_url=None, last_updated=None, external_databases=None):  # noqa: E501
        """ExternalDatabaseValueObject - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._description = None
        self._uri = None
        self._release_version = None
        self._release_url = None
        self._last_updated = None
        self._external_databases = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if uri is not None:
            self.uri = uri
        if release_version is not None:
            self.release_version = release_version
        if release_url is not None:
            self.release_url = release_url
        if last_updated is not None:
            self.last_updated = last_updated
        if external_databases is not None:
            self.external_databases = external_databases

    @property
    def id(self):
        """Gets the id of this ExternalDatabaseValueObject.  # noqa: E501


        :return: The id of this ExternalDatabaseValueObject.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ExternalDatabaseValueObject.


        :param id: The id of this ExternalDatabaseValueObject.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ExternalDatabaseValueObject.  # noqa: E501


        :return: The name of this ExternalDatabaseValueObject.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ExternalDatabaseValueObject.


        :param name: The name of this ExternalDatabaseValueObject.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this ExternalDatabaseValueObject.  # noqa: E501


        :return: The description of this ExternalDatabaseValueObject.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ExternalDatabaseValueObject.


        :param description: The description of this ExternalDatabaseValueObject.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def uri(self):
        """Gets the uri of this ExternalDatabaseValueObject.  # noqa: E501


        :return: The uri of this ExternalDatabaseValueObject.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this ExternalDatabaseValueObject.


        :param uri: The uri of this ExternalDatabaseValueObject.  # noqa: E501
        :type: str
        """

        self._uri = uri

    @property
    def release_version(self):
        """Gets the release_version of this ExternalDatabaseValueObject.  # noqa: E501


        :return: The release_version of this ExternalDatabaseValueObject.  # noqa: E501
        :rtype: str
        """
        return self._release_version

    @release_version.setter
    def release_version(self, release_version):
        """Sets the release_version of this ExternalDatabaseValueObject.


        :param release_version: The release_version of this ExternalDatabaseValueObject.  # noqa: E501
        :type: str
        """

        self._release_version = release_version

    @property
    def release_url(self):
        """Gets the release_url of this ExternalDatabaseValueObject.  # noqa: E501


        :return: The release_url of this ExternalDatabaseValueObject.  # noqa: E501
        :rtype: str
        """
        return self._release_url

    @release_url.setter
    def release_url(self, release_url):
        """Sets the release_url of this ExternalDatabaseValueObject.


        :param release_url: The release_url of this ExternalDatabaseValueObject.  # noqa: E501
        :type: str
        """

        self._release_url = release_url

    @property
    def last_updated(self):
        """Gets the last_updated of this ExternalDatabaseValueObject.  # noqa: E501


        :return: The last_updated of this ExternalDatabaseValueObject.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this ExternalDatabaseValueObject.


        :param last_updated: The last_updated of this ExternalDatabaseValueObject.  # noqa: E501
        :type: datetime
        """

        self._last_updated = last_updated

    @property
    def external_databases(self):
        """Gets the external_databases of this ExternalDatabaseValueObject.  # noqa: E501


        :return: The external_databases of this ExternalDatabaseValueObject.  # noqa: E501
        :rtype: list[ExternalDatabaseValueObject]
        """
        return self._external_databases

    @external_databases.setter
    def external_databases(self, external_databases):
        """Sets the external_databases of this ExternalDatabaseValueObject.


        :param external_databases: The external_databases of this ExternalDatabaseValueObject.  # noqa: E501
        :type: list[ExternalDatabaseValueObject]
        """

        self._external_databases = external_databases

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExternalDatabaseValueObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExternalDatabaseValueObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Gemma RESTful API

    This website documents the usage of the [Gemma REST API](https://gemma.msl.ubc.ca/rest/v2/). Here you can find example script usage of the API, as well as graphical interface for each endpoint, with description of its parameters and the endpoint URL.  The documentation of the underlying java code can be found [here](https://gemma.msl.ubc.ca/resources/apidocs/ubic/gemma/web/services/rest/package-summary.html). See the [links section](https://gemma.msl.ubc.ca/resources/restapidocs/#footer) in the footer of this page for other relevant links.  Use of this webpage and Gemma web services, including the REST API, is subject to [these terms and conditions](https://pavlidislab.github.io/Gemma/terms.html). Please read these in full before continuing to use this webpage or any other part of the Gemma system.   # noqa: E501

    OpenAPI spec version: 2.4.1
    Contact: pavlab-support@msl.ubc.ca
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AnnotationValueObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'class_uri': 'str',
        'class_name': 'str',
        'term_uri': 'str',
        'term_name': 'str',
        'parent_name': 'str',
        'parent_description': 'str',
        'parent_link': 'str',
        'parent_of_parent_name': 'str',
        'parent_of_parent_description': 'str',
        'parent_of_parent_link': 'str',
        'description': 'str',
        'evidence_code': 'str',
        'object_class': 'str'
    }

    attribute_map = {
        'id': 'id',
        'class_uri': 'classUri',
        'class_name': 'className',
        'term_uri': 'termUri',
        'term_name': 'termName',
        'parent_name': 'parentName',
        'parent_description': 'parentDescription',
        'parent_link': 'parentLink',
        'parent_of_parent_name': 'parentOfParentName',
        'parent_of_parent_description': 'parentOfParentDescription',
        'parent_of_parent_link': 'parentOfParentLink',
        'description': 'description',
        'evidence_code': 'evidenceCode',
        'object_class': 'objectClass'
    }

    def __init__(self, id=None, class_uri=None, class_name=None, term_uri=None, term_name=None, parent_name=None, parent_description=None, parent_link=None, parent_of_parent_name=None, parent_of_parent_description=None, parent_of_parent_link=None, description=None, evidence_code=None, object_class=None):  # noqa: E501
        """AnnotationValueObject - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._class_uri = None
        self._class_name = None
        self._term_uri = None
        self._term_name = None
        self._parent_name = None
        self._parent_description = None
        self._parent_link = None
        self._parent_of_parent_name = None
        self._parent_of_parent_description = None
        self._parent_of_parent_link = None
        self._description = None
        self._evidence_code = None
        self._object_class = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if class_uri is not None:
            self.class_uri = class_uri
        if class_name is not None:
            self.class_name = class_name
        if term_uri is not None:
            self.term_uri = term_uri
        if term_name is not None:
            self.term_name = term_name
        if parent_name is not None:
            self.parent_name = parent_name
        if parent_description is not None:
            self.parent_description = parent_description
        if parent_link is not None:
            self.parent_link = parent_link
        if parent_of_parent_name is not None:
            self.parent_of_parent_name = parent_of_parent_name
        if parent_of_parent_description is not None:
            self.parent_of_parent_description = parent_of_parent_description
        if parent_of_parent_link is not None:
            self.parent_of_parent_link = parent_of_parent_link
        if description is not None:
            self.description = description
        if evidence_code is not None:
            self.evidence_code = evidence_code
        if object_class is not None:
            self.object_class = object_class

    @property
    def id(self):
        """Gets the id of this AnnotationValueObject.  # noqa: E501


        :return: The id of this AnnotationValueObject.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AnnotationValueObject.


        :param id: The id of this AnnotationValueObject.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def class_uri(self):
        """Gets the class_uri of this AnnotationValueObject.  # noqa: E501


        :return: The class_uri of this AnnotationValueObject.  # noqa: E501
        :rtype: str
        """
        return self._class_uri

    @class_uri.setter
    def class_uri(self, class_uri):
        """Sets the class_uri of this AnnotationValueObject.


        :param class_uri: The class_uri of this AnnotationValueObject.  # noqa: E501
        :type: str
        """

        self._class_uri = class_uri

    @property
    def class_name(self):
        """Gets the class_name of this AnnotationValueObject.  # noqa: E501


        :return: The class_name of this AnnotationValueObject.  # noqa: E501
        :rtype: str
        """
        return self._class_name

    @class_name.setter
    def class_name(self, class_name):
        """Sets the class_name of this AnnotationValueObject.


        :param class_name: The class_name of this AnnotationValueObject.  # noqa: E501
        :type: str
        """

        self._class_name = class_name

    @property
    def term_uri(self):
        """Gets the term_uri of this AnnotationValueObject.  # noqa: E501


        :return: The term_uri of this AnnotationValueObject.  # noqa: E501
        :rtype: str
        """
        return self._term_uri

    @term_uri.setter
    def term_uri(self, term_uri):
        """Sets the term_uri of this AnnotationValueObject.


        :param term_uri: The term_uri of this AnnotationValueObject.  # noqa: E501
        :type: str
        """

        self._term_uri = term_uri

    @property
    def term_name(self):
        """Gets the term_name of this AnnotationValueObject.  # noqa: E501


        :return: The term_name of this AnnotationValueObject.  # noqa: E501
        :rtype: str
        """
        return self._term_name

    @term_name.setter
    def term_name(self, term_name):
        """Sets the term_name of this AnnotationValueObject.


        :param term_name: The term_name of this AnnotationValueObject.  # noqa: E501
        :type: str
        """

        self._term_name = term_name

    @property
    def parent_name(self):
        """Gets the parent_name of this AnnotationValueObject.  # noqa: E501


        :return: The parent_name of this AnnotationValueObject.  # noqa: E501
        :rtype: str
        """
        return self._parent_name

    @parent_name.setter
    def parent_name(self, parent_name):
        """Sets the parent_name of this AnnotationValueObject.


        :param parent_name: The parent_name of this AnnotationValueObject.  # noqa: E501
        :type: str
        """

        self._parent_name = parent_name

    @property
    def parent_description(self):
        """Gets the parent_description of this AnnotationValueObject.  # noqa: E501


        :return: The parent_description of this AnnotationValueObject.  # noqa: E501
        :rtype: str
        """
        return self._parent_description

    @parent_description.setter
    def parent_description(self, parent_description):
        """Sets the parent_description of this AnnotationValueObject.


        :param parent_description: The parent_description of this AnnotationValueObject.  # noqa: E501
        :type: str
        """

        self._parent_description = parent_description

    @property
    def parent_link(self):
        """Gets the parent_link of this AnnotationValueObject.  # noqa: E501


        :return: The parent_link of this AnnotationValueObject.  # noqa: E501
        :rtype: str
        """
        return self._parent_link

    @parent_link.setter
    def parent_link(self, parent_link):
        """Sets the parent_link of this AnnotationValueObject.


        :param parent_link: The parent_link of this AnnotationValueObject.  # noqa: E501
        :type: str
        """

        self._parent_link = parent_link

    @property
    def parent_of_parent_name(self):
        """Gets the parent_of_parent_name of this AnnotationValueObject.  # noqa: E501


        :return: The parent_of_parent_name of this AnnotationValueObject.  # noqa: E501
        :rtype: str
        """
        return self._parent_of_parent_name

    @parent_of_parent_name.setter
    def parent_of_parent_name(self, parent_of_parent_name):
        """Sets the parent_of_parent_name of this AnnotationValueObject.


        :param parent_of_parent_name: The parent_of_parent_name of this AnnotationValueObject.  # noqa: E501
        :type: str
        """

        self._parent_of_parent_name = parent_of_parent_name

    @property
    def parent_of_parent_description(self):
        """Gets the parent_of_parent_description of this AnnotationValueObject.  # noqa: E501


        :return: The parent_of_parent_description of this AnnotationValueObject.  # noqa: E501
        :rtype: str
        """
        return self._parent_of_parent_description

    @parent_of_parent_description.setter
    def parent_of_parent_description(self, parent_of_parent_description):
        """Sets the parent_of_parent_description of this AnnotationValueObject.


        :param parent_of_parent_description: The parent_of_parent_description of this AnnotationValueObject.  # noqa: E501
        :type: str
        """

        self._parent_of_parent_description = parent_of_parent_description

    @property
    def parent_of_parent_link(self):
        """Gets the parent_of_parent_link of this AnnotationValueObject.  # noqa: E501


        :return: The parent_of_parent_link of this AnnotationValueObject.  # noqa: E501
        :rtype: str
        """
        return self._parent_of_parent_link

    @parent_of_parent_link.setter
    def parent_of_parent_link(self, parent_of_parent_link):
        """Sets the parent_of_parent_link of this AnnotationValueObject.


        :param parent_of_parent_link: The parent_of_parent_link of this AnnotationValueObject.  # noqa: E501
        :type: str
        """

        self._parent_of_parent_link = parent_of_parent_link

    @property
    def description(self):
        """Gets the description of this AnnotationValueObject.  # noqa: E501


        :return: The description of this AnnotationValueObject.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AnnotationValueObject.


        :param description: The description of this AnnotationValueObject.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def evidence_code(self):
        """Gets the evidence_code of this AnnotationValueObject.  # noqa: E501


        :return: The evidence_code of this AnnotationValueObject.  # noqa: E501
        :rtype: str
        """
        return self._evidence_code

    @evidence_code.setter
    def evidence_code(self, evidence_code):
        """Sets the evidence_code of this AnnotationValueObject.


        :param evidence_code: The evidence_code of this AnnotationValueObject.  # noqa: E501
        :type: str
        """

        self._evidence_code = evidence_code

    @property
    def object_class(self):
        """Gets the object_class of this AnnotationValueObject.  # noqa: E501


        :return: The object_class of this AnnotationValueObject.  # noqa: E501
        :rtype: str
        """
        return self._object_class

    @object_class.setter
    def object_class(self, object_class):
        """Sets the object_class of this AnnotationValueObject.


        :param object_class: The object_class of this AnnotationValueObject.  # noqa: E501
        :type: str
        """

        self._object_class = object_class

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnnotationValueObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnnotationValueObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Gemma RESTful API

    This website documents the usage of the [Gemma REST API](https://gemma.msl.ubc.ca/rest/v2/). Here you can find example script usage of the API, as well as graphical interface for each endpoint, with description of its parameters and the endpoint URL.  The documentation of the underlying java code can be found [here](https://gemma.msl.ubc.ca/resources/apidocs/ubic/gemma/web/services/rest/package-summary.html). See the [links section](https://gemma.msl.ubc.ca/resources/restapidocs/#footer) in the footer of this page for other relevant links.  Use of this webpage and Gemma web services, including the REST API, is subject to [these terms and conditions](https://pavlidislab.github.io/Gemma/terms.html). Please read these in full before continuing to use this webpage or any other part of the Gemma system.   # noqa: E501

    OpenAPI spec version: 2.4.1
    Contact: pavlab-support@msl.ubc.ca
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CurationDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'last_updated': 'datetime',
        'last_needs_attention_event': 'AuditEvent',
        'needs_attention': 'bool',
        'last_troubled_event': 'AuditEvent',
        'troubled': 'bool',
        'last_note_update_event': 'AuditEvent',
        'curation_note': 'str'
    }

    attribute_map = {
        'id': 'id',
        'last_updated': 'lastUpdated',
        'last_needs_attention_event': 'lastNeedsAttentionEvent',
        'needs_attention': 'needsAttention',
        'last_troubled_event': 'lastTroubledEvent',
        'troubled': 'troubled',
        'last_note_update_event': 'lastNoteUpdateEvent',
        'curation_note': 'curationNote'
    }

    def __init__(self, id=None, last_updated=None, last_needs_attention_event=None, needs_attention=None, last_troubled_event=None, troubled=None, last_note_update_event=None, curation_note=None):  # noqa: E501
        """CurationDetails - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._last_updated = None
        self._last_needs_attention_event = None
        self._needs_attention = None
        self._last_troubled_event = None
        self._troubled = None
        self._last_note_update_event = None
        self._curation_note = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if last_updated is not None:
            self.last_updated = last_updated
        if last_needs_attention_event is not None:
            self.last_needs_attention_event = last_needs_attention_event
        if needs_attention is not None:
            self.needs_attention = needs_attention
        if last_troubled_event is not None:
            self.last_troubled_event = last_troubled_event
        if troubled is not None:
            self.troubled = troubled
        if last_note_update_event is not None:
            self.last_note_update_event = last_note_update_event
        if curation_note is not None:
            self.curation_note = curation_note

    @property
    def id(self):
        """Gets the id of this CurationDetails.  # noqa: E501


        :return: The id of this CurationDetails.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CurationDetails.


        :param id: The id of this CurationDetails.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def last_updated(self):
        """Gets the last_updated of this CurationDetails.  # noqa: E501


        :return: The last_updated of this CurationDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this CurationDetails.


        :param last_updated: The last_updated of this CurationDetails.  # noqa: E501
        :type: datetime
        """

        self._last_updated = last_updated

    @property
    def last_needs_attention_event(self):
        """Gets the last_needs_attention_event of this CurationDetails.  # noqa: E501


        :return: The last_needs_attention_event of this CurationDetails.  # noqa: E501
        :rtype: AuditEvent
        """
        return self._last_needs_attention_event

    @last_needs_attention_event.setter
    def last_needs_attention_event(self, last_needs_attention_event):
        """Sets the last_needs_attention_event of this CurationDetails.


        :param last_needs_attention_event: The last_needs_attention_event of this CurationDetails.  # noqa: E501
        :type: AuditEvent
        """

        self._last_needs_attention_event = last_needs_attention_event

    @property
    def needs_attention(self):
        """Gets the needs_attention of this CurationDetails.  # noqa: E501


        :return: The needs_attention of this CurationDetails.  # noqa: E501
        :rtype: bool
        """
        return self._needs_attention

    @needs_attention.setter
    def needs_attention(self, needs_attention):
        """Sets the needs_attention of this CurationDetails.


        :param needs_attention: The needs_attention of this CurationDetails.  # noqa: E501
        :type: bool
        """

        self._needs_attention = needs_attention

    @property
    def last_troubled_event(self):
        """Gets the last_troubled_event of this CurationDetails.  # noqa: E501


        :return: The last_troubled_event of this CurationDetails.  # noqa: E501
        :rtype: AuditEvent
        """
        return self._last_troubled_event

    @last_troubled_event.setter
    def last_troubled_event(self, last_troubled_event):
        """Sets the last_troubled_event of this CurationDetails.


        :param last_troubled_event: The last_troubled_event of this CurationDetails.  # noqa: E501
        :type: AuditEvent
        """

        self._last_troubled_event = last_troubled_event

    @property
    def troubled(self):
        """Gets the troubled of this CurationDetails.  # noqa: E501


        :return: The troubled of this CurationDetails.  # noqa: E501
        :rtype: bool
        """
        return self._troubled

    @troubled.setter
    def troubled(self, troubled):
        """Sets the troubled of this CurationDetails.


        :param troubled: The troubled of this CurationDetails.  # noqa: E501
        :type: bool
        """

        self._troubled = troubled

    @property
    def last_note_update_event(self):
        """Gets the last_note_update_event of this CurationDetails.  # noqa: E501


        :return: The last_note_update_event of this CurationDetails.  # noqa: E501
        :rtype: AuditEvent
        """
        return self._last_note_update_event

    @last_note_update_event.setter
    def last_note_update_event(self, last_note_update_event):
        """Sets the last_note_update_event of this CurationDetails.


        :param last_note_update_event: The last_note_update_event of this CurationDetails.  # noqa: E501
        :type: AuditEvent
        """

        self._last_note_update_event = last_note_update_event

    @property
    def curation_note(self):
        """Gets the curation_note of this CurationDetails.  # noqa: E501


        :return: The curation_note of this CurationDetails.  # noqa: E501
        :rtype: str
        """
        return self._curation_note

    @curation_note.setter
    def curation_note(self, curation_note):
        """Sets the curation_note of this CurationDetails.


        :param curation_note: The curation_note of this CurationDetails.  # noqa: E501
        :type: str
        """

        self._curation_note = curation_note

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CurationDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CurationDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

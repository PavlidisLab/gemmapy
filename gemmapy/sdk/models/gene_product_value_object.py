# coding: utf-8

"""
    Gemma RESTful API

    This website documents the usage of the [Gemma REST API](https://gemma.msl.ubc.ca/rest/v2/). Here you can find example script usage of the API, as well as graphical interface for each endpoint, with description of its parameters and the endpoint URL.  The documentation of the underlying java code can be found [here](https://gemma.msl.ubc.ca/resources/apidocs/ubic/gemma/web/services/rest/package-summary.html). See the [links section](https://gemma.msl.ubc.ca/resources/restapidocs/#footer) in the footer of this page for other relevant links.  Use of this webpage and Gemma web services, including the REST API, is subject to [these terms and conditions](https://pavlidislab.github.io/Gemma/terms.html). Please read these in full before continuing to use this webpage or any other part of the Gemma system.   # noqa: E501

    OpenAPI spec version: 2.4.1
    Contact: pavlab-support@msl.ubc.ca
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GeneProductValueObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'ncbi_id': 'str',
        'name': 'str',
        'gene_id': 'int',
        'chromosome': 'str',
        'strand': 'str',
        'nucleotide_start': 'int',
        'nucleotide_end': 'int'
    }

    attribute_map = {
        'id': 'id',
        'ncbi_id': 'ncbiId',
        'name': 'name',
        'gene_id': 'geneId',
        'chromosome': 'chromosome',
        'strand': 'strand',
        'nucleotide_start': 'nucleotideStart',
        'nucleotide_end': 'nucleotideEnd'
    }

    def __init__(self, id=None, ncbi_id=None, name=None, gene_id=None, chromosome=None, strand=None, nucleotide_start=None, nucleotide_end=None):  # noqa: E501
        """GeneProductValueObject - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._ncbi_id = None
        self._name = None
        self._gene_id = None
        self._chromosome = None
        self._strand = None
        self._nucleotide_start = None
        self._nucleotide_end = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if ncbi_id is not None:
            self.ncbi_id = ncbi_id
        if name is not None:
            self.name = name
        if gene_id is not None:
            self.gene_id = gene_id
        if chromosome is not None:
            self.chromosome = chromosome
        if strand is not None:
            self.strand = strand
        if nucleotide_start is not None:
            self.nucleotide_start = nucleotide_start
        if nucleotide_end is not None:
            self.nucleotide_end = nucleotide_end

    @property
    def id(self):
        """Gets the id of this GeneProductValueObject.  # noqa: E501


        :return: The id of this GeneProductValueObject.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GeneProductValueObject.


        :param id: The id of this GeneProductValueObject.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def ncbi_id(self):
        """Gets the ncbi_id of this GeneProductValueObject.  # noqa: E501


        :return: The ncbi_id of this GeneProductValueObject.  # noqa: E501
        :rtype: str
        """
        return self._ncbi_id

    @ncbi_id.setter
    def ncbi_id(self, ncbi_id):
        """Sets the ncbi_id of this GeneProductValueObject.


        :param ncbi_id: The ncbi_id of this GeneProductValueObject.  # noqa: E501
        :type: str
        """

        self._ncbi_id = ncbi_id

    @property
    def name(self):
        """Gets the name of this GeneProductValueObject.  # noqa: E501


        :return: The name of this GeneProductValueObject.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GeneProductValueObject.


        :param name: The name of this GeneProductValueObject.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def gene_id(self):
        """Gets the gene_id of this GeneProductValueObject.  # noqa: E501


        :return: The gene_id of this GeneProductValueObject.  # noqa: E501
        :rtype: int
        """
        return self._gene_id

    @gene_id.setter
    def gene_id(self, gene_id):
        """Sets the gene_id of this GeneProductValueObject.


        :param gene_id: The gene_id of this GeneProductValueObject.  # noqa: E501
        :type: int
        """

        self._gene_id = gene_id

    @property
    def chromosome(self):
        """Gets the chromosome of this GeneProductValueObject.  # noqa: E501


        :return: The chromosome of this GeneProductValueObject.  # noqa: E501
        :rtype: str
        """
        return self._chromosome

    @chromosome.setter
    def chromosome(self, chromosome):
        """Sets the chromosome of this GeneProductValueObject.


        :param chromosome: The chromosome of this GeneProductValueObject.  # noqa: E501
        :type: str
        """

        self._chromosome = chromosome

    @property
    def strand(self):
        """Gets the strand of this GeneProductValueObject.  # noqa: E501


        :return: The strand of this GeneProductValueObject.  # noqa: E501
        :rtype: str
        """
        return self._strand

    @strand.setter
    def strand(self, strand):
        """Sets the strand of this GeneProductValueObject.


        :param strand: The strand of this GeneProductValueObject.  # noqa: E501
        :type: str
        """

        self._strand = strand

    @property
    def nucleotide_start(self):
        """Gets the nucleotide_start of this GeneProductValueObject.  # noqa: E501


        :return: The nucleotide_start of this GeneProductValueObject.  # noqa: E501
        :rtype: int
        """
        return self._nucleotide_start

    @nucleotide_start.setter
    def nucleotide_start(self, nucleotide_start):
        """Sets the nucleotide_start of this GeneProductValueObject.


        :param nucleotide_start: The nucleotide_start of this GeneProductValueObject.  # noqa: E501
        :type: int
        """

        self._nucleotide_start = nucleotide_start

    @property
    def nucleotide_end(self):
        """Gets the nucleotide_end of this GeneProductValueObject.  # noqa: E501


        :return: The nucleotide_end of this GeneProductValueObject.  # noqa: E501
        :rtype: int
        """
        return self._nucleotide_end

    @nucleotide_end.setter
    def nucleotide_end(self, nucleotide_end):
        """Sets the nucleotide_end of this GeneProductValueObject.


        :param nucleotide_end: The nucleotide_end of this GeneProductValueObject.  # noqa: E501
        :type: int
        """

        self._nucleotide_end = nucleotide_end

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GeneProductValueObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GeneProductValueObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

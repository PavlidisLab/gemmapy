# coding: utf-8

"""
    Gemma RESTful API

    This website documents the usage of the [Gemma RESTful API](https://gemma.msl.ubc.ca/rest/v2/). Here you can find example script usage of the API, as well as graphical interface for each endpoint, with description of its parameters and the endpoint URL.  Use of this webpage and the Gemma Web services, including the REST API, is subject to [these terms and conditions](https://pavlidislab.github.io/Gemma/terms.html). Please read these in full before continuing to use this webpage or any other part of the Gemma system.  You can [consult the CHANGELOG.md file](https://gemma.msl.ubc.ca/resources/restapidocs/CHANGELOG.md) to view  release notes and recent changes to the Gemma RESTful API.   # noqa: E501

    OpenAPI spec version: 2.9.0
    Contact: pavlab-support@msl.ubc.ca
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CellLevelCharacteristicsValueObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'characteristics': 'list[CharacteristicValueObject]',
        'characteristic_ids': 'list[int]',
        'number_of_assigned_cells': 'int'
    }

    attribute_map = {
        'id': 'id',
        'characteristics': 'characteristics',
        'characteristic_ids': 'characteristicIds',
        'number_of_assigned_cells': 'numberOfAssignedCells'
    }

    def __init__(self, id=None, characteristics=None, characteristic_ids=None, number_of_assigned_cells=None):  # noqa: E501
        """CellLevelCharacteristicsValueObject - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._characteristics = None
        self._characteristic_ids = None
        self._number_of_assigned_cells = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if characteristics is not None:
            self.characteristics = characteristics
        if characteristic_ids is not None:
            self.characteristic_ids = characteristic_ids
        if number_of_assigned_cells is not None:
            self.number_of_assigned_cells = number_of_assigned_cells

    @property
    def id(self):
        """Gets the id of this CellLevelCharacteristicsValueObject.  # noqa: E501


        :return: The id of this CellLevelCharacteristicsValueObject.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CellLevelCharacteristicsValueObject.


        :param id: The id of this CellLevelCharacteristicsValueObject.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def characteristics(self):
        """Gets the characteristics of this CellLevelCharacteristicsValueObject.  # noqa: E501


        :return: The characteristics of this CellLevelCharacteristicsValueObject.  # noqa: E501
        :rtype: list[CharacteristicValueObject]
        """
        return self._characteristics

    @characteristics.setter
    def characteristics(self, characteristics):
        """Sets the characteristics of this CellLevelCharacteristicsValueObject.


        :param characteristics: The characteristics of this CellLevelCharacteristicsValueObject.  # noqa: E501
        :type: list[CharacteristicValueObject]
        """

        self._characteristics = characteristics

    @property
    def characteristic_ids(self):
        """Gets the characteristic_ids of this CellLevelCharacteristicsValueObject.  # noqa: E501


        :return: The characteristic_ids of this CellLevelCharacteristicsValueObject.  # noqa: E501
        :rtype: list[int]
        """
        return self._characteristic_ids

    @characteristic_ids.setter
    def characteristic_ids(self, characteristic_ids):
        """Sets the characteristic_ids of this CellLevelCharacteristicsValueObject.


        :param characteristic_ids: The characteristic_ids of this CellLevelCharacteristicsValueObject.  # noqa: E501
        :type: list[int]
        """

        self._characteristic_ids = characteristic_ids

    @property
    def number_of_assigned_cells(self):
        """Gets the number_of_assigned_cells of this CellLevelCharacteristicsValueObject.  # noqa: E501


        :return: The number_of_assigned_cells of this CellLevelCharacteristicsValueObject.  # noqa: E501
        :rtype: int
        """
        return self._number_of_assigned_cells

    @number_of_assigned_cells.setter
    def number_of_assigned_cells(self, number_of_assigned_cells):
        """Sets the number_of_assigned_cells of this CellLevelCharacteristicsValueObject.


        :param number_of_assigned_cells: The number_of_assigned_cells of this CellLevelCharacteristicsValueObject.  # noqa: E501
        :type: int
        """

        self._number_of_assigned_cells = number_of_assigned_cells

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CellLevelCharacteristicsValueObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CellLevelCharacteristicsValueObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

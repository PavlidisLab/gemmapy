# coding: utf-8

"""
    Gemma RESTful API

    This website documents the usage of the [Gemma RESTful API](https://gemma.msl.ubc.ca/rest/v2/). Here you can find example script usage of the API, as well as graphical interface for each endpoint, with description of its parameters and the endpoint URL.  Use of this webpage and the Gemma Web services, including the REST API, is subject to [these terms and conditions](https://pavlidislab.github.io/Gemma/terms.html). Please read these in full before continuing to use this webpage or any other part of the Gemma system.  You can [consult the CHANGELOG.md file](https://gemma.msl.ubc.ca/resources/restapidocs/CHANGELOG.md) to view  release notes and recent changes to the Gemma RESTful API.   # noqa: E501

    OpenAPI spec version: 2.7.4
    Contact: pavlab-support@msl.ubc.ca
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ExpressionExperimentSetValueObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'description': 'str',
        'expression_experiment_ids': 'list[int]',
        'is_public': 'bool',
        'modifiable': 'bool',
        'name': 'str',
        'size': 'int',
        'num_with_coexpression_analysis': 'int',
        'num_with_differential_expression_analysis': 'int',
        'taxon_id': 'int',
        'taxon_name': 'str',
        'user_can_write': 'bool',
        'user_owned': 'bool',
        'is_shared': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'description': 'description',
        'expression_experiment_ids': 'expressionExperimentIds',
        'is_public': 'isPublic',
        'modifiable': 'modifiable',
        'name': 'name',
        'size': 'size',
        'num_with_coexpression_analysis': 'numWithCoexpressionAnalysis',
        'num_with_differential_expression_analysis': 'numWithDifferentialExpressionAnalysis',
        'taxon_id': 'taxonId',
        'taxon_name': 'taxonName',
        'user_can_write': 'userCanWrite',
        'user_owned': 'userOwned',
        'is_shared': 'isShared'
    }

    def __init__(self, id=None, description=None, expression_experiment_ids=None, is_public=None, modifiable=None, name=None, size=None, num_with_coexpression_analysis=None, num_with_differential_expression_analysis=None, taxon_id=None, taxon_name=None, user_can_write=None, user_owned=None, is_shared=None):  # noqa: E501
        """ExpressionExperimentSetValueObject - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._description = None
        self._expression_experiment_ids = None
        self._is_public = None
        self._modifiable = None
        self._name = None
        self._size = None
        self._num_with_coexpression_analysis = None
        self._num_with_differential_expression_analysis = None
        self._taxon_id = None
        self._taxon_name = None
        self._user_can_write = None
        self._user_owned = None
        self._is_shared = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if description is not None:
            self.description = description
        if expression_experiment_ids is not None:
            self.expression_experiment_ids = expression_experiment_ids
        if is_public is not None:
            self.is_public = is_public
        if modifiable is not None:
            self.modifiable = modifiable
        if name is not None:
            self.name = name
        if size is not None:
            self.size = size
        if num_with_coexpression_analysis is not None:
            self.num_with_coexpression_analysis = num_with_coexpression_analysis
        if num_with_differential_expression_analysis is not None:
            self.num_with_differential_expression_analysis = num_with_differential_expression_analysis
        if taxon_id is not None:
            self.taxon_id = taxon_id
        if taxon_name is not None:
            self.taxon_name = taxon_name
        if user_can_write is not None:
            self.user_can_write = user_can_write
        if user_owned is not None:
            self.user_owned = user_owned
        if is_shared is not None:
            self.is_shared = is_shared

    @property
    def id(self):
        """Gets the id of this ExpressionExperimentSetValueObject.  # noqa: E501


        :return: The id of this ExpressionExperimentSetValueObject.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ExpressionExperimentSetValueObject.


        :param id: The id of this ExpressionExperimentSetValueObject.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def description(self):
        """Gets the description of this ExpressionExperimentSetValueObject.  # noqa: E501


        :return: The description of this ExpressionExperimentSetValueObject.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ExpressionExperimentSetValueObject.


        :param description: The description of this ExpressionExperimentSetValueObject.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def expression_experiment_ids(self):
        """Gets the expression_experiment_ids of this ExpressionExperimentSetValueObject.  # noqa: E501


        :return: The expression_experiment_ids of this ExpressionExperimentSetValueObject.  # noqa: E501
        :rtype: list[int]
        """
        return self._expression_experiment_ids

    @expression_experiment_ids.setter
    def expression_experiment_ids(self, expression_experiment_ids):
        """Sets the expression_experiment_ids of this ExpressionExperimentSetValueObject.


        :param expression_experiment_ids: The expression_experiment_ids of this ExpressionExperimentSetValueObject.  # noqa: E501
        :type: list[int]
        """

        self._expression_experiment_ids = expression_experiment_ids

    @property
    def is_public(self):
        """Gets the is_public of this ExpressionExperimentSetValueObject.  # noqa: E501


        :return: The is_public of this ExpressionExperimentSetValueObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public):
        """Sets the is_public of this ExpressionExperimentSetValueObject.


        :param is_public: The is_public of this ExpressionExperimentSetValueObject.  # noqa: E501
        :type: bool
        """

        self._is_public = is_public

    @property
    def modifiable(self):
        """Gets the modifiable of this ExpressionExperimentSetValueObject.  # noqa: E501


        :return: The modifiable of this ExpressionExperimentSetValueObject.  # noqa: E501
        :rtype: bool
        """
        return self._modifiable

    @modifiable.setter
    def modifiable(self, modifiable):
        """Sets the modifiable of this ExpressionExperimentSetValueObject.


        :param modifiable: The modifiable of this ExpressionExperimentSetValueObject.  # noqa: E501
        :type: bool
        """

        self._modifiable = modifiable

    @property
    def name(self):
        """Gets the name of this ExpressionExperimentSetValueObject.  # noqa: E501


        :return: The name of this ExpressionExperimentSetValueObject.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ExpressionExperimentSetValueObject.


        :param name: The name of this ExpressionExperimentSetValueObject.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def size(self):
        """Gets the size of this ExpressionExperimentSetValueObject.  # noqa: E501


        :return: The size of this ExpressionExperimentSetValueObject.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this ExpressionExperimentSetValueObject.


        :param size: The size of this ExpressionExperimentSetValueObject.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def num_with_coexpression_analysis(self):
        """Gets the num_with_coexpression_analysis of this ExpressionExperimentSetValueObject.  # noqa: E501


        :return: The num_with_coexpression_analysis of this ExpressionExperimentSetValueObject.  # noqa: E501
        :rtype: int
        """
        return self._num_with_coexpression_analysis

    @num_with_coexpression_analysis.setter
    def num_with_coexpression_analysis(self, num_with_coexpression_analysis):
        """Sets the num_with_coexpression_analysis of this ExpressionExperimentSetValueObject.


        :param num_with_coexpression_analysis: The num_with_coexpression_analysis of this ExpressionExperimentSetValueObject.  # noqa: E501
        :type: int
        """

        self._num_with_coexpression_analysis = num_with_coexpression_analysis

    @property
    def num_with_differential_expression_analysis(self):
        """Gets the num_with_differential_expression_analysis of this ExpressionExperimentSetValueObject.  # noqa: E501


        :return: The num_with_differential_expression_analysis of this ExpressionExperimentSetValueObject.  # noqa: E501
        :rtype: int
        """
        return self._num_with_differential_expression_analysis

    @num_with_differential_expression_analysis.setter
    def num_with_differential_expression_analysis(self, num_with_differential_expression_analysis):
        """Sets the num_with_differential_expression_analysis of this ExpressionExperimentSetValueObject.


        :param num_with_differential_expression_analysis: The num_with_differential_expression_analysis of this ExpressionExperimentSetValueObject.  # noqa: E501
        :type: int
        """

        self._num_with_differential_expression_analysis = num_with_differential_expression_analysis

    @property
    def taxon_id(self):
        """Gets the taxon_id of this ExpressionExperimentSetValueObject.  # noqa: E501


        :return: The taxon_id of this ExpressionExperimentSetValueObject.  # noqa: E501
        :rtype: int
        """
        return self._taxon_id

    @taxon_id.setter
    def taxon_id(self, taxon_id):
        """Sets the taxon_id of this ExpressionExperimentSetValueObject.


        :param taxon_id: The taxon_id of this ExpressionExperimentSetValueObject.  # noqa: E501
        :type: int
        """

        self._taxon_id = taxon_id

    @property
    def taxon_name(self):
        """Gets the taxon_name of this ExpressionExperimentSetValueObject.  # noqa: E501


        :return: The taxon_name of this ExpressionExperimentSetValueObject.  # noqa: E501
        :rtype: str
        """
        return self._taxon_name

    @taxon_name.setter
    def taxon_name(self, taxon_name):
        """Sets the taxon_name of this ExpressionExperimentSetValueObject.


        :param taxon_name: The taxon_name of this ExpressionExperimentSetValueObject.  # noqa: E501
        :type: str
        """

        self._taxon_name = taxon_name

    @property
    def user_can_write(self):
        """Gets the user_can_write of this ExpressionExperimentSetValueObject.  # noqa: E501


        :return: The user_can_write of this ExpressionExperimentSetValueObject.  # noqa: E501
        :rtype: bool
        """
        return self._user_can_write

    @user_can_write.setter
    def user_can_write(self, user_can_write):
        """Sets the user_can_write of this ExpressionExperimentSetValueObject.


        :param user_can_write: The user_can_write of this ExpressionExperimentSetValueObject.  # noqa: E501
        :type: bool
        """

        self._user_can_write = user_can_write

    @property
    def user_owned(self):
        """Gets the user_owned of this ExpressionExperimentSetValueObject.  # noqa: E501


        :return: The user_owned of this ExpressionExperimentSetValueObject.  # noqa: E501
        :rtype: bool
        """
        return self._user_owned

    @user_owned.setter
    def user_owned(self, user_owned):
        """Sets the user_owned of this ExpressionExperimentSetValueObject.


        :param user_owned: The user_owned of this ExpressionExperimentSetValueObject.  # noqa: E501
        :type: bool
        """

        self._user_owned = user_owned

    @property
    def is_shared(self):
        """Gets the is_shared of this ExpressionExperimentSetValueObject.  # noqa: E501


        :return: The is_shared of this ExpressionExperimentSetValueObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_shared

    @is_shared.setter
    def is_shared(self, is_shared):
        """Sets the is_shared of this ExpressionExperimentSetValueObject.


        :param is_shared: The is_shared of this ExpressionExperimentSetValueObject.  # noqa: E501
        :type: bool
        """

        self._is_shared = is_shared

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExpressionExperimentSetValueObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExpressionExperimentSetValueObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

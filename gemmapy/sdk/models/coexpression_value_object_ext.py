# coding: utf-8

"""
    Gemma RESTful API

    This website documents the usage of the [Gemma REST API](https://gemma.msl.ubc.ca/rest/v2/). Here you can find example script usage of the API, as well as graphical interface for each endpoint, with description of its parameters and the endpoint URL.  The documentation of the underlying java code can be found [here](https://gemma.msl.ubc.ca/resources/apidocs/ubic/gemma/web/services/rest/package-summary.html). See the [links section](https://gemma.msl.ubc.ca/resources/restapidocs/#footer) in the footer of this page for other relevant links.  Use of this webpage and Gemma web services, including the REST API, is subject to [these terms and conditions](https://pavlidislab.github.io/Gemma/terms.html). Please read these in full before continuing to use this webpage or any other part of the Gemma system.   # noqa: E501

    OpenAPI spec version: 2.4.1
    Contact: pavlab-support@msl.ubc.ca
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CoexpressionValueObjectExt(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'contains_my_data': 'bool',
        'found_gene': 'GeneValueObject',
        'found_gene_node_degree': 'int',
        'found_gene_node_degree_rank': 'float',
        'neg_supp': 'int',
        'num_tested_in': 'int',
        'pos_supp': 'int',
        'query_gene': 'GeneValueObject',
        'query_gene_node_degree': 'int',
        'query_gene_node_degree_rank': 'float',
        'sort_key': 'str',
        'supporting_experiments': 'list[int]',
        'support': 'int'
    }

    attribute_map = {
        'contains_my_data': 'containsMyData',
        'found_gene': 'foundGene',
        'found_gene_node_degree': 'foundGeneNodeDegree',
        'found_gene_node_degree_rank': 'foundGeneNodeDegreeRank',
        'neg_supp': 'negSupp',
        'num_tested_in': 'numTestedIn',
        'pos_supp': 'posSupp',
        'query_gene': 'queryGene',
        'query_gene_node_degree': 'queryGeneNodeDegree',
        'query_gene_node_degree_rank': 'queryGeneNodeDegreeRank',
        'sort_key': 'sortKey',
        'supporting_experiments': 'supportingExperiments',
        'support': 'support'
    }

    def __init__(self, contains_my_data=None, found_gene=None, found_gene_node_degree=None, found_gene_node_degree_rank=None, neg_supp=None, num_tested_in=None, pos_supp=None, query_gene=None, query_gene_node_degree=None, query_gene_node_degree_rank=None, sort_key=None, supporting_experiments=None, support=None):  # noqa: E501
        """CoexpressionValueObjectExt - a model defined in Swagger"""  # noqa: E501
        self._contains_my_data = None
        self._found_gene = None
        self._found_gene_node_degree = None
        self._found_gene_node_degree_rank = None
        self._neg_supp = None
        self._num_tested_in = None
        self._pos_supp = None
        self._query_gene = None
        self._query_gene_node_degree = None
        self._query_gene_node_degree_rank = None
        self._sort_key = None
        self._supporting_experiments = None
        self._support = None
        self.discriminator = None
        if contains_my_data is not None:
            self.contains_my_data = contains_my_data
        if found_gene is not None:
            self.found_gene = found_gene
        if found_gene_node_degree is not None:
            self.found_gene_node_degree = found_gene_node_degree
        if found_gene_node_degree_rank is not None:
            self.found_gene_node_degree_rank = found_gene_node_degree_rank
        if neg_supp is not None:
            self.neg_supp = neg_supp
        if num_tested_in is not None:
            self.num_tested_in = num_tested_in
        if pos_supp is not None:
            self.pos_supp = pos_supp
        if query_gene is not None:
            self.query_gene = query_gene
        if query_gene_node_degree is not None:
            self.query_gene_node_degree = query_gene_node_degree
        if query_gene_node_degree_rank is not None:
            self.query_gene_node_degree_rank = query_gene_node_degree_rank
        if sort_key is not None:
            self.sort_key = sort_key
        if supporting_experiments is not None:
            self.supporting_experiments = supporting_experiments
        if support is not None:
            self.support = support

    @property
    def contains_my_data(self):
        """Gets the contains_my_data of this CoexpressionValueObjectExt.  # noqa: E501


        :return: The contains_my_data of this CoexpressionValueObjectExt.  # noqa: E501
        :rtype: bool
        """
        return self._contains_my_data

    @contains_my_data.setter
    def contains_my_data(self, contains_my_data):
        """Sets the contains_my_data of this CoexpressionValueObjectExt.


        :param contains_my_data: The contains_my_data of this CoexpressionValueObjectExt.  # noqa: E501
        :type: bool
        """

        self._contains_my_data = contains_my_data

    @property
    def found_gene(self):
        """Gets the found_gene of this CoexpressionValueObjectExt.  # noqa: E501


        :return: The found_gene of this CoexpressionValueObjectExt.  # noqa: E501
        :rtype: GeneValueObject
        """
        return self._found_gene

    @found_gene.setter
    def found_gene(self, found_gene):
        """Sets the found_gene of this CoexpressionValueObjectExt.


        :param found_gene: The found_gene of this CoexpressionValueObjectExt.  # noqa: E501
        :type: GeneValueObject
        """

        self._found_gene = found_gene

    @property
    def found_gene_node_degree(self):
        """Gets the found_gene_node_degree of this CoexpressionValueObjectExt.  # noqa: E501


        :return: The found_gene_node_degree of this CoexpressionValueObjectExt.  # noqa: E501
        :rtype: int
        """
        return self._found_gene_node_degree

    @found_gene_node_degree.setter
    def found_gene_node_degree(self, found_gene_node_degree):
        """Sets the found_gene_node_degree of this CoexpressionValueObjectExt.


        :param found_gene_node_degree: The found_gene_node_degree of this CoexpressionValueObjectExt.  # noqa: E501
        :type: int
        """

        self._found_gene_node_degree = found_gene_node_degree

    @property
    def found_gene_node_degree_rank(self):
        """Gets the found_gene_node_degree_rank of this CoexpressionValueObjectExt.  # noqa: E501


        :return: The found_gene_node_degree_rank of this CoexpressionValueObjectExt.  # noqa: E501
        :rtype: float
        """
        return self._found_gene_node_degree_rank

    @found_gene_node_degree_rank.setter
    def found_gene_node_degree_rank(self, found_gene_node_degree_rank):
        """Sets the found_gene_node_degree_rank of this CoexpressionValueObjectExt.


        :param found_gene_node_degree_rank: The found_gene_node_degree_rank of this CoexpressionValueObjectExt.  # noqa: E501
        :type: float
        """

        self._found_gene_node_degree_rank = found_gene_node_degree_rank

    @property
    def neg_supp(self):
        """Gets the neg_supp of this CoexpressionValueObjectExt.  # noqa: E501


        :return: The neg_supp of this CoexpressionValueObjectExt.  # noqa: E501
        :rtype: int
        """
        return self._neg_supp

    @neg_supp.setter
    def neg_supp(self, neg_supp):
        """Sets the neg_supp of this CoexpressionValueObjectExt.


        :param neg_supp: The neg_supp of this CoexpressionValueObjectExt.  # noqa: E501
        :type: int
        """

        self._neg_supp = neg_supp

    @property
    def num_tested_in(self):
        """Gets the num_tested_in of this CoexpressionValueObjectExt.  # noqa: E501


        :return: The num_tested_in of this CoexpressionValueObjectExt.  # noqa: E501
        :rtype: int
        """
        return self._num_tested_in

    @num_tested_in.setter
    def num_tested_in(self, num_tested_in):
        """Sets the num_tested_in of this CoexpressionValueObjectExt.


        :param num_tested_in: The num_tested_in of this CoexpressionValueObjectExt.  # noqa: E501
        :type: int
        """

        self._num_tested_in = num_tested_in

    @property
    def pos_supp(self):
        """Gets the pos_supp of this CoexpressionValueObjectExt.  # noqa: E501


        :return: The pos_supp of this CoexpressionValueObjectExt.  # noqa: E501
        :rtype: int
        """
        return self._pos_supp

    @pos_supp.setter
    def pos_supp(self, pos_supp):
        """Sets the pos_supp of this CoexpressionValueObjectExt.


        :param pos_supp: The pos_supp of this CoexpressionValueObjectExt.  # noqa: E501
        :type: int
        """

        self._pos_supp = pos_supp

    @property
    def query_gene(self):
        """Gets the query_gene of this CoexpressionValueObjectExt.  # noqa: E501


        :return: The query_gene of this CoexpressionValueObjectExt.  # noqa: E501
        :rtype: GeneValueObject
        """
        return self._query_gene

    @query_gene.setter
    def query_gene(self, query_gene):
        """Sets the query_gene of this CoexpressionValueObjectExt.


        :param query_gene: The query_gene of this CoexpressionValueObjectExt.  # noqa: E501
        :type: GeneValueObject
        """

        self._query_gene = query_gene

    @property
    def query_gene_node_degree(self):
        """Gets the query_gene_node_degree of this CoexpressionValueObjectExt.  # noqa: E501


        :return: The query_gene_node_degree of this CoexpressionValueObjectExt.  # noqa: E501
        :rtype: int
        """
        return self._query_gene_node_degree

    @query_gene_node_degree.setter
    def query_gene_node_degree(self, query_gene_node_degree):
        """Sets the query_gene_node_degree of this CoexpressionValueObjectExt.


        :param query_gene_node_degree: The query_gene_node_degree of this CoexpressionValueObjectExt.  # noqa: E501
        :type: int
        """

        self._query_gene_node_degree = query_gene_node_degree

    @property
    def query_gene_node_degree_rank(self):
        """Gets the query_gene_node_degree_rank of this CoexpressionValueObjectExt.  # noqa: E501


        :return: The query_gene_node_degree_rank of this CoexpressionValueObjectExt.  # noqa: E501
        :rtype: float
        """
        return self._query_gene_node_degree_rank

    @query_gene_node_degree_rank.setter
    def query_gene_node_degree_rank(self, query_gene_node_degree_rank):
        """Sets the query_gene_node_degree_rank of this CoexpressionValueObjectExt.


        :param query_gene_node_degree_rank: The query_gene_node_degree_rank of this CoexpressionValueObjectExt.  # noqa: E501
        :type: float
        """

        self._query_gene_node_degree_rank = query_gene_node_degree_rank

    @property
    def sort_key(self):
        """Gets the sort_key of this CoexpressionValueObjectExt.  # noqa: E501


        :return: The sort_key of this CoexpressionValueObjectExt.  # noqa: E501
        :rtype: str
        """
        return self._sort_key

    @sort_key.setter
    def sort_key(self, sort_key):
        """Sets the sort_key of this CoexpressionValueObjectExt.


        :param sort_key: The sort_key of this CoexpressionValueObjectExt.  # noqa: E501
        :type: str
        """

        self._sort_key = sort_key

    @property
    def supporting_experiments(self):
        """Gets the supporting_experiments of this CoexpressionValueObjectExt.  # noqa: E501


        :return: The supporting_experiments of this CoexpressionValueObjectExt.  # noqa: E501
        :rtype: list[int]
        """
        return self._supporting_experiments

    @supporting_experiments.setter
    def supporting_experiments(self, supporting_experiments):
        """Sets the supporting_experiments of this CoexpressionValueObjectExt.


        :param supporting_experiments: The supporting_experiments of this CoexpressionValueObjectExt.  # noqa: E501
        :type: list[int]
        """

        self._supporting_experiments = supporting_experiments

    @property
    def support(self):
        """Gets the support of this CoexpressionValueObjectExt.  # noqa: E501


        :return: The support of this CoexpressionValueObjectExt.  # noqa: E501
        :rtype: int
        """
        return self._support

    @support.setter
    def support(self, support):
        """Sets the support of this CoexpressionValueObjectExt.


        :param support: The support of this CoexpressionValueObjectExt.  # noqa: E501
        :type: int
        """

        self._support = support

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CoexpressionValueObjectExt, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CoexpressionValueObjectExt):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

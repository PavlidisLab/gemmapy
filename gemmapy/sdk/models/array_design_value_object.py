# coding: utf-8

"""
    Gemma RESTful API

    This website documents the usage of the [Gemma REST API](https://gemma.msl.ubc.ca/rest/v2/). Here you can find example script usage of the API, as well as graphical interface for each endpoint, with description of its parameters and the endpoint URL.  The documentation of the underlying java code can be found [here](https://gemma.msl.ubc.ca/resources/apidocs/ubic/gemma/web/services/rest/package-summary.html). See the [links section](https://gemma.msl.ubc.ca/resources/restapidocs/#footer) in the footer of this page for other relevant links.  Use of this webpage and Gemma web services, including the REST API, is subject to [these terms and conditions](https://pavlidislab.github.io/Gemma/terms.html). Please read these in full before continuing to use this webpage or any other part of the Gemma system.   # noqa: E501

    OpenAPI spec version: 2.4.1
    Contact: pavlab-support@msl.ubc.ca
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ArrayDesignValueObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'last_updated': 'datetime',
        'troubled': 'bool',
        'last_troubled_event': 'AuditEventValueObject',
        'needs_attention': 'bool',
        'last_needs_attention_event': 'AuditEventValueObject',
        'curation_note': 'str',
        'last_note_update_event': 'AuditEventValueObject',
        'black_listed': 'bool',
        'color': 'str',
        'date_cached': 'str',
        'description': 'str',
        'design_element_count': 'int',
        'expression_experiment_count': 'int',
        'has_blat_associations': 'bool',
        'has_gene_associations': 'bool',
        'has_sequence_associations': 'bool',
        'is_affymetrix_alt_cdf': 'bool',
        'is_merged': 'bool',
        'is_mergee': 'bool',
        'is_subsumed': 'bool',
        'is_subsumer': 'bool',
        'last_gene_mapping': 'datetime',
        'last_repeat_mask': 'datetime',
        'last_sequence_analysis': 'datetime',
        'last_sequence_update': 'datetime',
        'name': 'str',
        'num_genes': 'str',
        'num_probe_alignments': 'str',
        'num_probe_sequences': 'str',
        'num_probes_to_genes': 'str',
        'short_name': 'str',
        'switched_expression_experiment_count': 'int',
        'taxon': 'str',
        'taxon_id': 'int',
        'technology_type': 'str',
        'trouble_details': 'str'
    }

    attribute_map = {
        'id': 'id',
        'last_updated': 'lastUpdated',
        'troubled': 'troubled',
        'last_troubled_event': 'lastTroubledEvent',
        'needs_attention': 'needsAttention',
        'last_needs_attention_event': 'lastNeedsAttentionEvent',
        'curation_note': 'curationNote',
        'last_note_update_event': 'lastNoteUpdateEvent',
        'black_listed': 'blackListed',
        'color': 'color',
        'date_cached': 'dateCached',
        'description': 'description',
        'design_element_count': 'designElementCount',
        'expression_experiment_count': 'expressionExperimentCount',
        'has_blat_associations': 'hasBlatAssociations',
        'has_gene_associations': 'hasGeneAssociations',
        'has_sequence_associations': 'hasSequenceAssociations',
        'is_affymetrix_alt_cdf': 'isAffymetrixAltCdf',
        'is_merged': 'isMerged',
        'is_mergee': 'isMergee',
        'is_subsumed': 'isSubsumed',
        'is_subsumer': 'isSubsumer',
        'last_gene_mapping': 'lastGeneMapping',
        'last_repeat_mask': 'lastRepeatMask',
        'last_sequence_analysis': 'lastSequenceAnalysis',
        'last_sequence_update': 'lastSequenceUpdate',
        'name': 'name',
        'num_genes': 'numGenes',
        'num_probe_alignments': 'numProbeAlignments',
        'num_probe_sequences': 'numProbeSequences',
        'num_probes_to_genes': 'numProbesToGenes',
        'short_name': 'shortName',
        'switched_expression_experiment_count': 'switchedExpressionExperimentCount',
        'taxon': 'taxon',
        'taxon_id': 'taxonID',
        'technology_type': 'technologyType',
        'trouble_details': 'troubleDetails'
    }

    def __init__(self, id=None, last_updated=None, troubled=None, last_troubled_event=None, needs_attention=None, last_needs_attention_event=None, curation_note=None, last_note_update_event=None, black_listed=None, color=None, date_cached=None, description=None, design_element_count=None, expression_experiment_count=None, has_blat_associations=None, has_gene_associations=None, has_sequence_associations=None, is_affymetrix_alt_cdf=None, is_merged=None, is_mergee=None, is_subsumed=None, is_subsumer=None, last_gene_mapping=None, last_repeat_mask=None, last_sequence_analysis=None, last_sequence_update=None, name=None, num_genes=None, num_probe_alignments=None, num_probe_sequences=None, num_probes_to_genes=None, short_name=None, switched_expression_experiment_count=None, taxon=None, taxon_id=None, technology_type=None, trouble_details=None):  # noqa: E501
        """ArrayDesignValueObject - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._last_updated = None
        self._troubled = None
        self._last_troubled_event = None
        self._needs_attention = None
        self._last_needs_attention_event = None
        self._curation_note = None
        self._last_note_update_event = None
        self._black_listed = None
        self._color = None
        self._date_cached = None
        self._description = None
        self._design_element_count = None
        self._expression_experiment_count = None
        self._has_blat_associations = None
        self._has_gene_associations = None
        self._has_sequence_associations = None
        self._is_affymetrix_alt_cdf = None
        self._is_merged = None
        self._is_mergee = None
        self._is_subsumed = None
        self._is_subsumer = None
        self._last_gene_mapping = None
        self._last_repeat_mask = None
        self._last_sequence_analysis = None
        self._last_sequence_update = None
        self._name = None
        self._num_genes = None
        self._num_probe_alignments = None
        self._num_probe_sequences = None
        self._num_probes_to_genes = None
        self._short_name = None
        self._switched_expression_experiment_count = None
        self._taxon = None
        self._taxon_id = None
        self._technology_type = None
        self._trouble_details = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if last_updated is not None:
            self.last_updated = last_updated
        if troubled is not None:
            self.troubled = troubled
        if last_troubled_event is not None:
            self.last_troubled_event = last_troubled_event
        if needs_attention is not None:
            self.needs_attention = needs_attention
        if last_needs_attention_event is not None:
            self.last_needs_attention_event = last_needs_attention_event
        if curation_note is not None:
            self.curation_note = curation_note
        if last_note_update_event is not None:
            self.last_note_update_event = last_note_update_event
        if black_listed is not None:
            self.black_listed = black_listed
        if color is not None:
            self.color = color
        if date_cached is not None:
            self.date_cached = date_cached
        if description is not None:
            self.description = description
        if design_element_count is not None:
            self.design_element_count = design_element_count
        if expression_experiment_count is not None:
            self.expression_experiment_count = expression_experiment_count
        if has_blat_associations is not None:
            self.has_blat_associations = has_blat_associations
        if has_gene_associations is not None:
            self.has_gene_associations = has_gene_associations
        if has_sequence_associations is not None:
            self.has_sequence_associations = has_sequence_associations
        if is_affymetrix_alt_cdf is not None:
            self.is_affymetrix_alt_cdf = is_affymetrix_alt_cdf
        if is_merged is not None:
            self.is_merged = is_merged
        if is_mergee is not None:
            self.is_mergee = is_mergee
        if is_subsumed is not None:
            self.is_subsumed = is_subsumed
        if is_subsumer is not None:
            self.is_subsumer = is_subsumer
        if last_gene_mapping is not None:
            self.last_gene_mapping = last_gene_mapping
        if last_repeat_mask is not None:
            self.last_repeat_mask = last_repeat_mask
        if last_sequence_analysis is not None:
            self.last_sequence_analysis = last_sequence_analysis
        if last_sequence_update is not None:
            self.last_sequence_update = last_sequence_update
        if name is not None:
            self.name = name
        if num_genes is not None:
            self.num_genes = num_genes
        if num_probe_alignments is not None:
            self.num_probe_alignments = num_probe_alignments
        if num_probe_sequences is not None:
            self.num_probe_sequences = num_probe_sequences
        if num_probes_to_genes is not None:
            self.num_probes_to_genes = num_probes_to_genes
        if short_name is not None:
            self.short_name = short_name
        if switched_expression_experiment_count is not None:
            self.switched_expression_experiment_count = switched_expression_experiment_count
        if taxon is not None:
            self.taxon = taxon
        if taxon_id is not None:
            self.taxon_id = taxon_id
        if technology_type is not None:
            self.technology_type = technology_type
        if trouble_details is not None:
            self.trouble_details = trouble_details

    @property
    def id(self):
        """Gets the id of this ArrayDesignValueObject.  # noqa: E501


        :return: The id of this ArrayDesignValueObject.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ArrayDesignValueObject.


        :param id: The id of this ArrayDesignValueObject.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def last_updated(self):
        """Gets the last_updated of this ArrayDesignValueObject.  # noqa: E501


        :return: The last_updated of this ArrayDesignValueObject.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this ArrayDesignValueObject.


        :param last_updated: The last_updated of this ArrayDesignValueObject.  # noqa: E501
        :type: datetime
        """

        self._last_updated = last_updated

    @property
    def troubled(self):
        """Gets the troubled of this ArrayDesignValueObject.  # noqa: E501


        :return: The troubled of this ArrayDesignValueObject.  # noqa: E501
        :rtype: bool
        """
        return self._troubled

    @troubled.setter
    def troubled(self, troubled):
        """Sets the troubled of this ArrayDesignValueObject.


        :param troubled: The troubled of this ArrayDesignValueObject.  # noqa: E501
        :type: bool
        """

        self._troubled = troubled

    @property
    def last_troubled_event(self):
        """Gets the last_troubled_event of this ArrayDesignValueObject.  # noqa: E501


        :return: The last_troubled_event of this ArrayDesignValueObject.  # noqa: E501
        :rtype: AuditEventValueObject
        """
        return self._last_troubled_event

    @last_troubled_event.setter
    def last_troubled_event(self, last_troubled_event):
        """Sets the last_troubled_event of this ArrayDesignValueObject.


        :param last_troubled_event: The last_troubled_event of this ArrayDesignValueObject.  # noqa: E501
        :type: AuditEventValueObject
        """

        self._last_troubled_event = last_troubled_event

    @property
    def needs_attention(self):
        """Gets the needs_attention of this ArrayDesignValueObject.  # noqa: E501


        :return: The needs_attention of this ArrayDesignValueObject.  # noqa: E501
        :rtype: bool
        """
        return self._needs_attention

    @needs_attention.setter
    def needs_attention(self, needs_attention):
        """Sets the needs_attention of this ArrayDesignValueObject.


        :param needs_attention: The needs_attention of this ArrayDesignValueObject.  # noqa: E501
        :type: bool
        """

        self._needs_attention = needs_attention

    @property
    def last_needs_attention_event(self):
        """Gets the last_needs_attention_event of this ArrayDesignValueObject.  # noqa: E501


        :return: The last_needs_attention_event of this ArrayDesignValueObject.  # noqa: E501
        :rtype: AuditEventValueObject
        """
        return self._last_needs_attention_event

    @last_needs_attention_event.setter
    def last_needs_attention_event(self, last_needs_attention_event):
        """Sets the last_needs_attention_event of this ArrayDesignValueObject.


        :param last_needs_attention_event: The last_needs_attention_event of this ArrayDesignValueObject.  # noqa: E501
        :type: AuditEventValueObject
        """

        self._last_needs_attention_event = last_needs_attention_event

    @property
    def curation_note(self):
        """Gets the curation_note of this ArrayDesignValueObject.  # noqa: E501


        :return: The curation_note of this ArrayDesignValueObject.  # noqa: E501
        :rtype: str
        """
        return self._curation_note

    @curation_note.setter
    def curation_note(self, curation_note):
        """Sets the curation_note of this ArrayDesignValueObject.


        :param curation_note: The curation_note of this ArrayDesignValueObject.  # noqa: E501
        :type: str
        """

        self._curation_note = curation_note

    @property
    def last_note_update_event(self):
        """Gets the last_note_update_event of this ArrayDesignValueObject.  # noqa: E501


        :return: The last_note_update_event of this ArrayDesignValueObject.  # noqa: E501
        :rtype: AuditEventValueObject
        """
        return self._last_note_update_event

    @last_note_update_event.setter
    def last_note_update_event(self, last_note_update_event):
        """Sets the last_note_update_event of this ArrayDesignValueObject.


        :param last_note_update_event: The last_note_update_event of this ArrayDesignValueObject.  # noqa: E501
        :type: AuditEventValueObject
        """

        self._last_note_update_event = last_note_update_event

    @property
    def black_listed(self):
        """Gets the black_listed of this ArrayDesignValueObject.  # noqa: E501


        :return: The black_listed of this ArrayDesignValueObject.  # noqa: E501
        :rtype: bool
        """
        return self._black_listed

    @black_listed.setter
    def black_listed(self, black_listed):
        """Sets the black_listed of this ArrayDesignValueObject.


        :param black_listed: The black_listed of this ArrayDesignValueObject.  # noqa: E501
        :type: bool
        """

        self._black_listed = black_listed

    @property
    def color(self):
        """Gets the color of this ArrayDesignValueObject.  # noqa: E501


        :return: The color of this ArrayDesignValueObject.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this ArrayDesignValueObject.


        :param color: The color of this ArrayDesignValueObject.  # noqa: E501
        :type: str
        """

        self._color = color

    @property
    def date_cached(self):
        """Gets the date_cached of this ArrayDesignValueObject.  # noqa: E501


        :return: The date_cached of this ArrayDesignValueObject.  # noqa: E501
        :rtype: str
        """
        return self._date_cached

    @date_cached.setter
    def date_cached(self, date_cached):
        """Sets the date_cached of this ArrayDesignValueObject.


        :param date_cached: The date_cached of this ArrayDesignValueObject.  # noqa: E501
        :type: str
        """

        self._date_cached = date_cached

    @property
    def description(self):
        """Gets the description of this ArrayDesignValueObject.  # noqa: E501


        :return: The description of this ArrayDesignValueObject.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ArrayDesignValueObject.


        :param description: The description of this ArrayDesignValueObject.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def design_element_count(self):
        """Gets the design_element_count of this ArrayDesignValueObject.  # noqa: E501


        :return: The design_element_count of this ArrayDesignValueObject.  # noqa: E501
        :rtype: int
        """
        return self._design_element_count

    @design_element_count.setter
    def design_element_count(self, design_element_count):
        """Sets the design_element_count of this ArrayDesignValueObject.


        :param design_element_count: The design_element_count of this ArrayDesignValueObject.  # noqa: E501
        :type: int
        """

        self._design_element_count = design_element_count

    @property
    def expression_experiment_count(self):
        """Gets the expression_experiment_count of this ArrayDesignValueObject.  # noqa: E501


        :return: The expression_experiment_count of this ArrayDesignValueObject.  # noqa: E501
        :rtype: int
        """
        return self._expression_experiment_count

    @expression_experiment_count.setter
    def expression_experiment_count(self, expression_experiment_count):
        """Sets the expression_experiment_count of this ArrayDesignValueObject.


        :param expression_experiment_count: The expression_experiment_count of this ArrayDesignValueObject.  # noqa: E501
        :type: int
        """

        self._expression_experiment_count = expression_experiment_count

    @property
    def has_blat_associations(self):
        """Gets the has_blat_associations of this ArrayDesignValueObject.  # noqa: E501


        :return: The has_blat_associations of this ArrayDesignValueObject.  # noqa: E501
        :rtype: bool
        """
        return self._has_blat_associations

    @has_blat_associations.setter
    def has_blat_associations(self, has_blat_associations):
        """Sets the has_blat_associations of this ArrayDesignValueObject.


        :param has_blat_associations: The has_blat_associations of this ArrayDesignValueObject.  # noqa: E501
        :type: bool
        """

        self._has_blat_associations = has_blat_associations

    @property
    def has_gene_associations(self):
        """Gets the has_gene_associations of this ArrayDesignValueObject.  # noqa: E501


        :return: The has_gene_associations of this ArrayDesignValueObject.  # noqa: E501
        :rtype: bool
        """
        return self._has_gene_associations

    @has_gene_associations.setter
    def has_gene_associations(self, has_gene_associations):
        """Sets the has_gene_associations of this ArrayDesignValueObject.


        :param has_gene_associations: The has_gene_associations of this ArrayDesignValueObject.  # noqa: E501
        :type: bool
        """

        self._has_gene_associations = has_gene_associations

    @property
    def has_sequence_associations(self):
        """Gets the has_sequence_associations of this ArrayDesignValueObject.  # noqa: E501


        :return: The has_sequence_associations of this ArrayDesignValueObject.  # noqa: E501
        :rtype: bool
        """
        return self._has_sequence_associations

    @has_sequence_associations.setter
    def has_sequence_associations(self, has_sequence_associations):
        """Sets the has_sequence_associations of this ArrayDesignValueObject.


        :param has_sequence_associations: The has_sequence_associations of this ArrayDesignValueObject.  # noqa: E501
        :type: bool
        """

        self._has_sequence_associations = has_sequence_associations

    @property
    def is_affymetrix_alt_cdf(self):
        """Gets the is_affymetrix_alt_cdf of this ArrayDesignValueObject.  # noqa: E501


        :return: The is_affymetrix_alt_cdf of this ArrayDesignValueObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_affymetrix_alt_cdf

    @is_affymetrix_alt_cdf.setter
    def is_affymetrix_alt_cdf(self, is_affymetrix_alt_cdf):
        """Sets the is_affymetrix_alt_cdf of this ArrayDesignValueObject.


        :param is_affymetrix_alt_cdf: The is_affymetrix_alt_cdf of this ArrayDesignValueObject.  # noqa: E501
        :type: bool
        """

        self._is_affymetrix_alt_cdf = is_affymetrix_alt_cdf

    @property
    def is_merged(self):
        """Gets the is_merged of this ArrayDesignValueObject.  # noqa: E501


        :return: The is_merged of this ArrayDesignValueObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_merged

    @is_merged.setter
    def is_merged(self, is_merged):
        """Sets the is_merged of this ArrayDesignValueObject.


        :param is_merged: The is_merged of this ArrayDesignValueObject.  # noqa: E501
        :type: bool
        """

        self._is_merged = is_merged

    @property
    def is_mergee(self):
        """Gets the is_mergee of this ArrayDesignValueObject.  # noqa: E501


        :return: The is_mergee of this ArrayDesignValueObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_mergee

    @is_mergee.setter
    def is_mergee(self, is_mergee):
        """Sets the is_mergee of this ArrayDesignValueObject.


        :param is_mergee: The is_mergee of this ArrayDesignValueObject.  # noqa: E501
        :type: bool
        """

        self._is_mergee = is_mergee

    @property
    def is_subsumed(self):
        """Gets the is_subsumed of this ArrayDesignValueObject.  # noqa: E501


        :return: The is_subsumed of this ArrayDesignValueObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_subsumed

    @is_subsumed.setter
    def is_subsumed(self, is_subsumed):
        """Sets the is_subsumed of this ArrayDesignValueObject.


        :param is_subsumed: The is_subsumed of this ArrayDesignValueObject.  # noqa: E501
        :type: bool
        """

        self._is_subsumed = is_subsumed

    @property
    def is_subsumer(self):
        """Gets the is_subsumer of this ArrayDesignValueObject.  # noqa: E501


        :return: The is_subsumer of this ArrayDesignValueObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_subsumer

    @is_subsumer.setter
    def is_subsumer(self, is_subsumer):
        """Sets the is_subsumer of this ArrayDesignValueObject.


        :param is_subsumer: The is_subsumer of this ArrayDesignValueObject.  # noqa: E501
        :type: bool
        """

        self._is_subsumer = is_subsumer

    @property
    def last_gene_mapping(self):
        """Gets the last_gene_mapping of this ArrayDesignValueObject.  # noqa: E501


        :return: The last_gene_mapping of this ArrayDesignValueObject.  # noqa: E501
        :rtype: datetime
        """
        return self._last_gene_mapping

    @last_gene_mapping.setter
    def last_gene_mapping(self, last_gene_mapping):
        """Sets the last_gene_mapping of this ArrayDesignValueObject.


        :param last_gene_mapping: The last_gene_mapping of this ArrayDesignValueObject.  # noqa: E501
        :type: datetime
        """

        self._last_gene_mapping = last_gene_mapping

    @property
    def last_repeat_mask(self):
        """Gets the last_repeat_mask of this ArrayDesignValueObject.  # noqa: E501


        :return: The last_repeat_mask of this ArrayDesignValueObject.  # noqa: E501
        :rtype: datetime
        """
        return self._last_repeat_mask

    @last_repeat_mask.setter
    def last_repeat_mask(self, last_repeat_mask):
        """Sets the last_repeat_mask of this ArrayDesignValueObject.


        :param last_repeat_mask: The last_repeat_mask of this ArrayDesignValueObject.  # noqa: E501
        :type: datetime
        """

        self._last_repeat_mask = last_repeat_mask

    @property
    def last_sequence_analysis(self):
        """Gets the last_sequence_analysis of this ArrayDesignValueObject.  # noqa: E501


        :return: The last_sequence_analysis of this ArrayDesignValueObject.  # noqa: E501
        :rtype: datetime
        """
        return self._last_sequence_analysis

    @last_sequence_analysis.setter
    def last_sequence_analysis(self, last_sequence_analysis):
        """Sets the last_sequence_analysis of this ArrayDesignValueObject.


        :param last_sequence_analysis: The last_sequence_analysis of this ArrayDesignValueObject.  # noqa: E501
        :type: datetime
        """

        self._last_sequence_analysis = last_sequence_analysis

    @property
    def last_sequence_update(self):
        """Gets the last_sequence_update of this ArrayDesignValueObject.  # noqa: E501


        :return: The last_sequence_update of this ArrayDesignValueObject.  # noqa: E501
        :rtype: datetime
        """
        return self._last_sequence_update

    @last_sequence_update.setter
    def last_sequence_update(self, last_sequence_update):
        """Sets the last_sequence_update of this ArrayDesignValueObject.


        :param last_sequence_update: The last_sequence_update of this ArrayDesignValueObject.  # noqa: E501
        :type: datetime
        """

        self._last_sequence_update = last_sequence_update

    @property
    def name(self):
        """Gets the name of this ArrayDesignValueObject.  # noqa: E501


        :return: The name of this ArrayDesignValueObject.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ArrayDesignValueObject.


        :param name: The name of this ArrayDesignValueObject.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def num_genes(self):
        """Gets the num_genes of this ArrayDesignValueObject.  # noqa: E501


        :return: The num_genes of this ArrayDesignValueObject.  # noqa: E501
        :rtype: str
        """
        return self._num_genes

    @num_genes.setter
    def num_genes(self, num_genes):
        """Sets the num_genes of this ArrayDesignValueObject.


        :param num_genes: The num_genes of this ArrayDesignValueObject.  # noqa: E501
        :type: str
        """

        self._num_genes = num_genes

    @property
    def num_probe_alignments(self):
        """Gets the num_probe_alignments of this ArrayDesignValueObject.  # noqa: E501


        :return: The num_probe_alignments of this ArrayDesignValueObject.  # noqa: E501
        :rtype: str
        """
        return self._num_probe_alignments

    @num_probe_alignments.setter
    def num_probe_alignments(self, num_probe_alignments):
        """Sets the num_probe_alignments of this ArrayDesignValueObject.


        :param num_probe_alignments: The num_probe_alignments of this ArrayDesignValueObject.  # noqa: E501
        :type: str
        """

        self._num_probe_alignments = num_probe_alignments

    @property
    def num_probe_sequences(self):
        """Gets the num_probe_sequences of this ArrayDesignValueObject.  # noqa: E501


        :return: The num_probe_sequences of this ArrayDesignValueObject.  # noqa: E501
        :rtype: str
        """
        return self._num_probe_sequences

    @num_probe_sequences.setter
    def num_probe_sequences(self, num_probe_sequences):
        """Sets the num_probe_sequences of this ArrayDesignValueObject.


        :param num_probe_sequences: The num_probe_sequences of this ArrayDesignValueObject.  # noqa: E501
        :type: str
        """

        self._num_probe_sequences = num_probe_sequences

    @property
    def num_probes_to_genes(self):
        """Gets the num_probes_to_genes of this ArrayDesignValueObject.  # noqa: E501


        :return: The num_probes_to_genes of this ArrayDesignValueObject.  # noqa: E501
        :rtype: str
        """
        return self._num_probes_to_genes

    @num_probes_to_genes.setter
    def num_probes_to_genes(self, num_probes_to_genes):
        """Sets the num_probes_to_genes of this ArrayDesignValueObject.


        :param num_probes_to_genes: The num_probes_to_genes of this ArrayDesignValueObject.  # noqa: E501
        :type: str
        """

        self._num_probes_to_genes = num_probes_to_genes

    @property
    def short_name(self):
        """Gets the short_name of this ArrayDesignValueObject.  # noqa: E501


        :return: The short_name of this ArrayDesignValueObject.  # noqa: E501
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """Sets the short_name of this ArrayDesignValueObject.


        :param short_name: The short_name of this ArrayDesignValueObject.  # noqa: E501
        :type: str
        """

        self._short_name = short_name

    @property
    def switched_expression_experiment_count(self):
        """Gets the switched_expression_experiment_count of this ArrayDesignValueObject.  # noqa: E501


        :return: The switched_expression_experiment_count of this ArrayDesignValueObject.  # noqa: E501
        :rtype: int
        """
        return self._switched_expression_experiment_count

    @switched_expression_experiment_count.setter
    def switched_expression_experiment_count(self, switched_expression_experiment_count):
        """Sets the switched_expression_experiment_count of this ArrayDesignValueObject.


        :param switched_expression_experiment_count: The switched_expression_experiment_count of this ArrayDesignValueObject.  # noqa: E501
        :type: int
        """

        self._switched_expression_experiment_count = switched_expression_experiment_count

    @property
    def taxon(self):
        """Gets the taxon of this ArrayDesignValueObject.  # noqa: E501


        :return: The taxon of this ArrayDesignValueObject.  # noqa: E501
        :rtype: str
        """
        return self._taxon

    @taxon.setter
    def taxon(self, taxon):
        """Sets the taxon of this ArrayDesignValueObject.


        :param taxon: The taxon of this ArrayDesignValueObject.  # noqa: E501
        :type: str
        """

        self._taxon = taxon

    @property
    def taxon_id(self):
        """Gets the taxon_id of this ArrayDesignValueObject.  # noqa: E501


        :return: The taxon_id of this ArrayDesignValueObject.  # noqa: E501
        :rtype: int
        """
        return self._taxon_id

    @taxon_id.setter
    def taxon_id(self, taxon_id):
        """Sets the taxon_id of this ArrayDesignValueObject.


        :param taxon_id: The taxon_id of this ArrayDesignValueObject.  # noqa: E501
        :type: int
        """

        self._taxon_id = taxon_id

    @property
    def technology_type(self):
        """Gets the technology_type of this ArrayDesignValueObject.  # noqa: E501


        :return: The technology_type of this ArrayDesignValueObject.  # noqa: E501
        :rtype: str
        """
        return self._technology_type

    @technology_type.setter
    def technology_type(self, technology_type):
        """Sets the technology_type of this ArrayDesignValueObject.


        :param technology_type: The technology_type of this ArrayDesignValueObject.  # noqa: E501
        :type: str
        """

        self._technology_type = technology_type

    @property
    def trouble_details(self):
        """Gets the trouble_details of this ArrayDesignValueObject.  # noqa: E501


        :return: The trouble_details of this ArrayDesignValueObject.  # noqa: E501
        :rtype: str
        """
        return self._trouble_details

    @trouble_details.setter
    def trouble_details(self, trouble_details):
        """Sets the trouble_details of this ArrayDesignValueObject.


        :param trouble_details: The trouble_details of this ArrayDesignValueObject.  # noqa: E501
        :type: str
        """

        self._trouble_details = trouble_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ArrayDesignValueObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ArrayDesignValueObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

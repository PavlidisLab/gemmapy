# coding: utf-8

"""
    Gemma RESTful API

    This website documents the usage of the [Gemma REST API](https://gemma.msl.ubc.ca/rest/v2/). Here you can find example script usage of the API, as well as graphical interface for each endpoint, with description of its parameters and the endpoint URL.  The documentation of the underlying java code can be found [here](https://gemma.msl.ubc.ca/resources/apidocs/ubic/gemma/web/services/rest/package-summary.html). See the [links section](https://gemma.msl.ubc.ca/resources/restapidocs/#footer) in the footer of this page for other relevant links.  Use of this webpage and Gemma web services, including the REST API, is subject to [these terms and conditions](https://pavlidislab.github.io/Gemma/terms.html). Please read these in full before continuing to use this webpage or any other part of the Gemma system.   # noqa: E501

    OpenAPI spec version: 2.4.1
    Contact: pavlab-support@msl.ubc.ca
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DoubleMatrixLongInteger(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'col_names': 'list[int]',
        'row_names': 'list[int]',
        'raw_matrix': 'list[list[float]]',
        'row_name_map_iterator': 'object',
        'column_names': 'list[int]'
    }

    attribute_map = {
        'col_names': 'colNames',
        'row_names': 'rowNames',
        'raw_matrix': 'rawMatrix',
        'row_name_map_iterator': 'rowNameMapIterator',
        'column_names': 'columnNames'
    }

    def __init__(self, col_names=None, row_names=None, raw_matrix=None, row_name_map_iterator=None, column_names=None):  # noqa: E501
        """DoubleMatrixLongInteger - a model defined in Swagger"""  # noqa: E501
        self._col_names = None
        self._row_names = None
        self._raw_matrix = None
        self._row_name_map_iterator = None
        self._column_names = None
        self.discriminator = None
        if col_names is not None:
            self.col_names = col_names
        if row_names is not None:
            self.row_names = row_names
        if raw_matrix is not None:
            self.raw_matrix = raw_matrix
        if row_name_map_iterator is not None:
            self.row_name_map_iterator = row_name_map_iterator
        if column_names is not None:
            self.column_names = column_names

    @property
    def col_names(self):
        """Gets the col_names of this DoubleMatrixLongInteger.  # noqa: E501


        :return: The col_names of this DoubleMatrixLongInteger.  # noqa: E501
        :rtype: list[int]
        """
        return self._col_names

    @col_names.setter
    def col_names(self, col_names):
        """Sets the col_names of this DoubleMatrixLongInteger.


        :param col_names: The col_names of this DoubleMatrixLongInteger.  # noqa: E501
        :type: list[int]
        """

        self._col_names = col_names

    @property
    def row_names(self):
        """Gets the row_names of this DoubleMatrixLongInteger.  # noqa: E501


        :return: The row_names of this DoubleMatrixLongInteger.  # noqa: E501
        :rtype: list[int]
        """
        return self._row_names

    @row_names.setter
    def row_names(self, row_names):
        """Sets the row_names of this DoubleMatrixLongInteger.


        :param row_names: The row_names of this DoubleMatrixLongInteger.  # noqa: E501
        :type: list[int]
        """

        self._row_names = row_names

    @property
    def raw_matrix(self):
        """Gets the raw_matrix of this DoubleMatrixLongInteger.  # noqa: E501


        :return: The raw_matrix of this DoubleMatrixLongInteger.  # noqa: E501
        :rtype: list[list[float]]
        """
        return self._raw_matrix

    @raw_matrix.setter
    def raw_matrix(self, raw_matrix):
        """Sets the raw_matrix of this DoubleMatrixLongInteger.


        :param raw_matrix: The raw_matrix of this DoubleMatrixLongInteger.  # noqa: E501
        :type: list[list[float]]
        """

        self._raw_matrix = raw_matrix

    @property
    def row_name_map_iterator(self):
        """Gets the row_name_map_iterator of this DoubleMatrixLongInteger.  # noqa: E501


        :return: The row_name_map_iterator of this DoubleMatrixLongInteger.  # noqa: E501
        :rtype: object
        """
        return self._row_name_map_iterator

    @row_name_map_iterator.setter
    def row_name_map_iterator(self, row_name_map_iterator):
        """Sets the row_name_map_iterator of this DoubleMatrixLongInteger.


        :param row_name_map_iterator: The row_name_map_iterator of this DoubleMatrixLongInteger.  # noqa: E501
        :type: object
        """

        self._row_name_map_iterator = row_name_map_iterator

    @property
    def column_names(self):
        """Gets the column_names of this DoubleMatrixLongInteger.  # noqa: E501


        :return: The column_names of this DoubleMatrixLongInteger.  # noqa: E501
        :rtype: list[int]
        """
        return self._column_names

    @column_names.setter
    def column_names(self, column_names):
        """Sets the column_names of this DoubleMatrixLongInteger.


        :param column_names: The column_names of this DoubleMatrixLongInteger.  # noqa: E501
        :type: list[int]
        """

        self._column_names = column_names

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DoubleMatrixLongInteger, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DoubleMatrixLongInteger):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

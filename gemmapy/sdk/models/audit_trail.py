# coding: utf-8

"""
    Gemma RESTful API

    This website documents the usage of the [Gemma REST API](https://gemma.msl.ubc.ca/rest/v2/). Here you can find example script usage of the API, as well as graphical interface for each endpoint, with description of its parameters and the endpoint URL.  The documentation of the underlying java code can be found [here](https://gemma.msl.ubc.ca/resources/apidocs/ubic/gemma/web/services/rest/package-summary.html). See the [links section](https://gemma.msl.ubc.ca/resources/restapidocs/#footer) in the footer of this page for other relevant links.  Use of this webpage and Gemma web services, including the REST API, is subject to [these terms and conditions](https://pavlidislab.github.io/Gemma/terms.html). Please read these in full before continuing to use this webpage or any other part of the Gemma system.   # noqa: E501

    OpenAPI spec version: 2.4.1
    Contact: pavlab-support@msl.ubc.ca
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AuditTrail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'events': 'list[AuditEvent]',
        'creation_event': 'AuditEvent',
        'last': 'AuditEvent'
    }

    attribute_map = {
        'id': 'id',
        'events': 'events',
        'creation_event': 'creationEvent',
        'last': 'last'
    }

    def __init__(self, id=None, events=None, creation_event=None, last=None):  # noqa: E501
        """AuditTrail - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._events = None
        self._creation_event = None
        self._last = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if events is not None:
            self.events = events
        if creation_event is not None:
            self.creation_event = creation_event
        if last is not None:
            self.last = last

    @property
    def id(self):
        """Gets the id of this AuditTrail.  # noqa: E501


        :return: The id of this AuditTrail.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AuditTrail.


        :param id: The id of this AuditTrail.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def events(self):
        """Gets the events of this AuditTrail.  # noqa: E501


        :return: The events of this AuditTrail.  # noqa: E501
        :rtype: list[AuditEvent]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this AuditTrail.


        :param events: The events of this AuditTrail.  # noqa: E501
        :type: list[AuditEvent]
        """

        self._events = events

    @property
    def creation_event(self):
        """Gets the creation_event of this AuditTrail.  # noqa: E501


        :return: The creation_event of this AuditTrail.  # noqa: E501
        :rtype: AuditEvent
        """
        return self._creation_event

    @creation_event.setter
    def creation_event(self, creation_event):
        """Sets the creation_event of this AuditTrail.


        :param creation_event: The creation_event of this AuditTrail.  # noqa: E501
        :type: AuditEvent
        """

        self._creation_event = creation_event

    @property
    def last(self):
        """Gets the last of this AuditTrail.  # noqa: E501


        :return: The last of this AuditTrail.  # noqa: E501
        :rtype: AuditEvent
        """
        return self._last

    @last.setter
    def last(self, last):
        """Sets the last of this AuditTrail.


        :param last: The last of this AuditTrail.  # noqa: E501
        :type: AuditEvent
        """

        self._last = last

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AuditTrail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuditTrail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

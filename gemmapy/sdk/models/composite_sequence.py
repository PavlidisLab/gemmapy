# coding: utf-8

"""
    Gemma RESTful API

    This website documents the usage of the [Gemma REST API](https://gemma.msl.ubc.ca/rest/v2/). Here you can find example script usage of the API, as well as graphical interface for each endpoint, with description of its parameters and the endpoint URL.  The documentation of the underlying java code can be found [here](https://gemma.msl.ubc.ca/resources/apidocs/ubic/gemma/web/services/rest/package-summary.html). See the [links section](https://gemma.msl.ubc.ca/resources/restapidocs/#footer) in the footer of this page for other relevant links.  Use of this webpage and Gemma web services, including the REST API, is subject to [these terms and conditions](https://pavlidislab.github.io/Gemma/terms.html). Please read these in full before continuing to use this webpage or any other part of the Gemma system.   # noqa: E501

    OpenAPI spec version: 2.4.1
    Contact: pavlab-support@msl.ubc.ca
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CompositeSequence(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'id': 'int',
        'biological_characteristic': 'BioSequence',
        'array_design': 'ArrayDesign'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'id': 'id',
        'biological_characteristic': 'biologicalCharacteristic',
        'array_design': 'arrayDesign'
    }

    def __init__(self, name=None, description=None, id=None, biological_characteristic=None, array_design=None):  # noqa: E501
        """CompositeSequence - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._description = None
        self._id = None
        self._biological_characteristic = None
        self._array_design = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        if biological_characteristic is not None:
            self.biological_characteristic = biological_characteristic
        if array_design is not None:
            self.array_design = array_design

    @property
    def name(self):
        """Gets the name of this CompositeSequence.  # noqa: E501


        :return: The name of this CompositeSequence.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CompositeSequence.


        :param name: The name of this CompositeSequence.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this CompositeSequence.  # noqa: E501


        :return: The description of this CompositeSequence.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CompositeSequence.


        :param description: The description of this CompositeSequence.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this CompositeSequence.  # noqa: E501


        :return: The id of this CompositeSequence.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CompositeSequence.


        :param id: The id of this CompositeSequence.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def biological_characteristic(self):
        """Gets the biological_characteristic of this CompositeSequence.  # noqa: E501


        :return: The biological_characteristic of this CompositeSequence.  # noqa: E501
        :rtype: BioSequence
        """
        return self._biological_characteristic

    @biological_characteristic.setter
    def biological_characteristic(self, biological_characteristic):
        """Sets the biological_characteristic of this CompositeSequence.


        :param biological_characteristic: The biological_characteristic of this CompositeSequence.  # noqa: E501
        :type: BioSequence
        """

        self._biological_characteristic = biological_characteristic

    @property
    def array_design(self):
        """Gets the array_design of this CompositeSequence.  # noqa: E501


        :return: The array_design of this CompositeSequence.  # noqa: E501
        :rtype: ArrayDesign
        """
        return self._array_design

    @array_design.setter
    def array_design(self, array_design):
        """Sets the array_design of this CompositeSequence.


        :param array_design: The array_design of this CompositeSequence.  # noqa: E501
        :type: ArrayDesign
        """

        self._array_design = array_design

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CompositeSequence, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CompositeSequence):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Gemma RESTful API

    This website documents the usage of the [Gemma REST API](https://gemma.msl.ubc.ca/rest/v2/). Here you can find example script usage of the API, as well as graphical interface for each endpoint, with description of its parameters and the endpoint URL.  The documentation of the underlying java code can be found [here](https://gemma.msl.ubc.ca/resources/apidocs/ubic/gemma/web/services/rest/package-summary.html). See the [links section](https://gemma.msl.ubc.ca/resources/restapidocs/#footer) in the footer of this page for other relevant links.  Use of this webpage and Gemma web services, including the REST API, is subject to [these terms and conditions](https://pavlidislab.github.io/Gemma/terms.html). Please read these in full before continuing to use this webpage or any other part of the Gemma system.   # noqa: E501

    OpenAPI spec version: 2.4.1
    Contact: pavlab-support@msl.ubc.ca
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BibliographicReference(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'id': 'int',
        'author_list': 'str',
        'title': 'str',
        'publisher': 'str',
        'editor': 'str',
        'volume': 'str',
        'issue': 'str',
        'pages': 'str',
        'publication': 'str',
        'full_text_uri': 'str',
        'abstract_text': 'str',
        'citation': 'str',
        'publication_date': 'datetime',
        'annotated_abstract': 'str',
        'pub_accession': 'DatabaseEntry',
        'retracted': 'bool',
        'annotations': 'list[Characteristic]',
        'mesh_terms': 'list[MedicalSubjectHeading]',
        'keywords': 'list[Keyword]',
        'chemicals': 'list[Compound]'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'id': 'id',
        'author_list': 'authorList',
        'title': 'title',
        'publisher': 'publisher',
        'editor': 'editor',
        'volume': 'volume',
        'issue': 'issue',
        'pages': 'pages',
        'publication': 'publication',
        'full_text_uri': 'fullTextUri',
        'abstract_text': 'abstractText',
        'citation': 'citation',
        'publication_date': 'publicationDate',
        'annotated_abstract': 'annotatedAbstract',
        'pub_accession': 'pubAccession',
        'retracted': 'retracted',
        'annotations': 'annotations',
        'mesh_terms': 'meshTerms',
        'keywords': 'keywords',
        'chemicals': 'chemicals'
    }

    def __init__(self, name=None, description=None, id=None, author_list=None, title=None, publisher=None, editor=None, volume=None, issue=None, pages=None, publication=None, full_text_uri=None, abstract_text=None, citation=None, publication_date=None, annotated_abstract=None, pub_accession=None, retracted=None, annotations=None, mesh_terms=None, keywords=None, chemicals=None):  # noqa: E501
        """BibliographicReference - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._description = None
        self._id = None
        self._author_list = None
        self._title = None
        self._publisher = None
        self._editor = None
        self._volume = None
        self._issue = None
        self._pages = None
        self._publication = None
        self._full_text_uri = None
        self._abstract_text = None
        self._citation = None
        self._publication_date = None
        self._annotated_abstract = None
        self._pub_accession = None
        self._retracted = None
        self._annotations = None
        self._mesh_terms = None
        self._keywords = None
        self._chemicals = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        if author_list is not None:
            self.author_list = author_list
        if title is not None:
            self.title = title
        if publisher is not None:
            self.publisher = publisher
        if editor is not None:
            self.editor = editor
        if volume is not None:
            self.volume = volume
        if issue is not None:
            self.issue = issue
        if pages is not None:
            self.pages = pages
        if publication is not None:
            self.publication = publication
        if full_text_uri is not None:
            self.full_text_uri = full_text_uri
        if abstract_text is not None:
            self.abstract_text = abstract_text
        if citation is not None:
            self.citation = citation
        if publication_date is not None:
            self.publication_date = publication_date
        if annotated_abstract is not None:
            self.annotated_abstract = annotated_abstract
        if pub_accession is not None:
            self.pub_accession = pub_accession
        if retracted is not None:
            self.retracted = retracted
        if annotations is not None:
            self.annotations = annotations
        if mesh_terms is not None:
            self.mesh_terms = mesh_terms
        if keywords is not None:
            self.keywords = keywords
        if chemicals is not None:
            self.chemicals = chemicals

    @property
    def name(self):
        """Gets the name of this BibliographicReference.  # noqa: E501


        :return: The name of this BibliographicReference.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BibliographicReference.


        :param name: The name of this BibliographicReference.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this BibliographicReference.  # noqa: E501


        :return: The description of this BibliographicReference.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BibliographicReference.


        :param description: The description of this BibliographicReference.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this BibliographicReference.  # noqa: E501


        :return: The id of this BibliographicReference.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BibliographicReference.


        :param id: The id of this BibliographicReference.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def author_list(self):
        """Gets the author_list of this BibliographicReference.  # noqa: E501


        :return: The author_list of this BibliographicReference.  # noqa: E501
        :rtype: str
        """
        return self._author_list

    @author_list.setter
    def author_list(self, author_list):
        """Sets the author_list of this BibliographicReference.


        :param author_list: The author_list of this BibliographicReference.  # noqa: E501
        :type: str
        """

        self._author_list = author_list

    @property
    def title(self):
        """Gets the title of this BibliographicReference.  # noqa: E501


        :return: The title of this BibliographicReference.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this BibliographicReference.


        :param title: The title of this BibliographicReference.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def publisher(self):
        """Gets the publisher of this BibliographicReference.  # noqa: E501


        :return: The publisher of this BibliographicReference.  # noqa: E501
        :rtype: str
        """
        return self._publisher

    @publisher.setter
    def publisher(self, publisher):
        """Sets the publisher of this BibliographicReference.


        :param publisher: The publisher of this BibliographicReference.  # noqa: E501
        :type: str
        """

        self._publisher = publisher

    @property
    def editor(self):
        """Gets the editor of this BibliographicReference.  # noqa: E501


        :return: The editor of this BibliographicReference.  # noqa: E501
        :rtype: str
        """
        return self._editor

    @editor.setter
    def editor(self, editor):
        """Sets the editor of this BibliographicReference.


        :param editor: The editor of this BibliographicReference.  # noqa: E501
        :type: str
        """

        self._editor = editor

    @property
    def volume(self):
        """Gets the volume of this BibliographicReference.  # noqa: E501


        :return: The volume of this BibliographicReference.  # noqa: E501
        :rtype: str
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this BibliographicReference.


        :param volume: The volume of this BibliographicReference.  # noqa: E501
        :type: str
        """

        self._volume = volume

    @property
    def issue(self):
        """Gets the issue of this BibliographicReference.  # noqa: E501


        :return: The issue of this BibliographicReference.  # noqa: E501
        :rtype: str
        """
        return self._issue

    @issue.setter
    def issue(self, issue):
        """Sets the issue of this BibliographicReference.


        :param issue: The issue of this BibliographicReference.  # noqa: E501
        :type: str
        """

        self._issue = issue

    @property
    def pages(self):
        """Gets the pages of this BibliographicReference.  # noqa: E501


        :return: The pages of this BibliographicReference.  # noqa: E501
        :rtype: str
        """
        return self._pages

    @pages.setter
    def pages(self, pages):
        """Sets the pages of this BibliographicReference.


        :param pages: The pages of this BibliographicReference.  # noqa: E501
        :type: str
        """

        self._pages = pages

    @property
    def publication(self):
        """Gets the publication of this BibliographicReference.  # noqa: E501


        :return: The publication of this BibliographicReference.  # noqa: E501
        :rtype: str
        """
        return self._publication

    @publication.setter
    def publication(self, publication):
        """Sets the publication of this BibliographicReference.


        :param publication: The publication of this BibliographicReference.  # noqa: E501
        :type: str
        """

        self._publication = publication

    @property
    def full_text_uri(self):
        """Gets the full_text_uri of this BibliographicReference.  # noqa: E501


        :return: The full_text_uri of this BibliographicReference.  # noqa: E501
        :rtype: str
        """
        return self._full_text_uri

    @full_text_uri.setter
    def full_text_uri(self, full_text_uri):
        """Sets the full_text_uri of this BibliographicReference.


        :param full_text_uri: The full_text_uri of this BibliographicReference.  # noqa: E501
        :type: str
        """

        self._full_text_uri = full_text_uri

    @property
    def abstract_text(self):
        """Gets the abstract_text of this BibliographicReference.  # noqa: E501


        :return: The abstract_text of this BibliographicReference.  # noqa: E501
        :rtype: str
        """
        return self._abstract_text

    @abstract_text.setter
    def abstract_text(self, abstract_text):
        """Sets the abstract_text of this BibliographicReference.


        :param abstract_text: The abstract_text of this BibliographicReference.  # noqa: E501
        :type: str
        """

        self._abstract_text = abstract_text

    @property
    def citation(self):
        """Gets the citation of this BibliographicReference.  # noqa: E501


        :return: The citation of this BibliographicReference.  # noqa: E501
        :rtype: str
        """
        return self._citation

    @citation.setter
    def citation(self, citation):
        """Sets the citation of this BibliographicReference.


        :param citation: The citation of this BibliographicReference.  # noqa: E501
        :type: str
        """

        self._citation = citation

    @property
    def publication_date(self):
        """Gets the publication_date of this BibliographicReference.  # noqa: E501


        :return: The publication_date of this BibliographicReference.  # noqa: E501
        :rtype: datetime
        """
        return self._publication_date

    @publication_date.setter
    def publication_date(self, publication_date):
        """Sets the publication_date of this BibliographicReference.


        :param publication_date: The publication_date of this BibliographicReference.  # noqa: E501
        :type: datetime
        """

        self._publication_date = publication_date

    @property
    def annotated_abstract(self):
        """Gets the annotated_abstract of this BibliographicReference.  # noqa: E501


        :return: The annotated_abstract of this BibliographicReference.  # noqa: E501
        :rtype: str
        """
        return self._annotated_abstract

    @annotated_abstract.setter
    def annotated_abstract(self, annotated_abstract):
        """Sets the annotated_abstract of this BibliographicReference.


        :param annotated_abstract: The annotated_abstract of this BibliographicReference.  # noqa: E501
        :type: str
        """

        self._annotated_abstract = annotated_abstract

    @property
    def pub_accession(self):
        """Gets the pub_accession of this BibliographicReference.  # noqa: E501


        :return: The pub_accession of this BibliographicReference.  # noqa: E501
        :rtype: DatabaseEntry
        """
        return self._pub_accession

    @pub_accession.setter
    def pub_accession(self, pub_accession):
        """Sets the pub_accession of this BibliographicReference.


        :param pub_accession: The pub_accession of this BibliographicReference.  # noqa: E501
        :type: DatabaseEntry
        """

        self._pub_accession = pub_accession

    @property
    def retracted(self):
        """Gets the retracted of this BibliographicReference.  # noqa: E501


        :return: The retracted of this BibliographicReference.  # noqa: E501
        :rtype: bool
        """
        return self._retracted

    @retracted.setter
    def retracted(self, retracted):
        """Sets the retracted of this BibliographicReference.


        :param retracted: The retracted of this BibliographicReference.  # noqa: E501
        :type: bool
        """

        self._retracted = retracted

    @property
    def annotations(self):
        """Gets the annotations of this BibliographicReference.  # noqa: E501


        :return: The annotations of this BibliographicReference.  # noqa: E501
        :rtype: list[Characteristic]
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this BibliographicReference.


        :param annotations: The annotations of this BibliographicReference.  # noqa: E501
        :type: list[Characteristic]
        """

        self._annotations = annotations

    @property
    def mesh_terms(self):
        """Gets the mesh_terms of this BibliographicReference.  # noqa: E501


        :return: The mesh_terms of this BibliographicReference.  # noqa: E501
        :rtype: list[MedicalSubjectHeading]
        """
        return self._mesh_terms

    @mesh_terms.setter
    def mesh_terms(self, mesh_terms):
        """Sets the mesh_terms of this BibliographicReference.


        :param mesh_terms: The mesh_terms of this BibliographicReference.  # noqa: E501
        :type: list[MedicalSubjectHeading]
        """

        self._mesh_terms = mesh_terms

    @property
    def keywords(self):
        """Gets the keywords of this BibliographicReference.  # noqa: E501


        :return: The keywords of this BibliographicReference.  # noqa: E501
        :rtype: list[Keyword]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this BibliographicReference.


        :param keywords: The keywords of this BibliographicReference.  # noqa: E501
        :type: list[Keyword]
        """

        self._keywords = keywords

    @property
    def chemicals(self):
        """Gets the chemicals of this BibliographicReference.  # noqa: E501


        :return: The chemicals of this BibliographicReference.  # noqa: E501
        :rtype: list[Compound]
        """
        return self._chemicals

    @chemicals.setter
    def chemicals(self, chemicals):
        """Sets the chemicals of this BibliographicReference.


        :param chemicals: The chemicals of this BibliographicReference.  # noqa: E501
        :type: list[Compound]
        """

        self._chemicals = chemicals

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BibliographicReference, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BibliographicReference):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

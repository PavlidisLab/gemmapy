# coding: utf-8

"""
    Gemma RESTful API

    This website documents the usage of the [Gemma RESTful API](https://gemma.msl.ubc.ca/rest/v2/). Here you can find example script usage of the API, as well as graphical interface for each endpoint, with description of its parameters and the endpoint URL.  Use of this webpage and the Gemma Web services, including the REST API, is subject to [these terms and conditions](https://pavlidislab.github.io/Gemma/terms.html). Please read these in full before continuing to use this webpage or any other part of the Gemma system.  You can [consult the CHANGELOG.md file](https://gemma.msl.ubc.ca/resources/restapidocs/CHANGELOG.md) to view  release notes and recent changes to the Gemma RESTful API.   # noqa: E501

    OpenAPI spec version: 2.7.4
    Contact: pavlab-support@msl.ubc.ca
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StatementValueObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'category': 'str',
        'category_uri': 'str',
        'subject': 'str',
        'subject_uri': 'str',
        'predicate': 'str',
        'predicate_uri': 'str',
        'object': 'str',
        'object_uri': 'str',
        'subject_id': 'str',
        'object_id': 'str'
    }

    attribute_map = {
        'category': 'category',
        'category_uri': 'categoryUri',
        'subject': 'subject',
        'subject_uri': 'subjectUri',
        'predicate': 'predicate',
        'predicate_uri': 'predicateUri',
        'object': 'object',
        'object_uri': 'objectUri',
        'subject_id': 'subjectId',
        'object_id': 'objectId'
    }

    def __init__(self, category=None, category_uri=None, subject=None, subject_uri=None, predicate=None, predicate_uri=None, object=None, object_uri=None, subject_id=None, object_id=None):  # noqa: E501
        """StatementValueObject - a model defined in Swagger"""  # noqa: E501
        self._category = None
        self._category_uri = None
        self._subject = None
        self._subject_uri = None
        self._predicate = None
        self._predicate_uri = None
        self._object = None
        self._object_uri = None
        self._subject_id = None
        self._object_id = None
        self.discriminator = None
        if category is not None:
            self.category = category
        if category_uri is not None:
            self.category_uri = category_uri
        if subject is not None:
            self.subject = subject
        if subject_uri is not None:
            self.subject_uri = subject_uri
        if predicate is not None:
            self.predicate = predicate
        if predicate_uri is not None:
            self.predicate_uri = predicate_uri
        if object is not None:
            self.object = object
        if object_uri is not None:
            self.object_uri = object_uri
        if subject_id is not None:
            self.subject_id = subject_id
        if object_id is not None:
            self.object_id = object_id

    @property
    def category(self):
        """Gets the category of this StatementValueObject.  # noqa: E501


        :return: The category of this StatementValueObject.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this StatementValueObject.


        :param category: The category of this StatementValueObject.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def category_uri(self):
        """Gets the category_uri of this StatementValueObject.  # noqa: E501


        :return: The category_uri of this StatementValueObject.  # noqa: E501
        :rtype: str
        """
        return self._category_uri

    @category_uri.setter
    def category_uri(self, category_uri):
        """Sets the category_uri of this StatementValueObject.


        :param category_uri: The category_uri of this StatementValueObject.  # noqa: E501
        :type: str
        """

        self._category_uri = category_uri

    @property
    def subject(self):
        """Gets the subject of this StatementValueObject.  # noqa: E501


        :return: The subject of this StatementValueObject.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this StatementValueObject.


        :param subject: The subject of this StatementValueObject.  # noqa: E501
        :type: str
        """

        self._subject = subject

    @property
    def subject_uri(self):
        """Gets the subject_uri of this StatementValueObject.  # noqa: E501


        :return: The subject_uri of this StatementValueObject.  # noqa: E501
        :rtype: str
        """
        return self._subject_uri

    @subject_uri.setter
    def subject_uri(self, subject_uri):
        """Sets the subject_uri of this StatementValueObject.


        :param subject_uri: The subject_uri of this StatementValueObject.  # noqa: E501
        :type: str
        """

        self._subject_uri = subject_uri

    @property
    def predicate(self):
        """Gets the predicate of this StatementValueObject.  # noqa: E501


        :return: The predicate of this StatementValueObject.  # noqa: E501
        :rtype: str
        """
        return self._predicate

    @predicate.setter
    def predicate(self, predicate):
        """Sets the predicate of this StatementValueObject.


        :param predicate: The predicate of this StatementValueObject.  # noqa: E501
        :type: str
        """

        self._predicate = predicate

    @property
    def predicate_uri(self):
        """Gets the predicate_uri of this StatementValueObject.  # noqa: E501


        :return: The predicate_uri of this StatementValueObject.  # noqa: E501
        :rtype: str
        """
        return self._predicate_uri

    @predicate_uri.setter
    def predicate_uri(self, predicate_uri):
        """Sets the predicate_uri of this StatementValueObject.


        :param predicate_uri: The predicate_uri of this StatementValueObject.  # noqa: E501
        :type: str
        """

        self._predicate_uri = predicate_uri

    @property
    def object(self):
        """Gets the object of this StatementValueObject.  # noqa: E501


        :return: The object of this StatementValueObject.  # noqa: E501
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this StatementValueObject.


        :param object: The object of this StatementValueObject.  # noqa: E501
        :type: str
        """

        self._object = object

    @property
    def object_uri(self):
        """Gets the object_uri of this StatementValueObject.  # noqa: E501


        :return: The object_uri of this StatementValueObject.  # noqa: E501
        :rtype: str
        """
        return self._object_uri

    @object_uri.setter
    def object_uri(self, object_uri):
        """Sets the object_uri of this StatementValueObject.


        :param object_uri: The object_uri of this StatementValueObject.  # noqa: E501
        :type: str
        """

        self._object_uri = object_uri

    @property
    def subject_id(self):
        """Gets the subject_id of this StatementValueObject.  # noqa: E501


        :return: The subject_id of this StatementValueObject.  # noqa: E501
        :rtype: str
        """
        return self._subject_id

    @subject_id.setter
    def subject_id(self, subject_id):
        """Sets the subject_id of this StatementValueObject.


        :param subject_id: The subject_id of this StatementValueObject.  # noqa: E501
        :type: str
        """

        self._subject_id = subject_id

    @property
    def object_id(self):
        """Gets the object_id of this StatementValueObject.  # noqa: E501


        :return: The object_id of this StatementValueObject.  # noqa: E501
        :rtype: str
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this StatementValueObject.


        :param object_id: The object_id of this StatementValueObject.  # noqa: E501
        :type: str
        """

        self._object_id = object_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StatementValueObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatementValueObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

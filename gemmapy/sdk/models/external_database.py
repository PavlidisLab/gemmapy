# coding: utf-8

"""
    Gemma RESTful API

    This website documents the usage of the [Gemma REST API](https://gemma.msl.ubc.ca/rest/v2/). Here you can find example script usage of the API, as well as graphical interface for each endpoint, with description of its parameters and the endpoint URL.  The documentation of the underlying java code can be found [here](https://gemma.msl.ubc.ca/resources/apidocs/ubic/gemma/web/services/rest/package-summary.html). See the [links section](https://gemma.msl.ubc.ca/resources/restapidocs/#footer) in the footer of this page for other relevant links.  Use of this webpage and Gemma web services, including the REST API, is subject to [these terms and conditions](https://pavlidislab.github.io/Gemma/terms.html). Please read these in full before continuing to use this webpage or any other part of the Gemma system.   # noqa: E501

    OpenAPI spec version: 2.4.1
    Contact: pavlab-support@msl.ubc.ca
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ExternalDatabase(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'id': 'int',
        'local_install_db_name': 'str',
        'web_uri': 'str',
        'ftp_uri': 'str',
        'type': 'DatabaseType',
        'database_supplier': 'Contact'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'id': 'id',
        'local_install_db_name': 'localInstallDbName',
        'web_uri': 'webUri',
        'ftp_uri': 'ftpUri',
        'type': 'type',
        'database_supplier': 'databaseSupplier'
    }

    def __init__(self, name=None, description=None, id=None, local_install_db_name=None, web_uri=None, ftp_uri=None, type=None, database_supplier=None):  # noqa: E501
        """ExternalDatabase - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._description = None
        self._id = None
        self._local_install_db_name = None
        self._web_uri = None
        self._ftp_uri = None
        self._type = None
        self._database_supplier = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        if local_install_db_name is not None:
            self.local_install_db_name = local_install_db_name
        if web_uri is not None:
            self.web_uri = web_uri
        if ftp_uri is not None:
            self.ftp_uri = ftp_uri
        if type is not None:
            self.type = type
        if database_supplier is not None:
            self.database_supplier = database_supplier

    @property
    def name(self):
        """Gets the name of this ExternalDatabase.  # noqa: E501


        :return: The name of this ExternalDatabase.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ExternalDatabase.


        :param name: The name of this ExternalDatabase.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this ExternalDatabase.  # noqa: E501


        :return: The description of this ExternalDatabase.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ExternalDatabase.


        :param description: The description of this ExternalDatabase.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this ExternalDatabase.  # noqa: E501


        :return: The id of this ExternalDatabase.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ExternalDatabase.


        :param id: The id of this ExternalDatabase.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def local_install_db_name(self):
        """Gets the local_install_db_name of this ExternalDatabase.  # noqa: E501


        :return: The local_install_db_name of this ExternalDatabase.  # noqa: E501
        :rtype: str
        """
        return self._local_install_db_name

    @local_install_db_name.setter
    def local_install_db_name(self, local_install_db_name):
        """Sets the local_install_db_name of this ExternalDatabase.


        :param local_install_db_name: The local_install_db_name of this ExternalDatabase.  # noqa: E501
        :type: str
        """

        self._local_install_db_name = local_install_db_name

    @property
    def web_uri(self):
        """Gets the web_uri of this ExternalDatabase.  # noqa: E501


        :return: The web_uri of this ExternalDatabase.  # noqa: E501
        :rtype: str
        """
        return self._web_uri

    @web_uri.setter
    def web_uri(self, web_uri):
        """Sets the web_uri of this ExternalDatabase.


        :param web_uri: The web_uri of this ExternalDatabase.  # noqa: E501
        :type: str
        """

        self._web_uri = web_uri

    @property
    def ftp_uri(self):
        """Gets the ftp_uri of this ExternalDatabase.  # noqa: E501


        :return: The ftp_uri of this ExternalDatabase.  # noqa: E501
        :rtype: str
        """
        return self._ftp_uri

    @ftp_uri.setter
    def ftp_uri(self, ftp_uri):
        """Sets the ftp_uri of this ExternalDatabase.


        :param ftp_uri: The ftp_uri of this ExternalDatabase.  # noqa: E501
        :type: str
        """

        self._ftp_uri = ftp_uri

    @property
    def type(self):
        """Gets the type of this ExternalDatabase.  # noqa: E501


        :return: The type of this ExternalDatabase.  # noqa: E501
        :rtype: DatabaseType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ExternalDatabase.


        :param type: The type of this ExternalDatabase.  # noqa: E501
        :type: DatabaseType
        """

        self._type = type

    @property
    def database_supplier(self):
        """Gets the database_supplier of this ExternalDatabase.  # noqa: E501


        :return: The database_supplier of this ExternalDatabase.  # noqa: E501
        :rtype: Contact
        """
        return self._database_supplier

    @database_supplier.setter
    def database_supplier(self, database_supplier):
        """Sets the database_supplier of this ExternalDatabase.


        :param database_supplier: The database_supplier of this ExternalDatabase.  # noqa: E501
        :type: Contact
        """

        self._database_supplier = database_supplier

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExternalDatabase, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExternalDatabase):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Gemma RESTful API

    This website documents the usage of the [Gemma RESTful API](https://gemma.msl.ubc.ca/rest/v2/). Here you can find example script usage of the API, as well as graphical interface for each endpoint, with description of its parameters and the endpoint URL.  Use of this webpage and the Gemma Web services, including the REST API, is subject to [these terms and conditions](https://pavlidislab.github.io/Gemma/terms.html). Please read these in full before continuing to use this webpage or any other part of the Gemma system.  You can [consult the CHANGELOG.md file](https://gemma.msl.ubc.ca/resources/restapidocs/CHANGELOG.md) to view  release notes and recent changes to the Gemma RESTful API.   # noqa: E501

    OpenAPI spec version: 2.9.1
    Contact: pavlab-support@msl.ubc.ca
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ExpressionExperimentSubsetWithFactorValuesObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'source_experiment_id': 'int',
        'source_experiment_short_name': 'str',
        'name': 'str',
        'description': 'str',
        'number_of_bio_assays': 'int',
        'characteristics': 'list[CharacteristicValueObject]',
        'bio_assays': 'list[BioAssayValueObject]',
        'factor_values': 'list[FactorValueBasicValueObject]'
    }

    attribute_map = {
        'id': 'id',
        'source_experiment_id': 'sourceExperimentId',
        'source_experiment_short_name': 'sourceExperimentShortName',
        'name': 'name',
        'description': 'description',
        'number_of_bio_assays': 'numberOfBioAssays',
        'characteristics': 'characteristics',
        'bio_assays': 'bioAssays',
        'factor_values': 'factorValues'
    }

    def __init__(self, id=None, source_experiment_id=None, source_experiment_short_name=None, name=None, description=None, number_of_bio_assays=None, characteristics=None, bio_assays=None, factor_values=None):  # noqa: E501
        """ExpressionExperimentSubsetWithFactorValuesObject - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._source_experiment_id = None
        self._source_experiment_short_name = None
        self._name = None
        self._description = None
        self._number_of_bio_assays = None
        self._characteristics = None
        self._bio_assays = None
        self._factor_values = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if source_experiment_id is not None:
            self.source_experiment_id = source_experiment_id
        if source_experiment_short_name is not None:
            self.source_experiment_short_name = source_experiment_short_name
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if number_of_bio_assays is not None:
            self.number_of_bio_assays = number_of_bio_assays
        if characteristics is not None:
            self.characteristics = characteristics
        if bio_assays is not None:
            self.bio_assays = bio_assays
        if factor_values is not None:
            self.factor_values = factor_values

    @property
    def id(self):
        """Gets the id of this ExpressionExperimentSubsetWithFactorValuesObject.  # noqa: E501


        :return: The id of this ExpressionExperimentSubsetWithFactorValuesObject.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ExpressionExperimentSubsetWithFactorValuesObject.


        :param id: The id of this ExpressionExperimentSubsetWithFactorValuesObject.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def source_experiment_id(self):
        """Gets the source_experiment_id of this ExpressionExperimentSubsetWithFactorValuesObject.  # noqa: E501


        :return: The source_experiment_id of this ExpressionExperimentSubsetWithFactorValuesObject.  # noqa: E501
        :rtype: int
        """
        return self._source_experiment_id

    @source_experiment_id.setter
    def source_experiment_id(self, source_experiment_id):
        """Sets the source_experiment_id of this ExpressionExperimentSubsetWithFactorValuesObject.


        :param source_experiment_id: The source_experiment_id of this ExpressionExperimentSubsetWithFactorValuesObject.  # noqa: E501
        :type: int
        """

        self._source_experiment_id = source_experiment_id

    @property
    def source_experiment_short_name(self):
        """Gets the source_experiment_short_name of this ExpressionExperimentSubsetWithFactorValuesObject.  # noqa: E501


        :return: The source_experiment_short_name of this ExpressionExperimentSubsetWithFactorValuesObject.  # noqa: E501
        :rtype: str
        """
        return self._source_experiment_short_name

    @source_experiment_short_name.setter
    def source_experiment_short_name(self, source_experiment_short_name):
        """Sets the source_experiment_short_name of this ExpressionExperimentSubsetWithFactorValuesObject.


        :param source_experiment_short_name: The source_experiment_short_name of this ExpressionExperimentSubsetWithFactorValuesObject.  # noqa: E501
        :type: str
        """

        self._source_experiment_short_name = source_experiment_short_name

    @property
    def name(self):
        """Gets the name of this ExpressionExperimentSubsetWithFactorValuesObject.  # noqa: E501


        :return: The name of this ExpressionExperimentSubsetWithFactorValuesObject.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ExpressionExperimentSubsetWithFactorValuesObject.


        :param name: The name of this ExpressionExperimentSubsetWithFactorValuesObject.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this ExpressionExperimentSubsetWithFactorValuesObject.  # noqa: E501


        :return: The description of this ExpressionExperimentSubsetWithFactorValuesObject.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ExpressionExperimentSubsetWithFactorValuesObject.


        :param description: The description of this ExpressionExperimentSubsetWithFactorValuesObject.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def number_of_bio_assays(self):
        """Gets the number_of_bio_assays of this ExpressionExperimentSubsetWithFactorValuesObject.  # noqa: E501


        :return: The number_of_bio_assays of this ExpressionExperimentSubsetWithFactorValuesObject.  # noqa: E501
        :rtype: int
        """
        return self._number_of_bio_assays

    @number_of_bio_assays.setter
    def number_of_bio_assays(self, number_of_bio_assays):
        """Sets the number_of_bio_assays of this ExpressionExperimentSubsetWithFactorValuesObject.


        :param number_of_bio_assays: The number_of_bio_assays of this ExpressionExperimentSubsetWithFactorValuesObject.  # noqa: E501
        :type: int
        """

        self._number_of_bio_assays = number_of_bio_assays

    @property
    def characteristics(self):
        """Gets the characteristics of this ExpressionExperimentSubsetWithFactorValuesObject.  # noqa: E501


        :return: The characteristics of this ExpressionExperimentSubsetWithFactorValuesObject.  # noqa: E501
        :rtype: list[CharacteristicValueObject]
        """
        return self._characteristics

    @characteristics.setter
    def characteristics(self, characteristics):
        """Sets the characteristics of this ExpressionExperimentSubsetWithFactorValuesObject.


        :param characteristics: The characteristics of this ExpressionExperimentSubsetWithFactorValuesObject.  # noqa: E501
        :type: list[CharacteristicValueObject]
        """

        self._characteristics = characteristics

    @property
    def bio_assays(self):
        """Gets the bio_assays of this ExpressionExperimentSubsetWithFactorValuesObject.  # noqa: E501


        :return: The bio_assays of this ExpressionExperimentSubsetWithFactorValuesObject.  # noqa: E501
        :rtype: list[BioAssayValueObject]
        """
        return self._bio_assays

    @bio_assays.setter
    def bio_assays(self, bio_assays):
        """Sets the bio_assays of this ExpressionExperimentSubsetWithFactorValuesObject.


        :param bio_assays: The bio_assays of this ExpressionExperimentSubsetWithFactorValuesObject.  # noqa: E501
        :type: list[BioAssayValueObject]
        """

        self._bio_assays = bio_assays

    @property
    def factor_values(self):
        """Gets the factor_values of this ExpressionExperimentSubsetWithFactorValuesObject.  # noqa: E501


        :return: The factor_values of this ExpressionExperimentSubsetWithFactorValuesObject.  # noqa: E501
        :rtype: list[FactorValueBasicValueObject]
        """
        return self._factor_values

    @factor_values.setter
    def factor_values(self, factor_values):
        """Sets the factor_values of this ExpressionExperimentSubsetWithFactorValuesObject.


        :param factor_values: The factor_values of this ExpressionExperimentSubsetWithFactorValuesObject.  # noqa: E501
        :type: list[FactorValueBasicValueObject]
        """

        self._factor_values = factor_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExpressionExperimentSubsetWithFactorValuesObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExpressionExperimentSubsetWithFactorValuesObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Gemma RESTful API

    This website documents the usage of the [Gemma RESTful API](https://gemma.msl.ubc.ca/rest/v2/). Here you can find example script usage of the API, as well as graphical interface for each endpoint, with description of its parameters and the endpoint URL.  Use of this webpage and the Gemma Web services, including the REST API, is subject to [these terms and conditions](https://pavlidislab.github.io/Gemma/terms.html). Please read these in full before continuing to use this webpage or any other part of the Gemma system.  You can [consult the CHANGELOG.md file](https://gemma.msl.ubc.ca/resources/restapidocs/CHANGELOG.md) to view  release notes and recent changes to the Gemma RESTful API.   # noqa: E501

    OpenAPI spec version: 2.9.1
    Contact: pavlab-support@msl.ubc.ca
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SingleCellDimensionValueObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'cell_ids': 'list[str]',
        'number_of_cells': 'int',
        'bio_assay_ids': 'list[int]',
        'cell_type_assignments': 'list[CellTypeAssignmentValueObject]',
        'cell_level_characteristics': 'list[CellLevelCharacteristicsValueObject]'
    }

    attribute_map = {
        'id': 'id',
        'cell_ids': 'cellIds',
        'number_of_cells': 'numberOfCells',
        'bio_assay_ids': 'bioAssayIds',
        'cell_type_assignments': 'cellTypeAssignments',
        'cell_level_characteristics': 'cellLevelCharacteristics'
    }

    def __init__(self, id=None, cell_ids=None, number_of_cells=None, bio_assay_ids=None, cell_type_assignments=None, cell_level_characteristics=None):  # noqa: E501
        """SingleCellDimensionValueObject - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._cell_ids = None
        self._number_of_cells = None
        self._bio_assay_ids = None
        self._cell_type_assignments = None
        self._cell_level_characteristics = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if cell_ids is not None:
            self.cell_ids = cell_ids
        if number_of_cells is not None:
            self.number_of_cells = number_of_cells
        if bio_assay_ids is not None:
            self.bio_assay_ids = bio_assay_ids
        if cell_type_assignments is not None:
            self.cell_type_assignments = cell_type_assignments
        if cell_level_characteristics is not None:
            self.cell_level_characteristics = cell_level_characteristics

    @property
    def id(self):
        """Gets the id of this SingleCellDimensionValueObject.  # noqa: E501


        :return: The id of this SingleCellDimensionValueObject.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SingleCellDimensionValueObject.


        :param id: The id of this SingleCellDimensionValueObject.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def cell_ids(self):
        """Gets the cell_ids of this SingleCellDimensionValueObject.  # noqa: E501


        :return: The cell_ids of this SingleCellDimensionValueObject.  # noqa: E501
        :rtype: list[str]
        """
        return self._cell_ids

    @cell_ids.setter
    def cell_ids(self, cell_ids):
        """Sets the cell_ids of this SingleCellDimensionValueObject.


        :param cell_ids: The cell_ids of this SingleCellDimensionValueObject.  # noqa: E501
        :type: list[str]
        """

        self._cell_ids = cell_ids

    @property
    def number_of_cells(self):
        """Gets the number_of_cells of this SingleCellDimensionValueObject.  # noqa: E501


        :return: The number_of_cells of this SingleCellDimensionValueObject.  # noqa: E501
        :rtype: int
        """
        return self._number_of_cells

    @number_of_cells.setter
    def number_of_cells(self, number_of_cells):
        """Sets the number_of_cells of this SingleCellDimensionValueObject.


        :param number_of_cells: The number_of_cells of this SingleCellDimensionValueObject.  # noqa: E501
        :type: int
        """

        self._number_of_cells = number_of_cells

    @property
    def bio_assay_ids(self):
        """Gets the bio_assay_ids of this SingleCellDimensionValueObject.  # noqa: E501


        :return: The bio_assay_ids of this SingleCellDimensionValueObject.  # noqa: E501
        :rtype: list[int]
        """
        return self._bio_assay_ids

    @bio_assay_ids.setter
    def bio_assay_ids(self, bio_assay_ids):
        """Sets the bio_assay_ids of this SingleCellDimensionValueObject.


        :param bio_assay_ids: The bio_assay_ids of this SingleCellDimensionValueObject.  # noqa: E501
        :type: list[int]
        """

        self._bio_assay_ids = bio_assay_ids

    @property
    def cell_type_assignments(self):
        """Gets the cell_type_assignments of this SingleCellDimensionValueObject.  # noqa: E501


        :return: The cell_type_assignments of this SingleCellDimensionValueObject.  # noqa: E501
        :rtype: list[CellTypeAssignmentValueObject]
        """
        return self._cell_type_assignments

    @cell_type_assignments.setter
    def cell_type_assignments(self, cell_type_assignments):
        """Sets the cell_type_assignments of this SingleCellDimensionValueObject.


        :param cell_type_assignments: The cell_type_assignments of this SingleCellDimensionValueObject.  # noqa: E501
        :type: list[CellTypeAssignmentValueObject]
        """

        self._cell_type_assignments = cell_type_assignments

    @property
    def cell_level_characteristics(self):
        """Gets the cell_level_characteristics of this SingleCellDimensionValueObject.  # noqa: E501


        :return: The cell_level_characteristics of this SingleCellDimensionValueObject.  # noqa: E501
        :rtype: list[CellLevelCharacteristicsValueObject]
        """
        return self._cell_level_characteristics

    @cell_level_characteristics.setter
    def cell_level_characteristics(self, cell_level_characteristics):
        """Sets the cell_level_characteristics of this SingleCellDimensionValueObject.


        :param cell_level_characteristics: The cell_level_characteristics of this SingleCellDimensionValueObject.  # noqa: E501
        :type: list[CellLevelCharacteristicsValueObject]
        """

        self._cell_level_characteristics = cell_level_characteristics

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SingleCellDimensionValueObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SingleCellDimensionValueObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

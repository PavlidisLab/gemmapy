# coding: utf-8

"""
    Gemma RESTful API

    This website documents the usage of the [Gemma RESTful API](https://gemma.msl.ubc.ca/rest/v2/). Here you can find example script usage of the API, as well as graphical interface for each endpoint, with description of its parameters and the endpoint URL.  Use of this webpage and the Gemma Web services, including the REST API, is subject to [these terms and conditions](https://pavlidislab.github.io/Gemma/terms.html). Please read these in full before continuing to use this webpage or any other part of the Gemma system.  You can [consult the CHANGELOG.md file](https://gemma.msl.ubc.ca/resources/restapidocs/CHANGELOG.md) to view  release notes and recent changes to the Gemma RESTful API.   # noqa: E501

    OpenAPI spec version: 2.7.4
    Contact: pavlab-support@msl.ubc.ca
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ArrayDesignWithUsageStatisticsValueObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'last_updated': 'datetime',
        'troubled': 'bool',
        'last_troubled_event': 'AuditEventValueObject',
        'needs_attention': 'bool',
        'last_needs_attention_event': 'AuditEventValueObject',
        'curation_note': 'str',
        'last_note_update_event': 'AuditEventValueObject',
        'color': 'str',
        'description': 'str',
        'is_merged': 'bool',
        'is_mergee': 'bool',
        'name': 'str',
        'short_name': 'str',
        'technology_type': 'str',
        'release_version': 'str',
        'release_url': 'str',
        'external_references': 'list[DatabaseEntryValueObject]',
        'number_of_expression_experiments_for_technology_type': 'int',
        'number_of_expression_experiments': 'int',
        'taxon_id': 'int',
        'trouble_details': 'str',
        'taxon': 'TaxonValueObject'
    }

    attribute_map = {
        'id': 'id',
        'last_updated': 'lastUpdated',
        'troubled': 'troubled',
        'last_troubled_event': 'lastTroubledEvent',
        'needs_attention': 'needsAttention',
        'last_needs_attention_event': 'lastNeedsAttentionEvent',
        'curation_note': 'curationNote',
        'last_note_update_event': 'lastNoteUpdateEvent',
        'color': 'color',
        'description': 'description',
        'is_merged': 'isMerged',
        'is_mergee': 'isMergee',
        'name': 'name',
        'short_name': 'shortName',
        'technology_type': 'technologyType',
        'release_version': 'releaseVersion',
        'release_url': 'releaseUrl',
        'external_references': 'externalReferences',
        'number_of_expression_experiments_for_technology_type': 'numberOfExpressionExperimentsForTechnologyType',
        'number_of_expression_experiments': 'numberOfExpressionExperiments',
        'taxon_id': 'taxonID',
        'trouble_details': 'troubleDetails',
        'taxon': 'taxon'
    }

    def __init__(self, id=None, last_updated=None, troubled=None, last_troubled_event=None, needs_attention=None, last_needs_attention_event=None, curation_note=None, last_note_update_event=None, color=None, description=None, is_merged=None, is_mergee=None, name=None, short_name=None, technology_type=None, release_version=None, release_url=None, external_references=None, number_of_expression_experiments_for_technology_type=None, number_of_expression_experiments=None, taxon_id=None, trouble_details=None, taxon=None):  # noqa: E501
        """ArrayDesignWithUsageStatisticsValueObject - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._last_updated = None
        self._troubled = None
        self._last_troubled_event = None
        self._needs_attention = None
        self._last_needs_attention_event = None
        self._curation_note = None
        self._last_note_update_event = None
        self._color = None
        self._description = None
        self._is_merged = None
        self._is_mergee = None
        self._name = None
        self._short_name = None
        self._technology_type = None
        self._release_version = None
        self._release_url = None
        self._external_references = None
        self._number_of_expression_experiments_for_technology_type = None
        self._number_of_expression_experiments = None
        self._taxon_id = None
        self._trouble_details = None
        self._taxon = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if last_updated is not None:
            self.last_updated = last_updated
        if troubled is not None:
            self.troubled = troubled
        if last_troubled_event is not None:
            self.last_troubled_event = last_troubled_event
        if needs_attention is not None:
            self.needs_attention = needs_attention
        if last_needs_attention_event is not None:
            self.last_needs_attention_event = last_needs_attention_event
        if curation_note is not None:
            self.curation_note = curation_note
        if last_note_update_event is not None:
            self.last_note_update_event = last_note_update_event
        if color is not None:
            self.color = color
        if description is not None:
            self.description = description
        if is_merged is not None:
            self.is_merged = is_merged
        if is_mergee is not None:
            self.is_mergee = is_mergee
        if name is not None:
            self.name = name
        if short_name is not None:
            self.short_name = short_name
        if technology_type is not None:
            self.technology_type = technology_type
        if release_version is not None:
            self.release_version = release_version
        if release_url is not None:
            self.release_url = release_url
        if external_references is not None:
            self.external_references = external_references
        if number_of_expression_experiments_for_technology_type is not None:
            self.number_of_expression_experiments_for_technology_type = number_of_expression_experiments_for_technology_type
        if number_of_expression_experiments is not None:
            self.number_of_expression_experiments = number_of_expression_experiments
        if taxon_id is not None:
            self.taxon_id = taxon_id
        if trouble_details is not None:
            self.trouble_details = trouble_details
        if taxon is not None:
            self.taxon = taxon

    @property
    def id(self):
        """Gets the id of this ArrayDesignWithUsageStatisticsValueObject.  # noqa: E501


        :return: The id of this ArrayDesignWithUsageStatisticsValueObject.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ArrayDesignWithUsageStatisticsValueObject.


        :param id: The id of this ArrayDesignWithUsageStatisticsValueObject.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def last_updated(self):
        """Gets the last_updated of this ArrayDesignWithUsageStatisticsValueObject.  # noqa: E501


        :return: The last_updated of this ArrayDesignWithUsageStatisticsValueObject.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this ArrayDesignWithUsageStatisticsValueObject.


        :param last_updated: The last_updated of this ArrayDesignWithUsageStatisticsValueObject.  # noqa: E501
        :type: datetime
        """

        self._last_updated = last_updated

    @property
    def troubled(self):
        """Gets the troubled of this ArrayDesignWithUsageStatisticsValueObject.  # noqa: E501


        :return: The troubled of this ArrayDesignWithUsageStatisticsValueObject.  # noqa: E501
        :rtype: bool
        """
        return self._troubled

    @troubled.setter
    def troubled(self, troubled):
        """Sets the troubled of this ArrayDesignWithUsageStatisticsValueObject.


        :param troubled: The troubled of this ArrayDesignWithUsageStatisticsValueObject.  # noqa: E501
        :type: bool
        """

        self._troubled = troubled

    @property
    def last_troubled_event(self):
        """Gets the last_troubled_event of this ArrayDesignWithUsageStatisticsValueObject.  # noqa: E501


        :return: The last_troubled_event of this ArrayDesignWithUsageStatisticsValueObject.  # noqa: E501
        :rtype: AuditEventValueObject
        """
        return self._last_troubled_event

    @last_troubled_event.setter
    def last_troubled_event(self, last_troubled_event):
        """Sets the last_troubled_event of this ArrayDesignWithUsageStatisticsValueObject.


        :param last_troubled_event: The last_troubled_event of this ArrayDesignWithUsageStatisticsValueObject.  # noqa: E501
        :type: AuditEventValueObject
        """

        self._last_troubled_event = last_troubled_event

    @property
    def needs_attention(self):
        """Gets the needs_attention of this ArrayDesignWithUsageStatisticsValueObject.  # noqa: E501


        :return: The needs_attention of this ArrayDesignWithUsageStatisticsValueObject.  # noqa: E501
        :rtype: bool
        """
        return self._needs_attention

    @needs_attention.setter
    def needs_attention(self, needs_attention):
        """Sets the needs_attention of this ArrayDesignWithUsageStatisticsValueObject.


        :param needs_attention: The needs_attention of this ArrayDesignWithUsageStatisticsValueObject.  # noqa: E501
        :type: bool
        """

        self._needs_attention = needs_attention

    @property
    def last_needs_attention_event(self):
        """Gets the last_needs_attention_event of this ArrayDesignWithUsageStatisticsValueObject.  # noqa: E501


        :return: The last_needs_attention_event of this ArrayDesignWithUsageStatisticsValueObject.  # noqa: E501
        :rtype: AuditEventValueObject
        """
        return self._last_needs_attention_event

    @last_needs_attention_event.setter
    def last_needs_attention_event(self, last_needs_attention_event):
        """Sets the last_needs_attention_event of this ArrayDesignWithUsageStatisticsValueObject.


        :param last_needs_attention_event: The last_needs_attention_event of this ArrayDesignWithUsageStatisticsValueObject.  # noqa: E501
        :type: AuditEventValueObject
        """

        self._last_needs_attention_event = last_needs_attention_event

    @property
    def curation_note(self):
        """Gets the curation_note of this ArrayDesignWithUsageStatisticsValueObject.  # noqa: E501


        :return: The curation_note of this ArrayDesignWithUsageStatisticsValueObject.  # noqa: E501
        :rtype: str
        """
        return self._curation_note

    @curation_note.setter
    def curation_note(self, curation_note):
        """Sets the curation_note of this ArrayDesignWithUsageStatisticsValueObject.


        :param curation_note: The curation_note of this ArrayDesignWithUsageStatisticsValueObject.  # noqa: E501
        :type: str
        """

        self._curation_note = curation_note

    @property
    def last_note_update_event(self):
        """Gets the last_note_update_event of this ArrayDesignWithUsageStatisticsValueObject.  # noqa: E501


        :return: The last_note_update_event of this ArrayDesignWithUsageStatisticsValueObject.  # noqa: E501
        :rtype: AuditEventValueObject
        """
        return self._last_note_update_event

    @last_note_update_event.setter
    def last_note_update_event(self, last_note_update_event):
        """Sets the last_note_update_event of this ArrayDesignWithUsageStatisticsValueObject.


        :param last_note_update_event: The last_note_update_event of this ArrayDesignWithUsageStatisticsValueObject.  # noqa: E501
        :type: AuditEventValueObject
        """

        self._last_note_update_event = last_note_update_event

    @property
    def color(self):
        """Gets the color of this ArrayDesignWithUsageStatisticsValueObject.  # noqa: E501


        :return: The color of this ArrayDesignWithUsageStatisticsValueObject.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this ArrayDesignWithUsageStatisticsValueObject.


        :param color: The color of this ArrayDesignWithUsageStatisticsValueObject.  # noqa: E501
        :type: str
        """
        allowed_values = ["TWOCOLOR", "DUALMODE", "ONECOLOR", "SEQUENCING", "GENELIST", "OTHER"]  # noqa: E501
        if color not in allowed_values:
            raise ValueError(
                "Invalid value for `color` ({0}), must be one of {1}"  # noqa: E501
                .format(color, allowed_values)
            )

        self._color = color

    @property
    def description(self):
        """Gets the description of this ArrayDesignWithUsageStatisticsValueObject.  # noqa: E501


        :return: The description of this ArrayDesignWithUsageStatisticsValueObject.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ArrayDesignWithUsageStatisticsValueObject.


        :param description: The description of this ArrayDesignWithUsageStatisticsValueObject.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def is_merged(self):
        """Gets the is_merged of this ArrayDesignWithUsageStatisticsValueObject.  # noqa: E501


        :return: The is_merged of this ArrayDesignWithUsageStatisticsValueObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_merged

    @is_merged.setter
    def is_merged(self, is_merged):
        """Sets the is_merged of this ArrayDesignWithUsageStatisticsValueObject.


        :param is_merged: The is_merged of this ArrayDesignWithUsageStatisticsValueObject.  # noqa: E501
        :type: bool
        """

        self._is_merged = is_merged

    @property
    def is_mergee(self):
        """Gets the is_mergee of this ArrayDesignWithUsageStatisticsValueObject.  # noqa: E501


        :return: The is_mergee of this ArrayDesignWithUsageStatisticsValueObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_mergee

    @is_mergee.setter
    def is_mergee(self, is_mergee):
        """Sets the is_mergee of this ArrayDesignWithUsageStatisticsValueObject.


        :param is_mergee: The is_mergee of this ArrayDesignWithUsageStatisticsValueObject.  # noqa: E501
        :type: bool
        """

        self._is_mergee = is_mergee

    @property
    def name(self):
        """Gets the name of this ArrayDesignWithUsageStatisticsValueObject.  # noqa: E501


        :return: The name of this ArrayDesignWithUsageStatisticsValueObject.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ArrayDesignWithUsageStatisticsValueObject.


        :param name: The name of this ArrayDesignWithUsageStatisticsValueObject.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def short_name(self):
        """Gets the short_name of this ArrayDesignWithUsageStatisticsValueObject.  # noqa: E501


        :return: The short_name of this ArrayDesignWithUsageStatisticsValueObject.  # noqa: E501
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """Sets the short_name of this ArrayDesignWithUsageStatisticsValueObject.


        :param short_name: The short_name of this ArrayDesignWithUsageStatisticsValueObject.  # noqa: E501
        :type: str
        """

        self._short_name = short_name

    @property
    def technology_type(self):
        """Gets the technology_type of this ArrayDesignWithUsageStatisticsValueObject.  # noqa: E501


        :return: The technology_type of this ArrayDesignWithUsageStatisticsValueObject.  # noqa: E501
        :rtype: str
        """
        return self._technology_type

    @technology_type.setter
    def technology_type(self, technology_type):
        """Sets the technology_type of this ArrayDesignWithUsageStatisticsValueObject.


        :param technology_type: The technology_type of this ArrayDesignWithUsageStatisticsValueObject.  # noqa: E501
        :type: str
        """
        allowed_values = ["TWOCOLOR", "DUALMODE", "ONECOLOR", "SEQUENCING", "GENELIST", "OTHER"]  # noqa: E501
        if technology_type not in allowed_values:
            raise ValueError(
                "Invalid value for `technology_type` ({0}), must be one of {1}"  # noqa: E501
                .format(technology_type, allowed_values)
            )

        self._technology_type = technology_type

    @property
    def release_version(self):
        """Gets the release_version of this ArrayDesignWithUsageStatisticsValueObject.  # noqa: E501


        :return: The release_version of this ArrayDesignWithUsageStatisticsValueObject.  # noqa: E501
        :rtype: str
        """
        return self._release_version

    @release_version.setter
    def release_version(self, release_version):
        """Sets the release_version of this ArrayDesignWithUsageStatisticsValueObject.


        :param release_version: The release_version of this ArrayDesignWithUsageStatisticsValueObject.  # noqa: E501
        :type: str
        """

        self._release_version = release_version

    @property
    def release_url(self):
        """Gets the release_url of this ArrayDesignWithUsageStatisticsValueObject.  # noqa: E501


        :return: The release_url of this ArrayDesignWithUsageStatisticsValueObject.  # noqa: E501
        :rtype: str
        """
        return self._release_url

    @release_url.setter
    def release_url(self, release_url):
        """Sets the release_url of this ArrayDesignWithUsageStatisticsValueObject.


        :param release_url: The release_url of this ArrayDesignWithUsageStatisticsValueObject.  # noqa: E501
        :type: str
        """

        self._release_url = release_url

    @property
    def external_references(self):
        """Gets the external_references of this ArrayDesignWithUsageStatisticsValueObject.  # noqa: E501


        :return: The external_references of this ArrayDesignWithUsageStatisticsValueObject.  # noqa: E501
        :rtype: list[DatabaseEntryValueObject]
        """
        return self._external_references

    @external_references.setter
    def external_references(self, external_references):
        """Sets the external_references of this ArrayDesignWithUsageStatisticsValueObject.


        :param external_references: The external_references of this ArrayDesignWithUsageStatisticsValueObject.  # noqa: E501
        :type: list[DatabaseEntryValueObject]
        """

        self._external_references = external_references

    @property
    def number_of_expression_experiments_for_technology_type(self):
        """Gets the number_of_expression_experiments_for_technology_type of this ArrayDesignWithUsageStatisticsValueObject.  # noqa: E501


        :return: The number_of_expression_experiments_for_technology_type of this ArrayDesignWithUsageStatisticsValueObject.  # noqa: E501
        :rtype: int
        """
        return self._number_of_expression_experiments_for_technology_type

    @number_of_expression_experiments_for_technology_type.setter
    def number_of_expression_experiments_for_technology_type(self, number_of_expression_experiments_for_technology_type):
        """Sets the number_of_expression_experiments_for_technology_type of this ArrayDesignWithUsageStatisticsValueObject.


        :param number_of_expression_experiments_for_technology_type: The number_of_expression_experiments_for_technology_type of this ArrayDesignWithUsageStatisticsValueObject.  # noqa: E501
        :type: int
        """

        self._number_of_expression_experiments_for_technology_type = number_of_expression_experiments_for_technology_type

    @property
    def number_of_expression_experiments(self):
        """Gets the number_of_expression_experiments of this ArrayDesignWithUsageStatisticsValueObject.  # noqa: E501


        :return: The number_of_expression_experiments of this ArrayDesignWithUsageStatisticsValueObject.  # noqa: E501
        :rtype: int
        """
        return self._number_of_expression_experiments

    @number_of_expression_experiments.setter
    def number_of_expression_experiments(self, number_of_expression_experiments):
        """Sets the number_of_expression_experiments of this ArrayDesignWithUsageStatisticsValueObject.


        :param number_of_expression_experiments: The number_of_expression_experiments of this ArrayDesignWithUsageStatisticsValueObject.  # noqa: E501
        :type: int
        """

        self._number_of_expression_experiments = number_of_expression_experiments

    @property
    def taxon_id(self):
        """Gets the taxon_id of this ArrayDesignWithUsageStatisticsValueObject.  # noqa: E501


        :return: The taxon_id of this ArrayDesignWithUsageStatisticsValueObject.  # noqa: E501
        :rtype: int
        """
        return self._taxon_id

    @taxon_id.setter
    def taxon_id(self, taxon_id):
        """Sets the taxon_id of this ArrayDesignWithUsageStatisticsValueObject.


        :param taxon_id: The taxon_id of this ArrayDesignWithUsageStatisticsValueObject.  # noqa: E501
        :type: int
        """

        self._taxon_id = taxon_id

    @property
    def trouble_details(self):
        """Gets the trouble_details of this ArrayDesignWithUsageStatisticsValueObject.  # noqa: E501


        :return: The trouble_details of this ArrayDesignWithUsageStatisticsValueObject.  # noqa: E501
        :rtype: str
        """
        return self._trouble_details

    @trouble_details.setter
    def trouble_details(self, trouble_details):
        """Sets the trouble_details of this ArrayDesignWithUsageStatisticsValueObject.


        :param trouble_details: The trouble_details of this ArrayDesignWithUsageStatisticsValueObject.  # noqa: E501
        :type: str
        """

        self._trouble_details = trouble_details

    @property
    def taxon(self):
        """Gets the taxon of this ArrayDesignWithUsageStatisticsValueObject.  # noqa: E501


        :return: The taxon of this ArrayDesignWithUsageStatisticsValueObject.  # noqa: E501
        :rtype: TaxonValueObject
        """
        return self._taxon

    @taxon.setter
    def taxon(self, taxon):
        """Sets the taxon of this ArrayDesignWithUsageStatisticsValueObject.


        :param taxon: The taxon of this ArrayDesignWithUsageStatisticsValueObject.  # noqa: E501
        :type: TaxonValueObject
        """

        self._taxon = taxon

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ArrayDesignWithUsageStatisticsValueObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ArrayDesignWithUsageStatisticsValueObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

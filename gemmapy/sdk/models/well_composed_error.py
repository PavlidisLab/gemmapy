# coding: utf-8

"""
    Gemma RESTful API

    This website documents the usage of the [Gemma RESTful API](https://gemma.msl.ubc.ca/rest/v2/). Here you can find example script usage of the API, as well as graphical interface for each endpoint, with description of its parameters and the endpoint URL.  Use of this webpage and the Gemma Web services, including the REST API, is subject to [these terms and conditions](https://pavlidislab.github.io/Gemma/terms.html). Please read these in full before continuing to use this webpage or any other part of the Gemma system.  You can [consult the CHANGELOG.md file](https://gemma.msl.ubc.ca/resources/restapidocs/CHANGELOG.md) to view  release notes and recent changes to the Gemma RESTful API.   # noqa: E501

    OpenAPI spec version: 2.9.1
    Contact: pavlab-support@msl.ubc.ca
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WellComposedError(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'reason': 'str',
        'message': 'str',
        'location': 'str',
        'location_type': 'str'
    }

    attribute_map = {
        'reason': 'reason',
        'message': 'message',
        'location': 'location',
        'location_type': 'locationType'
    }

    def __init__(self, reason=None, message=None, location=None, location_type=None):  # noqa: E501
        """WellComposedError - a model defined in Swagger"""  # noqa: E501
        self._reason = None
        self._message = None
        self._location = None
        self._location_type = None
        self.discriminator = None
        if reason is not None:
            self.reason = reason
        if message is not None:
            self.message = message
        if location is not None:
            self.location = location
        if location_type is not None:
            self.location_type = location_type

    @property
    def reason(self):
        """Gets the reason of this WellComposedError.  # noqa: E501


        :return: The reason of this WellComposedError.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this WellComposedError.


        :param reason: The reason of this WellComposedError.  # noqa: E501
        :type: str
        """

        self._reason = reason

    @property
    def message(self):
        """Gets the message of this WellComposedError.  # noqa: E501


        :return: The message of this WellComposedError.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this WellComposedError.


        :param message: The message of this WellComposedError.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def location(self):
        """Gets the location of this WellComposedError.  # noqa: E501


        :return: The location of this WellComposedError.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this WellComposedError.


        :param location: The location of this WellComposedError.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def location_type(self):
        """Gets the location_type of this WellComposedError.  # noqa: E501


        :return: The location_type of this WellComposedError.  # noqa: E501
        :rtype: str
        """
        return self._location_type

    @location_type.setter
    def location_type(self, location_type):
        """Sets the location_type of this WellComposedError.


        :param location_type: The location_type of this WellComposedError.  # noqa: E501
        :type: str
        """
        allowed_values = ["HEADERS", "QUERY", "BODY"]  # noqa: E501
        if location_type not in allowed_values:
            raise ValueError(
                "Invalid value for `location_type` ({0}), must be one of {1}"  # noqa: E501
                .format(location_type, allowed_values)
            )

        self._location_type = location_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WellComposedError, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WellComposedError):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Gemma RESTful API

    This website documents the usage of the [Gemma REST API](https://gemma.msl.ubc.ca/rest/v2/). Here you can find example script usage of the API, as well as graphical interface for each endpoint, with description of its parameters and the endpoint URL.  The documentation of the underlying java code can be found [here](https://gemma.msl.ubc.ca/resources/apidocs/ubic/gemma/web/services/rest/package-summary.html). See the [links section](https://gemma.msl.ubc.ca/resources/restapidocs/#footer) in the footer of this page for other relevant links.  Use of this webpage and Gemma web services, including the REST API, is subject to [these terms and conditions](https://pavlidislab.github.io/Gemma/terms.html). Please read these in full before continuing to use this webpage or any other part of the Gemma system.   # noqa: E501

    OpenAPI spec version: 2.4.1
    Contact: pavlab-support@msl.ubc.ca
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GeneProduct(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'id': 'int',
        'previous_ncbi_id': 'str',
        'physical_location': 'PhysicalLocation',
        'ncbi_gi': 'str',
        'accessions': 'list[DatabaseEntry]',
        'exons': 'list[PhysicalLocation]',
        'gene': 'Gene'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'id': 'id',
        'previous_ncbi_id': 'previousNcbiId',
        'physical_location': 'physicalLocation',
        'ncbi_gi': 'ncbiGi',
        'accessions': 'accessions',
        'exons': 'exons',
        'gene': 'gene'
    }

    def __init__(self, name=None, description=None, id=None, previous_ncbi_id=None, physical_location=None, ncbi_gi=None, accessions=None, exons=None, gene=None):  # noqa: E501
        """GeneProduct - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._description = None
        self._id = None
        self._previous_ncbi_id = None
        self._physical_location = None
        self._ncbi_gi = None
        self._accessions = None
        self._exons = None
        self._gene = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        if previous_ncbi_id is not None:
            self.previous_ncbi_id = previous_ncbi_id
        if physical_location is not None:
            self.physical_location = physical_location
        if ncbi_gi is not None:
            self.ncbi_gi = ncbi_gi
        if accessions is not None:
            self.accessions = accessions
        if exons is not None:
            self.exons = exons
        if gene is not None:
            self.gene = gene

    @property
    def name(self):
        """Gets the name of this GeneProduct.  # noqa: E501


        :return: The name of this GeneProduct.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GeneProduct.


        :param name: The name of this GeneProduct.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this GeneProduct.  # noqa: E501


        :return: The description of this GeneProduct.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GeneProduct.


        :param description: The description of this GeneProduct.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this GeneProduct.  # noqa: E501


        :return: The id of this GeneProduct.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GeneProduct.


        :param id: The id of this GeneProduct.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def previous_ncbi_id(self):
        """Gets the previous_ncbi_id of this GeneProduct.  # noqa: E501


        :return: The previous_ncbi_id of this GeneProduct.  # noqa: E501
        :rtype: str
        """
        return self._previous_ncbi_id

    @previous_ncbi_id.setter
    def previous_ncbi_id(self, previous_ncbi_id):
        """Sets the previous_ncbi_id of this GeneProduct.


        :param previous_ncbi_id: The previous_ncbi_id of this GeneProduct.  # noqa: E501
        :type: str
        """

        self._previous_ncbi_id = previous_ncbi_id

    @property
    def physical_location(self):
        """Gets the physical_location of this GeneProduct.  # noqa: E501


        :return: The physical_location of this GeneProduct.  # noqa: E501
        :rtype: PhysicalLocation
        """
        return self._physical_location

    @physical_location.setter
    def physical_location(self, physical_location):
        """Sets the physical_location of this GeneProduct.


        :param physical_location: The physical_location of this GeneProduct.  # noqa: E501
        :type: PhysicalLocation
        """

        self._physical_location = physical_location

    @property
    def ncbi_gi(self):
        """Gets the ncbi_gi of this GeneProduct.  # noqa: E501


        :return: The ncbi_gi of this GeneProduct.  # noqa: E501
        :rtype: str
        """
        return self._ncbi_gi

    @ncbi_gi.setter
    def ncbi_gi(self, ncbi_gi):
        """Sets the ncbi_gi of this GeneProduct.


        :param ncbi_gi: The ncbi_gi of this GeneProduct.  # noqa: E501
        :type: str
        """

        self._ncbi_gi = ncbi_gi

    @property
    def accessions(self):
        """Gets the accessions of this GeneProduct.  # noqa: E501


        :return: The accessions of this GeneProduct.  # noqa: E501
        :rtype: list[DatabaseEntry]
        """
        return self._accessions

    @accessions.setter
    def accessions(self, accessions):
        """Sets the accessions of this GeneProduct.


        :param accessions: The accessions of this GeneProduct.  # noqa: E501
        :type: list[DatabaseEntry]
        """

        self._accessions = accessions

    @property
    def exons(self):
        """Gets the exons of this GeneProduct.  # noqa: E501


        :return: The exons of this GeneProduct.  # noqa: E501
        :rtype: list[PhysicalLocation]
        """
        return self._exons

    @exons.setter
    def exons(self, exons):
        """Sets the exons of this GeneProduct.


        :param exons: The exons of this GeneProduct.  # noqa: E501
        :type: list[PhysicalLocation]
        """

        self._exons = exons

    @property
    def gene(self):
        """Gets the gene of this GeneProduct.  # noqa: E501


        :return: The gene of this GeneProduct.  # noqa: E501
        :rtype: Gene
        """
        return self._gene

    @gene.setter
    def gene(self, gene):
        """Sets the gene of this GeneProduct.


        :param gene: The gene of this GeneProduct.  # noqa: E501
        :type: Gene
        """

        self._gene = gene

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GeneProduct, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GeneProduct):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

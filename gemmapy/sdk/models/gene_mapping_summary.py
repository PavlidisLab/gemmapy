# coding: utf-8

"""
    Gemma RESTful API

    This website documents the usage of the [Gemma REST API](https://gemma.msl.ubc.ca/rest/v2/). Here you can find example script usage of the API, as well as graphical interface for each endpoint, with description of its parameters and the endpoint URL.  The documentation of the underlying java code can be found [here](https://gemma.msl.ubc.ca/resources/apidocs/ubic/gemma/web/services/rest/package-summary.html). See the [links section](https://gemma.msl.ubc.ca/resources/restapidocs/#footer) in the footer of this page for other relevant links.  Use of this webpage and Gemma web services, including the REST API, is subject to [these terms and conditions](https://pavlidislab.github.io/Gemma/terms.html). Please read these in full before continuing to use this webpage or any other part of the Gemma system.   # noqa: E501

    OpenAPI spec version: 2.4.1
    Contact: pavlab-support@msl.ubc.ca
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GeneMappingSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'gene_product_id_map': 'dict(str, GeneProductValueObject)',
        'gene_product_id_gene_map': 'dict(str, GeneValueObject)',
        'blat_result': 'BlatResultValueObject',
        'gene_product_map': 'dict(str, GeneValueObject)',
        'composite_sequence': 'CompositeSequenceValueObject',
        'identity': 'float',
        'score': 'float',
        'blat_result_id': 'str',
        'gene_products': 'list[GeneProductValueObject]'
    }

    attribute_map = {
        'gene_product_id_map': 'geneProductIdMap',
        'gene_product_id_gene_map': 'geneProductIdGeneMap',
        'blat_result': 'blatResult',
        'gene_product_map': 'geneProductMap',
        'composite_sequence': 'compositeSequence',
        'identity': 'identity',
        'score': 'score',
        'blat_result_id': 'blatResultId',
        'gene_products': 'geneProducts'
    }

    def __init__(self, gene_product_id_map=None, gene_product_id_gene_map=None, blat_result=None, gene_product_map=None, composite_sequence=None, identity=None, score=None, blat_result_id=None, gene_products=None):  # noqa: E501
        """GeneMappingSummary - a model defined in Swagger"""  # noqa: E501
        self._gene_product_id_map = None
        self._gene_product_id_gene_map = None
        self._blat_result = None
        self._gene_product_map = None
        self._composite_sequence = None
        self._identity = None
        self._score = None
        self._blat_result_id = None
        self._gene_products = None
        self.discriminator = None
        if gene_product_id_map is not None:
            self.gene_product_id_map = gene_product_id_map
        if gene_product_id_gene_map is not None:
            self.gene_product_id_gene_map = gene_product_id_gene_map
        if blat_result is not None:
            self.blat_result = blat_result
        if gene_product_map is not None:
            self.gene_product_map = gene_product_map
        if composite_sequence is not None:
            self.composite_sequence = composite_sequence
        if identity is not None:
            self.identity = identity
        if score is not None:
            self.score = score
        if blat_result_id is not None:
            self.blat_result_id = blat_result_id
        if gene_products is not None:
            self.gene_products = gene_products

    @property
    def gene_product_id_map(self):
        """Gets the gene_product_id_map of this GeneMappingSummary.  # noqa: E501


        :return: The gene_product_id_map of this GeneMappingSummary.  # noqa: E501
        :rtype: dict(str, GeneProductValueObject)
        """
        return self._gene_product_id_map

    @gene_product_id_map.setter
    def gene_product_id_map(self, gene_product_id_map):
        """Sets the gene_product_id_map of this GeneMappingSummary.


        :param gene_product_id_map: The gene_product_id_map of this GeneMappingSummary.  # noqa: E501
        :type: dict(str, GeneProductValueObject)
        """

        self._gene_product_id_map = gene_product_id_map

    @property
    def gene_product_id_gene_map(self):
        """Gets the gene_product_id_gene_map of this GeneMappingSummary.  # noqa: E501


        :return: The gene_product_id_gene_map of this GeneMappingSummary.  # noqa: E501
        :rtype: dict(str, GeneValueObject)
        """
        return self._gene_product_id_gene_map

    @gene_product_id_gene_map.setter
    def gene_product_id_gene_map(self, gene_product_id_gene_map):
        """Sets the gene_product_id_gene_map of this GeneMappingSummary.


        :param gene_product_id_gene_map: The gene_product_id_gene_map of this GeneMappingSummary.  # noqa: E501
        :type: dict(str, GeneValueObject)
        """

        self._gene_product_id_gene_map = gene_product_id_gene_map

    @property
    def blat_result(self):
        """Gets the blat_result of this GeneMappingSummary.  # noqa: E501


        :return: The blat_result of this GeneMappingSummary.  # noqa: E501
        :rtype: BlatResultValueObject
        """
        return self._blat_result

    @blat_result.setter
    def blat_result(self, blat_result):
        """Sets the blat_result of this GeneMappingSummary.


        :param blat_result: The blat_result of this GeneMappingSummary.  # noqa: E501
        :type: BlatResultValueObject
        """

        self._blat_result = blat_result

    @property
    def gene_product_map(self):
        """Gets the gene_product_map of this GeneMappingSummary.  # noqa: E501


        :return: The gene_product_map of this GeneMappingSummary.  # noqa: E501
        :rtype: dict(str, GeneValueObject)
        """
        return self._gene_product_map

    @gene_product_map.setter
    def gene_product_map(self, gene_product_map):
        """Sets the gene_product_map of this GeneMappingSummary.


        :param gene_product_map: The gene_product_map of this GeneMappingSummary.  # noqa: E501
        :type: dict(str, GeneValueObject)
        """

        self._gene_product_map = gene_product_map

    @property
    def composite_sequence(self):
        """Gets the composite_sequence of this GeneMappingSummary.  # noqa: E501


        :return: The composite_sequence of this GeneMappingSummary.  # noqa: E501
        :rtype: CompositeSequenceValueObject
        """
        return self._composite_sequence

    @composite_sequence.setter
    def composite_sequence(self, composite_sequence):
        """Sets the composite_sequence of this GeneMappingSummary.


        :param composite_sequence: The composite_sequence of this GeneMappingSummary.  # noqa: E501
        :type: CompositeSequenceValueObject
        """

        self._composite_sequence = composite_sequence

    @property
    def identity(self):
        """Gets the identity of this GeneMappingSummary.  # noqa: E501


        :return: The identity of this GeneMappingSummary.  # noqa: E501
        :rtype: float
        """
        return self._identity

    @identity.setter
    def identity(self, identity):
        """Sets the identity of this GeneMappingSummary.


        :param identity: The identity of this GeneMappingSummary.  # noqa: E501
        :type: float
        """

        self._identity = identity

    @property
    def score(self):
        """Gets the score of this GeneMappingSummary.  # noqa: E501


        :return: The score of this GeneMappingSummary.  # noqa: E501
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this GeneMappingSummary.


        :param score: The score of this GeneMappingSummary.  # noqa: E501
        :type: float
        """

        self._score = score

    @property
    def blat_result_id(self):
        """Gets the blat_result_id of this GeneMappingSummary.  # noqa: E501


        :return: The blat_result_id of this GeneMappingSummary.  # noqa: E501
        :rtype: str
        """
        return self._blat_result_id

    @blat_result_id.setter
    def blat_result_id(self, blat_result_id):
        """Sets the blat_result_id of this GeneMappingSummary.


        :param blat_result_id: The blat_result_id of this GeneMappingSummary.  # noqa: E501
        :type: str
        """

        self._blat_result_id = blat_result_id

    @property
    def gene_products(self):
        """Gets the gene_products of this GeneMappingSummary.  # noqa: E501


        :return: The gene_products of this GeneMappingSummary.  # noqa: E501
        :rtype: list[GeneProductValueObject]
        """
        return self._gene_products

    @gene_products.setter
    def gene_products(self, gene_products):
        """Sets the gene_products of this GeneMappingSummary.


        :param gene_products: The gene_products of this GeneMappingSummary.  # noqa: E501
        :type: list[GeneProductValueObject]
        """

        self._gene_products = gene_products

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GeneMappingSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GeneMappingSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
